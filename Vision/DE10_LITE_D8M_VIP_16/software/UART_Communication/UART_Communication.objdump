
UART_Communication.elf:     file format elf32-littlenios2
UART_Communication.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0001103c memsz 0x0001103c flags r-x
    LOAD off    0x0001205c vaddr 0x0003105c paddr 0x00032c10 align 2**12
         filesz 0x00001bb4 memsz 0x00001bb4 flags rw-
    LOAD off    0x000147c4 vaddr 0x000347c4 paddr 0x000347c4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010824  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005f4  00030a68  00030a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb4  0003105c  00032c10  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  000347c4  000347c4  000147c4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00034924  00034924  00013c10  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013c10  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d0  00000000  00000000  00013c38  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b07a  00000000  00000000  00014d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000acbc  00000000  00000000  0003fd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d159  00000000  00000000  0004aa3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002548  00000000  00000000  00057b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e0a  00000000  00000000  0005a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018a83  00000000  00000000  0005deea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00076970  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a00  00000000  00000000  000769a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007b9f6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0007b9f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007ba03  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007ba04  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007ba05  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007ba09  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007ba0d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007ba11  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007ba1a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007ba23  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  0007ba2c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  0007ba30  2**0
                  CONTENTS, READONLY
 29 .jdi          00004eb7  00000000  00000000  0007ba7c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a5ea2  00000000  00000000  00080933  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00030a68 l    d  .rodata	00000000 .rodata
0003105c l    d  .rwdata	00000000 .rwdata
000347c4 l    d  .bss	00000000 .bss
00034924 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_Communication_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
00030bd5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00020578 l     F .text	00000008 __fp_unlock
0002058c l     F .text	0000019c __sinit.part.1
00020728 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0003105c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00021f90 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00030da2 l     O .rodata	00000010 zeroes.4404
00024810 l     F .text	000000bc __sbprintf
00030db2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00024ad4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
000318a8 l     O .rwdata	00000020 lc_ctype_charset
00031888 l     O .rwdata	00000020 lc_message_charset
000318c8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00030de0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00028aa0 l     F .text	000000fc __sprint_r.part.0
00030f14 l     O .rodata	00000010 blanks.4348
00030f04 l     O .rodata	00000010 zeroes.4349
0002a02c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d9c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002dacc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002daf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002dbe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002dcc4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002ddb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0002df84 l     F .text	0000003c alt_get_errno
0002dfc0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0002e1d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00032c00 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002e424 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e558 l     F .text	00000034 alt_dev_reg
00031aa8 l     O .rwdata	00001060 jtag_uart
00032b08 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002e86c l     F .text	0000020c altera_avalon_jtag_uart_irq
0002ea78 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002f0b0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002f360 l     F .text	0000009c altera_avalon_uart_irq
0002f3fc l     F .text	000000e4 altera_avalon_uart_rxirq
0002f4e0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0002f67c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0002f894 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002fbf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000302a0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000347f8 g     O .bss	00000004 alt_instruction_exception_handler
00028214 g     F .text	00000074 _mprec_log10
00028300 g     F .text	0000008c __any_on
000270a4 g     F .text	00000054 _isatty_r
00030dec g     O .rodata	00000028 __mprec_tinytens
0002dec0 g     F .text	0000007c alt_main
00021ebc g     F .text	000000c0 _puts_r
00034824 g     O .bss	00000100 alt_irq
000271d4 g     F .text	00000060 _lseek_r
00032c10 g       *ABS*	00000000 __flash_rwdata_start
00026708 g     F .text	000000ac __sflags
0002c4ec g     F .text	00000088 .hidden __eqdf2
00034924 g       *ABS*	00000000 __alt_heap_start
00021e80 g     F .text	0000003c printf
0002a50c g     F .text	0000009c _wcrtomb_r
000222ac g     F .text	0000005c __sseek
000208c8 g     F .text	00000010 __sinit
0002a3b4 g     F .text	00000140 __swbuf_r
000270f8 g     F .text	0000007c _setlocale_r
00020730 g     F .text	00000068 __sfmoreglue
0002df60 g     F .text	00000024 __malloc_unlock
00027234 g     F .text	0000015c memmove
000208b0 g     F .text	00000018 _cleanup
00027390 g     F .text	000000a8 _Balloc
0002c574 g     F .text	000000dc .hidden __gtdf2
00030584 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00020ef0 g     F .text	0000005c _fstat_r
000347c4 g     O .bss	00000004 errno
00022228 g     F .text	00000008 __seofread
000347e4 g     O .bss	00000004 alt_argv
0003abcc g       *ABS*	00000000 _gp
0002055c g     F .text	0000001c fgets
00031928 g     O .rwdata	00000180 alt_fd_list
0002fd90 g     F .text	00000090 alt_find_dev
00021b80 g     F .text	00000148 memcpy
00020580 g     F .text	0000000c _cleanup_r
0002d7d8 g     F .text	000000dc .hidden __floatsidf
00030364 g     F .text	0000007c alt_io_redirect
0002c650 g     F .text	000000f4 .hidden __ltdf2
00030a68 g       *ABS*	00000000 __DTOR_END__
00021f7c g     F .text	00000014 puts
00030638 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00028950 g     F .text	00000074 __fpclassifyd
00028170 g     F .text	000000a4 __ratio
0002a010 g     F .text	0000001c __vfiprintf_internal
0002ec70 g     F .text	0000021c altera_avalon_jtag_uart_read
00021e50 g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002b29c g     F .text	00000064 .hidden __udivsi3
0002dc20 g     F .text	000000a4 isatty
00030e3c g     O .rodata	000000c8 __mprec_tens
00027174 g     F .text	0000000c __locale_charset
000305a8 g     F .text	00000090 alt_icache_flush
000347d0 g     O .bss	00000004 __malloc_top_pad
00032be0 g     O .rwdata	00000004 __mb_cur_max
000271a4 g     F .text	0000000c _localeconv_r
0002779c g     F .text	0000003c __i2b
00026be8 g     F .text	000004bc __sfvwrite_r
00022180 g     F .text	00000054 _sbrk_r
0002838c g     F .text	00000060 _read_r
00032bf8 g     O .rwdata	00000004 alt_max_fd
0002635c g     F .text	000000f0 _fclose_r
000266d8 g     F .text	00000030 fflush
000347cc g     O .bss	00000004 __malloc_max_sbrked_mem
0002b358 g     F .text	000008ac .hidden __adddf3
00027f18 g     F .text	0000010c __b2d
0002ac6c g     F .text	00000538 .hidden __umoddi3
0002ddec g     F .text	000000d4 lseek
00032bd0 g     O .rwdata	00000004 _global_impure_ptr
000283ec g     F .text	00000564 _realloc_r
00034924 g       *ABS*	00000000 __bss_end
000301b0 g     F .text	000000f0 alt_iic_isr_register
0003047c g     F .text	00000108 alt_tick
0002a6f4 g     F .text	00000578 .hidden __udivdi3
0002a310 g     F .text	00000024 _fputwc_r
00030e14 g     O .rodata	00000028 __mprec_bigtens
00027580 g     F .text	00000104 __s2b
0002d8b4 g     F .text	000000a8 .hidden __floatunsidf
00027c58 g     F .text	00000060 __mcmp
0002f2b4 g     F .text	000000ac altera_avalon_uart_init
000208e8 g     F .text	00000018 __fp_lock_all
00030164 g     F .text	0000004c alt_ic_irq_enabled
000303e0 g     F .text	0000009c alt_alarm_stop
000225e0 g     F .text	0000001c strtol
000347ec g     O .bss	00000004 alt_irq_active
00020a90 g     F .text	00000444 _fseeko_r
000200fc g     F .exceptions	000000d4 alt_irq_handler
00031900 g     O .rwdata	00000028 alt_dev_null
0002fba8 g     F .text	00000048 alt_dcache_flush_all
00027684 g     F .text	00000068 __hi0bits
0002d758 g     F .text	00000080 .hidden __fixdfsi
00032c10 g       *ABS*	00000000 __ram_rwdata_end
00032bf0 g     O .rwdata	00000008 alt_dev_list
0002e460 g     F .text	000000f8 write
0003105c g       *ABS*	00000000 __ram_rodata_end
0002db34 g     F .text	000000b0 fstat
00020a4c g     F .text	00000024 fprintf
0002c650 g     F .text	000000f4 .hidden __ledf2
000279d0 g     F .text	00000140 __pow5mult
00028bb4 g     F .text	0000145c ___vfiprintf_internal_r
000347dc g     O .bss	00000004 __nlocale_changed
0002b300 g     F .text	00000058 .hidden __umodsi3
00034924 g       *ABS*	00000000 end
00020ed4 g     F .text	0000001c fseeko
0002040c g     F .text	0000000c _atoi_r
0002f8d0 g     F .text	000001ac altera_avalon_uart_write
00020a74 g     F .text	0000001c fseek
0002e7ac g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00030a68 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002f128 g     F .text	0000007c alt_avalon_timer_sc_init
0002f204 g     F .text	00000060 altera_avalon_uart_write_fd
0002d95c g     F .text	00000064 .hidden __clzsi2
0002f264 g     F .text	00000050 altera_avalon_uart_close_fd
0002ee8c g     F .text	00000224 altera_avalon_jtag_uart_write
000208d8 g     F .text	00000004 __sfp_lock_acquire
00021a9c g     F .text	000000e4 memchr
000225fc g     F .text	000021f8 ___vfprintf_internal_r
000268d8 g     F .text	00000310 _free_r
00027180 g     F .text	00000010 __locale_mb_cur_max
000308b4 g     F .text	00000180 __call_exitprocs
000347d8 g     O .bss	00000004 __mlocale_changed
00032bd8 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
000347f0 g     O .bss	00000004 _alt_tick_rate
00027b10 g     F .text	00000148 __lshift
000347f4 g     O .bss	00000004 _alt_nticks
0002e214 g     F .text	000000fc read
0002e5c4 g     F .text	00000084 alt_sys_init
00021df0 g     F .text	00000060 _open_r
0003079c g     F .text	00000118 __register_exitproc
000277d8 g     F .text	000001f8 __multiply
0002eb18 g     F .text	00000068 altera_avalon_jtag_uart_close
0003105c g       *ABS*	00000000 __ram_rwdata_start
00030a68 g       *ABS*	00000000 __ram_rodata_start
000347fc g     O .bss	00000028 __malloc_current_mallinfo
00028024 g     F .text	0000014c __d2b
0002e648 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002ff28 g     F .text	000000a4 alt_get_fd
00024a80 g     F .text	00000054 _close_r
00030720 g     F .text	0000007c memcmp
0002e708 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00034924 g       *ABS*	00000000 __alt_stack_base
0002e758 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002492c g     F .text	00000154 __swsetup_r
0002bc04 g     F .text	000008e8 .hidden __divdf3
00020798 g     F .text	00000118 __sfp
00028288 g     F .text	00000078 __copybits
00031480 g     O .rwdata	00000408 __malloc_av_
000208e4 g     F .text	00000004 __sinit_lock_release
0002c744 g     F .text	00000718 .hidden __muldf3
000221d4 g     F .text	00000054 __sread
0002fe20 g     F .text	00000108 alt_find_file
0002fc2c g     F .text	000000a4 alt_dev_llist_insert
0002df3c g     F .text	00000024 __malloc_lock
00020a24 g     F .text	00000028 _fprintf_r
0002e374 g     F .text	000000b0 sbrk
0002667c g     F .text	0000005c _fflush_r
0002a0e8 g     F .text	000000c4 _calloc_r
00020a0c g     F .text	00000018 fopen
000347c4 g       *ABS*	00000000 __bss_start
00021cc8 g     F .text	00000128 memset
00020290 g     F .text	00000170 main
000347e8 g     O .bss	00000004 alt_envp
000347c8 g     O .bss	00000004 __malloc_max_total_mem
0002e6a8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002a4f4 g     F .text	00000018 __swbuf
00022308 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0002644c g     F .text	00000014 fclose
000223a8 g     F .text	00000238 _strtol_r
00024cd4 g     F .text	00001688 _dtoa_r
00021290 g     F .text	0000080c _malloc_r
0002a668 g     F .text	00000030 __ascii_wctomb
00032bfc g     O .rwdata	00000004 alt_errno
00020f4c g     F .text	000000c4 _fwalk
00020418 g     F .text	00000144 _fgets_r
0002b1a4 g     F .text	00000084 .hidden __divsi3
000267b4 g     F .text	00000124 _malloc_trim_r
00030a68 g       *ABS*	00000000 __CTOR_END__
000289c4 g     F .text	000000dc strcmp
00030a68 g       *ABS*	00000000 __flash_rodata_start
00030a68 g       *ABS*	00000000 __DTOR_LIST__
0002c4ec g     F .text	00000088 .hidden __nedf2
0002e58c g     F .text	00000038 alt_irq_init
0002e310 g     F .text	00000064 alt_release_fd
00030f24 g     O .rodata	00000100 .hidden __clz_tab
000347d4 g     O .bss	00000004 _PathLocale
000306d4 g     F .text	00000014 atexit
000248cc g     F .text	00000060 _write_r
000271b0 g     F .text	00000018 setlocale
00032bd4 g     O .rwdata	00000004 _impure_ptr
000347e0 g     O .bss	00000004 alt_argc
00026460 g     F .text	0000021c __sflush_r
0002fd30 g     F .text	00000060 _do_dtors
0002719c g     F .text	00000008 __locale_cjk_lang
00020a70 g     F .text	00000004 _fseek_r
00021fac g     F .text	000001d4 __srefill_r
00020020 g       .exceptions	00000000 alt_irq_entry
00027eb4 g     F .text	00000064 __ulp
00020900 g     F .text	00000018 __fp_unlock_all
00032be8 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000271c8 g     F .text	0000000c localeconv
00030000 g     F .text	00000050 alt_ic_isr_register
00032c10 g       *ABS*	00000000 _edata
0002f1a4 g     F .text	00000060 altera_avalon_uart_read_fd
00034924 g       *ABS*	00000000 _end
0002a1ac g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
0002eb80 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000300d8 g     F .text	0000008c alt_ic_irq_disable
00022230 g     F .text	0000007c __swrite
00032bdc g     O .rwdata	00000004 __malloc_trim_threshold
00027190 g     F .text	0000000c __locale_msgcharset
000306e8 g     F .text	00000038 exit
00021010 g     F .text	000000c4 _fwalk_reent
00027cb8 g     F .text	000001fc __mdiff
0002b228 g     F .text	00000074 .hidden __modsi3
00032bcc g     O .rwdata	00000004 __ctype_ptr__
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000208dc g     F .text	00000004 __sfp_lock_release
00020400 g     F .text	0000000c atoi
00030ad4 g     O .rodata	00000101 _ctype_
0002f628 g     F .text	00000054 altera_avalon_uart_close
00020918 g     F .text	000000f4 _fopen_r
00030a34 g     F .text	00000034 _exit
0002fa7c g     F .text	0000012c alt_alarm_start
000210d4 g     F .text	000001bc __smakebuf_r
00022310 g     F .text	00000098 strlen
0002e084 g     F .text	00000154 open
0002c574 g     F .text	000000dc .hidden __gedf2
00032be4 g     O .rwdata	00000004 __wctomb
00028b9c g     F .text	00000018 __sprint_r
0002ffcc g     F .text	00000034 alt_icache_flush_all
00032c04 g     O .rwdata	00000004 alt_priority_mask
00030050 g     F .text	00000088 alt_ic_irq_enable
000247f4 g     F .text	0000001c __vfprintf_internal
0002f6b8 g     F .text	000001dc altera_avalon_uart_read
0002a698 g     F .text	0000005c _wctomb_r
0002ce5c g     F .text	000008fc .hidden __subdf3
000276ec g     F .text	000000b0 __lo0bits
00032c08 g     O .rwdata	00000008 alt_alarm_list
0002fcd0 g     F .text	00000060 _do_ctors
0002a5a8 g     F .text	000000c0 wcrtomb
0002d9fc g     F .text	000000d0 close
0002dd2c g     F .text	00000084 alt_load
0002a334 g     F .text	00000080 fputwc
000208e0 g     F .text	00000004 __sinit_lock_acquire
00027460 g     F .text	00000120 __multadd
00027438 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10920904 	addi	r2,r2,18468
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10920904 	addi	r2,r2,18468
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a70b17 	ldw	r2,-25556(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a70b17 	ldw	r2,-25556(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6aaf314 	ori	gp,gp,43980
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	1091f114 	ori	r2,r2,18372

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18d24914 	ori	r3,r3,18724

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	002dd2c0 	call	2dd2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002dec00 	call	2dec0 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffe028c>

00020290 <main>:
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_timer_regs.h"


int main()
{
   20290:	defff504 	addi	sp,sp,-44
   20294:	dfc00a15 	stw	ra,40(sp)
   20298:	df000915 	stw	fp,36(sp)
   2029c:	df000904 	addi	fp,sp,36
  printf("Terminal start\n");
   202a0:	010000f4 	movhi	r4,3
   202a4:	21029a04 	addi	r4,r4,2664
   202a8:	0021f7c0 	call	21f7c <puts>

  FILE* ser = fopen("/dev/uart_0", "r+");
   202ac:	014000f4 	movhi	r5,3
   202b0:	29429e04 	addi	r5,r5,2680
   202b4:	010000f4 	movhi	r4,3
   202b8:	21029f04 	addi	r4,r4,2684
   202bc:	0020a0c0 	call	20a0c <fopen>
   202c0:	e0bff915 	stw	r2,-28(fp)
  if(ser){
   202c4:	e0bff917 	ldw	r2,-28(fp)
   202c8:	10000426 	beq	r2,zero,202dc <main+0x4c>
      printf("Opened UART\n");
   202cc:	010000f4 	movhi	r4,3
   202d0:	2102a204 	addi	r4,r4,2696
   202d4:	0021f7c0 	call	21f7c <puts>
   202d8:	00000406 	br	202ec <main+0x5c>
  } else {
	  printf("Failed to open UART\n");
   202dc:	010000f4 	movhi	r4,3
   202e0:	2102a504 	addi	r4,r4,2708
   202e4:	0021f7c0 	call	21f7c <puts>
      while (1);
   202e8:	003fff06 	br	202e8 <__alt_data_end+0xfffe02e8>
  }

  while(1) {

	  char buf[20];
	  int val = 0;
   202ec:	e03ffa15 	stw	zero,-24(fp)

	  if (fgets(buf, 20, ser) != NULL) {
   202f0:	e0bffb04 	addi	r2,fp,-20
   202f4:	e1bff917 	ldw	r6,-28(fp)
   202f8:	01400504 	movi	r5,20
   202fc:	1009883a 	mov	r4,r2
   20300:	002055c0 	call	2055c <fgets>
   20304:	103ff926 	beq	r2,zero,202ec <__alt_data_end+0xfffe02ec>

		  printf("message received: %s\n", buf);
   20308:	e0bffb04 	addi	r2,fp,-20
   2030c:	100b883a 	mov	r5,r2
   20310:	010000f4 	movhi	r4,3
   20314:	2102aa04 	addi	r4,r4,2728
   20318:	0021e800 	call	21e80 <printf>

		  int isNum = 1;
   2031c:	00800044 	movi	r2,1
   20320:	e0bff715 	stw	r2,-36(fp)
		  for (int i=0; (i<20) & (buf[i] != '\n'); i++) {
   20324:	e03ff815 	stw	zero,-32(fp)
   20328:	00001106 	br	20370 <main+0xe0>
			  isNum = isdigit(buf[i]);
   2032c:	d0e00017 	ldw	r3,-32768(gp)
   20330:	e13ffb04 	addi	r4,fp,-20
   20334:	e0bff817 	ldw	r2,-32(fp)
   20338:	2085883a 	add	r2,r4,r2
   2033c:	10800003 	ldbu	r2,0(r2)
   20340:	10803fcc 	andi	r2,r2,255
   20344:	1080201c 	xori	r2,r2,128
   20348:	10bfe004 	addi	r2,r2,-128
   2034c:	10800044 	addi	r2,r2,1
   20350:	1885883a 	add	r2,r3,r2
   20354:	10800003 	ldbu	r2,0(r2)
   20358:	10803fcc 	andi	r2,r2,255
   2035c:	1080010c 	andi	r2,r2,4
   20360:	e0bff715 	stw	r2,-36(fp)
	  if (fgets(buf, 20, ser) != NULL) {

		  printf("message received: %s\n", buf);

		  int isNum = 1;
		  for (int i=0; (i<20) & (buf[i] != '\n'); i++) {
   20364:	e0bff817 	ldw	r2,-32(fp)
   20368:	10800044 	addi	r2,r2,1
   2036c:	e0bff815 	stw	r2,-32(fp)
   20370:	e0bff817 	ldw	r2,-32(fp)
   20374:	10800510 	cmplti	r2,r2,20
   20378:	1009883a 	mov	r4,r2
   2037c:	e0fffb04 	addi	r3,fp,-20
   20380:	e0bff817 	ldw	r2,-32(fp)
   20384:	1885883a 	add	r2,r3,r2
   20388:	10800003 	ldbu	r2,0(r2)
   2038c:	10803fcc 	andi	r2,r2,255
   20390:	1080201c 	xori	r2,r2,128
   20394:	10bfe004 	addi	r2,r2,-128
   20398:	10800298 	cmpnei	r2,r2,10
   2039c:	2084703a 	and	r2,r4,r2
   203a0:	10803fcc 	andi	r2,r2,255
   203a4:	103fe11e 	bne	r2,zero,2032c <__alt_data_end+0xfffe032c>
			  isNum = isdigit(buf[i]);
		  }

		  printf("isNum =  %d\n", isNum);
   203a8:	e17ff717 	ldw	r5,-36(fp)
   203ac:	010000f4 	movhi	r4,3
   203b0:	2102b004 	addi	r4,r4,2752
   203b4:	0021e800 	call	21e80 <printf>

		  if (isNum) {
   203b8:	e0bff717 	ldw	r2,-36(fp)
   203bc:	103fcb26 	beq	r2,zero,202ec <__alt_data_end+0xfffe02ec>
			  printf(buf);
   203c0:	e0bffb04 	addi	r2,fp,-20
   203c4:	1009883a 	mov	r4,r2
   203c8:	0021e800 	call	21e80 <printf>
			  val = atoi(buf);
   203cc:	e0bffb04 	addi	r2,fp,-20
   203d0:	1009883a 	mov	r4,r2
   203d4:	00204000 	call	20400 <atoi>
   203d8:	e0bffa15 	stw	r2,-24(fp)
			  val++;
   203dc:	e0bffa17 	ldw	r2,-24(fp)
   203e0:	10800044 	addi	r2,r2,1
   203e4:	e0bffa15 	stw	r2,-24(fp)
			  fprintf(ser, "%d\n", val);
   203e8:	e1bffa17 	ldw	r6,-24(fp)
   203ec:	014000f4 	movhi	r5,3
   203f0:	2942b404 	addi	r5,r5,2768
   203f4:	e13ff917 	ldw	r4,-28(fp)
   203f8:	0020a4c0 	call	20a4c <fprintf>
		  }

	  }

  }
   203fc:	003fbb06 	br	202ec <__alt_data_end+0xfffe02ec>

00020400 <atoi>:
   20400:	01800284 	movi	r6,10
   20404:	000b883a 	mov	r5,zero
   20408:	00225e01 	jmpi	225e0 <strtol>

0002040c <_atoi_r>:
   2040c:	01c00284 	movi	r7,10
   20410:	000d883a 	mov	r6,zero
   20414:	00223a81 	jmpi	223a8 <_strtol_r>

00020418 <_fgets_r>:
   20418:	00c00044 	movi	r3,1
   2041c:	19804d0e 	bge	r3,r6,20554 <_fgets_r+0x13c>
   20420:	defff804 	addi	sp,sp,-32
   20424:	dd000415 	stw	r20,16(sp)
   20428:	dcc00315 	stw	r19,12(sp)
   2042c:	dc800215 	stw	r18,8(sp)
   20430:	dc400115 	stw	r17,4(sp)
   20434:	dfc00715 	stw	ra,28(sp)
   20438:	dd800615 	stw	r22,24(sp)
   2043c:	dd400515 	stw	r21,20(sp)
   20440:	dc000015 	stw	r16,0(sp)
   20444:	2027883a 	mov	r19,r4
   20448:	3823883a 	mov	r17,r7
   2044c:	2829883a 	mov	r20,r5
   20450:	3025883a 	mov	r18,r6
   20454:	20000226 	beq	r4,zero,20460 <_fgets_r+0x48>
   20458:	20800e17 	ldw	r2,56(r4)
   2045c:	10003926 	beq	r2,zero,20544 <_fgets_r+0x12c>
   20460:	94bfffc4 	addi	r18,r18,-1
   20464:	a02b883a 	mov	r21,r20
   20468:	00001506 	br	204c0 <_fgets_r+0xa8>
   2046c:	01400284 	movi	r5,10
   20470:	8d800017 	ldw	r22,0(r17)
   20474:	9400012e 	bgeu	r18,r16,2047c <_fgets_r+0x64>
   20478:	9021883a 	mov	r16,r18
   2047c:	800d883a 	mov	r6,r16
   20480:	b009883a 	mov	r4,r22
   20484:	0021a9c0 	call	21a9c <memchr>
   20488:	a809883a 	mov	r4,r21
   2048c:	800d883a 	mov	r6,r16
   20490:	b00b883a 	mov	r5,r22
   20494:	9425c83a 	sub	r18,r18,r16
   20498:	10001e1e 	bne	r2,zero,20514 <_fgets_r+0xfc>
   2049c:	88800117 	ldw	r2,4(r17)
   204a0:	88c00017 	ldw	r3,0(r17)
   204a4:	ac2b883a 	add	r21,r21,r16
   204a8:	1405c83a 	sub	r2,r2,r16
   204ac:	1c21883a 	add	r16,r3,r16
   204b0:	88800115 	stw	r2,4(r17)
   204b4:	8c000015 	stw	r16,0(r17)
   204b8:	0021b800 	call	21b80 <memcpy>
   204bc:	90000926 	beq	r18,zero,204e4 <_fgets_r+0xcc>
   204c0:	8c000117 	ldw	r16,4(r17)
   204c4:	803fe91e 	bne	r16,zero,2046c <__alt_data_end+0xfffe046c>
   204c8:	880b883a 	mov	r5,r17
   204cc:	9809883a 	mov	r4,r19
   204d0:	0021fac0 	call	21fac <__srefill_r>
   204d4:	1000021e 	bne	r2,zero,204e0 <_fgets_r+0xc8>
   204d8:	8c000117 	ldw	r16,4(r17)
   204dc:	003fe306 	br	2046c <__alt_data_end+0xfffe046c>
   204e0:	ad001a26 	beq	r21,r20,2054c <_fgets_r+0x134>
   204e4:	a8000005 	stb	zero,0(r21)
   204e8:	a005883a 	mov	r2,r20
   204ec:	dfc00717 	ldw	ra,28(sp)
   204f0:	dd800617 	ldw	r22,24(sp)
   204f4:	dd400517 	ldw	r21,20(sp)
   204f8:	dd000417 	ldw	r20,16(sp)
   204fc:	dcc00317 	ldw	r19,12(sp)
   20500:	dc800217 	ldw	r18,8(sp)
   20504:	dc400117 	ldw	r17,4(sp)
   20508:	dc000017 	ldw	r16,0(sp)
   2050c:	dec00804 	addi	sp,sp,32
   20510:	f800283a 	ret
   20514:	88c00117 	ldw	r3,4(r17)
   20518:	10800044 	addi	r2,r2,1
   2051c:	15a1c83a 	sub	r16,r2,r22
   20520:	1c07c83a 	sub	r3,r3,r16
   20524:	88c00115 	stw	r3,4(r17)
   20528:	88800015 	stw	r2,0(r17)
   2052c:	800d883a 	mov	r6,r16
   20530:	0021b800 	call	21b80 <memcpy>
   20534:	ac2b883a 	add	r21,r21,r16
   20538:	a8000005 	stb	zero,0(r21)
   2053c:	a005883a 	mov	r2,r20
   20540:	003fea06 	br	204ec <__alt_data_end+0xfffe04ec>
   20544:	00208c80 	call	208c8 <__sinit>
   20548:	003fc506 	br	20460 <__alt_data_end+0xfffe0460>
   2054c:	0005883a 	mov	r2,zero
   20550:	003fe606 	br	204ec <__alt_data_end+0xfffe04ec>
   20554:	0005883a 	mov	r2,zero
   20558:	f800283a 	ret

0002055c <fgets>:
   2055c:	008000f4 	movhi	r2,3
   20560:	108af504 	addi	r2,r2,11220
   20564:	300f883a 	mov	r7,r6
   20568:	280d883a 	mov	r6,r5
   2056c:	200b883a 	mov	r5,r4
   20570:	11000017 	ldw	r4,0(r2)
   20574:	00204181 	jmpi	20418 <_fgets_r>

00020578 <__fp_unlock>:
   20578:	0005883a 	mov	r2,zero
   2057c:	f800283a 	ret

00020580 <_cleanup_r>:
   20580:	014000b4 	movhi	r5,2
   20584:	2958d704 	addi	r5,r5,25436
   20588:	00210101 	jmpi	21010 <_fwalk_reent>

0002058c <__sinit.part.1>:
   2058c:	defff704 	addi	sp,sp,-36
   20590:	00c000b4 	movhi	r3,2
   20594:	dfc00815 	stw	ra,32(sp)
   20598:	ddc00715 	stw	r23,28(sp)
   2059c:	dd800615 	stw	r22,24(sp)
   205a0:	dd400515 	stw	r21,20(sp)
   205a4:	dd000415 	stw	r20,16(sp)
   205a8:	dcc00315 	stw	r19,12(sp)
   205ac:	dc800215 	stw	r18,8(sp)
   205b0:	dc400115 	stw	r17,4(sp)
   205b4:	dc000015 	stw	r16,0(sp)
   205b8:	18c16004 	addi	r3,r3,1408
   205bc:	24000117 	ldw	r16,4(r4)
   205c0:	20c00f15 	stw	r3,60(r4)
   205c4:	2080bb04 	addi	r2,r4,748
   205c8:	00c000c4 	movi	r3,3
   205cc:	20c0b915 	stw	r3,740(r4)
   205d0:	2080ba15 	stw	r2,744(r4)
   205d4:	2000b815 	stw	zero,736(r4)
   205d8:	05c00204 	movi	r23,8
   205dc:	00800104 	movi	r2,4
   205e0:	2025883a 	mov	r18,r4
   205e4:	b80d883a 	mov	r6,r23
   205e8:	81001704 	addi	r4,r16,92
   205ec:	000b883a 	mov	r5,zero
   205f0:	80000015 	stw	zero,0(r16)
   205f4:	80000115 	stw	zero,4(r16)
   205f8:	80000215 	stw	zero,8(r16)
   205fc:	8080030d 	sth	r2,12(r16)
   20600:	80001915 	stw	zero,100(r16)
   20604:	8000038d 	sth	zero,14(r16)
   20608:	80000415 	stw	zero,16(r16)
   2060c:	80000515 	stw	zero,20(r16)
   20610:	80000615 	stw	zero,24(r16)
   20614:	0021cc80 	call	21cc8 <memset>
   20618:	058000b4 	movhi	r22,2
   2061c:	94400217 	ldw	r17,8(r18)
   20620:	054000b4 	movhi	r21,2
   20624:	050000b4 	movhi	r20,2
   20628:	04c000b4 	movhi	r19,2
   2062c:	b5887504 	addi	r22,r22,8660
   20630:	ad488c04 	addi	r21,r21,8752
   20634:	a508ab04 	addi	r20,r20,8876
   20638:	9cc8c204 	addi	r19,r19,8968
   2063c:	85800815 	stw	r22,32(r16)
   20640:	85400915 	stw	r21,36(r16)
   20644:	85000a15 	stw	r20,40(r16)
   20648:	84c00b15 	stw	r19,44(r16)
   2064c:	84000715 	stw	r16,28(r16)
   20650:	00800284 	movi	r2,10
   20654:	8880030d 	sth	r2,12(r17)
   20658:	00800044 	movi	r2,1
   2065c:	b80d883a 	mov	r6,r23
   20660:	89001704 	addi	r4,r17,92
   20664:	000b883a 	mov	r5,zero
   20668:	88000015 	stw	zero,0(r17)
   2066c:	88000115 	stw	zero,4(r17)
   20670:	88000215 	stw	zero,8(r17)
   20674:	88001915 	stw	zero,100(r17)
   20678:	8880038d 	sth	r2,14(r17)
   2067c:	88000415 	stw	zero,16(r17)
   20680:	88000515 	stw	zero,20(r17)
   20684:	88000615 	stw	zero,24(r17)
   20688:	0021cc80 	call	21cc8 <memset>
   2068c:	94000317 	ldw	r16,12(r18)
   20690:	00800484 	movi	r2,18
   20694:	8c400715 	stw	r17,28(r17)
   20698:	8d800815 	stw	r22,32(r17)
   2069c:	8d400915 	stw	r21,36(r17)
   206a0:	8d000a15 	stw	r20,40(r17)
   206a4:	8cc00b15 	stw	r19,44(r17)
   206a8:	8080030d 	sth	r2,12(r16)
   206ac:	00800084 	movi	r2,2
   206b0:	80000015 	stw	zero,0(r16)
   206b4:	80000115 	stw	zero,4(r16)
   206b8:	80000215 	stw	zero,8(r16)
   206bc:	80001915 	stw	zero,100(r16)
   206c0:	8080038d 	sth	r2,14(r16)
   206c4:	80000415 	stw	zero,16(r16)
   206c8:	80000515 	stw	zero,20(r16)
   206cc:	80000615 	stw	zero,24(r16)
   206d0:	b80d883a 	mov	r6,r23
   206d4:	000b883a 	mov	r5,zero
   206d8:	81001704 	addi	r4,r16,92
   206dc:	0021cc80 	call	21cc8 <memset>
   206e0:	00800044 	movi	r2,1
   206e4:	84000715 	stw	r16,28(r16)
   206e8:	85800815 	stw	r22,32(r16)
   206ec:	85400915 	stw	r21,36(r16)
   206f0:	85000a15 	stw	r20,40(r16)
   206f4:	84c00b15 	stw	r19,44(r16)
   206f8:	90800e15 	stw	r2,56(r18)
   206fc:	dfc00817 	ldw	ra,32(sp)
   20700:	ddc00717 	ldw	r23,28(sp)
   20704:	dd800617 	ldw	r22,24(sp)
   20708:	dd400517 	ldw	r21,20(sp)
   2070c:	dd000417 	ldw	r20,16(sp)
   20710:	dcc00317 	ldw	r19,12(sp)
   20714:	dc800217 	ldw	r18,8(sp)
   20718:	dc400117 	ldw	r17,4(sp)
   2071c:	dc000017 	ldw	r16,0(sp)
   20720:	dec00904 	addi	sp,sp,36
   20724:	f800283a 	ret

00020728 <__fp_lock>:
   20728:	0005883a 	mov	r2,zero
   2072c:	f800283a 	ret

00020730 <__sfmoreglue>:
   20730:	defffc04 	addi	sp,sp,-16
   20734:	dc400115 	stw	r17,4(sp)
   20738:	2c7fffc4 	addi	r17,r5,-1
   2073c:	8c401a24 	muli	r17,r17,104
   20740:	dc800215 	stw	r18,8(sp)
   20744:	2825883a 	mov	r18,r5
   20748:	89401d04 	addi	r5,r17,116
   2074c:	dc000015 	stw	r16,0(sp)
   20750:	dfc00315 	stw	ra,12(sp)
   20754:	00212900 	call	21290 <_malloc_r>
   20758:	1021883a 	mov	r16,r2
   2075c:	10000726 	beq	r2,zero,2077c <__sfmoreglue+0x4c>
   20760:	11000304 	addi	r4,r2,12
   20764:	10000015 	stw	zero,0(r2)
   20768:	14800115 	stw	r18,4(r2)
   2076c:	11000215 	stw	r4,8(r2)
   20770:	89801a04 	addi	r6,r17,104
   20774:	000b883a 	mov	r5,zero
   20778:	0021cc80 	call	21cc8 <memset>
   2077c:	8005883a 	mov	r2,r16
   20780:	dfc00317 	ldw	ra,12(sp)
   20784:	dc800217 	ldw	r18,8(sp)
   20788:	dc400117 	ldw	r17,4(sp)
   2078c:	dc000017 	ldw	r16,0(sp)
   20790:	dec00404 	addi	sp,sp,16
   20794:	f800283a 	ret

00020798 <__sfp>:
   20798:	defffb04 	addi	sp,sp,-20
   2079c:	dc000015 	stw	r16,0(sp)
   207a0:	040000f4 	movhi	r16,3
   207a4:	840af404 	addi	r16,r16,11216
   207a8:	dcc00315 	stw	r19,12(sp)
   207ac:	2027883a 	mov	r19,r4
   207b0:	81000017 	ldw	r4,0(r16)
   207b4:	dfc00415 	stw	ra,16(sp)
   207b8:	dc800215 	stw	r18,8(sp)
   207bc:	20800e17 	ldw	r2,56(r4)
   207c0:	dc400115 	stw	r17,4(sp)
   207c4:	1000021e 	bne	r2,zero,207d0 <__sfp+0x38>
   207c8:	002058c0 	call	2058c <__sinit.part.1>
   207cc:	81000017 	ldw	r4,0(r16)
   207d0:	2480b804 	addi	r18,r4,736
   207d4:	047fffc4 	movi	r17,-1
   207d8:	91000117 	ldw	r4,4(r18)
   207dc:	94000217 	ldw	r16,8(r18)
   207e0:	213fffc4 	addi	r4,r4,-1
   207e4:	20000a16 	blt	r4,zero,20810 <__sfp+0x78>
   207e8:	8080030f 	ldh	r2,12(r16)
   207ec:	10000c26 	beq	r2,zero,20820 <__sfp+0x88>
   207f0:	80c01d04 	addi	r3,r16,116
   207f4:	00000206 	br	20800 <__sfp+0x68>
   207f8:	18bfe60f 	ldh	r2,-104(r3)
   207fc:	10000826 	beq	r2,zero,20820 <__sfp+0x88>
   20800:	213fffc4 	addi	r4,r4,-1
   20804:	1c3ffd04 	addi	r16,r3,-12
   20808:	18c01a04 	addi	r3,r3,104
   2080c:	247ffa1e 	bne	r4,r17,207f8 <__alt_data_end+0xfffe07f8>
   20810:	90800017 	ldw	r2,0(r18)
   20814:	10001d26 	beq	r2,zero,2088c <__sfp+0xf4>
   20818:	1025883a 	mov	r18,r2
   2081c:	003fee06 	br	207d8 <__alt_data_end+0xfffe07d8>
   20820:	00bfffc4 	movi	r2,-1
   20824:	8080038d 	sth	r2,14(r16)
   20828:	00800044 	movi	r2,1
   2082c:	8080030d 	sth	r2,12(r16)
   20830:	80001915 	stw	zero,100(r16)
   20834:	80000015 	stw	zero,0(r16)
   20838:	80000215 	stw	zero,8(r16)
   2083c:	80000115 	stw	zero,4(r16)
   20840:	80000415 	stw	zero,16(r16)
   20844:	80000515 	stw	zero,20(r16)
   20848:	80000615 	stw	zero,24(r16)
   2084c:	01800204 	movi	r6,8
   20850:	000b883a 	mov	r5,zero
   20854:	81001704 	addi	r4,r16,92
   20858:	0021cc80 	call	21cc8 <memset>
   2085c:	8005883a 	mov	r2,r16
   20860:	80000c15 	stw	zero,48(r16)
   20864:	80000d15 	stw	zero,52(r16)
   20868:	80001115 	stw	zero,68(r16)
   2086c:	80001215 	stw	zero,72(r16)
   20870:	dfc00417 	ldw	ra,16(sp)
   20874:	dcc00317 	ldw	r19,12(sp)
   20878:	dc800217 	ldw	r18,8(sp)
   2087c:	dc400117 	ldw	r17,4(sp)
   20880:	dc000017 	ldw	r16,0(sp)
   20884:	dec00504 	addi	sp,sp,20
   20888:	f800283a 	ret
   2088c:	01400104 	movi	r5,4
   20890:	9809883a 	mov	r4,r19
   20894:	00207300 	call	20730 <__sfmoreglue>
   20898:	90800015 	stw	r2,0(r18)
   2089c:	103fde1e 	bne	r2,zero,20818 <__alt_data_end+0xfffe0818>
   208a0:	00800304 	movi	r2,12
   208a4:	98800015 	stw	r2,0(r19)
   208a8:	0005883a 	mov	r2,zero
   208ac:	003ff006 	br	20870 <__alt_data_end+0xfffe0870>

000208b0 <_cleanup>:
   208b0:	008000f4 	movhi	r2,3
   208b4:	108af404 	addi	r2,r2,11216
   208b8:	11000017 	ldw	r4,0(r2)
   208bc:	014000b4 	movhi	r5,2
   208c0:	2958d704 	addi	r5,r5,25436
   208c4:	00210101 	jmpi	21010 <_fwalk_reent>

000208c8 <__sinit>:
   208c8:	20800e17 	ldw	r2,56(r4)
   208cc:	10000126 	beq	r2,zero,208d4 <__sinit+0xc>
   208d0:	f800283a 	ret
   208d4:	002058c1 	jmpi	2058c <__sinit.part.1>

000208d8 <__sfp_lock_acquire>:
   208d8:	f800283a 	ret

000208dc <__sfp_lock_release>:
   208dc:	f800283a 	ret

000208e0 <__sinit_lock_acquire>:
   208e0:	f800283a 	ret

000208e4 <__sinit_lock_release>:
   208e4:	f800283a 	ret

000208e8 <__fp_lock_all>:
   208e8:	008000f4 	movhi	r2,3
   208ec:	108af504 	addi	r2,r2,11220
   208f0:	11000017 	ldw	r4,0(r2)
   208f4:	014000b4 	movhi	r5,2
   208f8:	2941ca04 	addi	r5,r5,1832
   208fc:	0020f4c1 	jmpi	20f4c <_fwalk>

00020900 <__fp_unlock_all>:
   20900:	008000f4 	movhi	r2,3
   20904:	108af504 	addi	r2,r2,11220
   20908:	11000017 	ldw	r4,0(r2)
   2090c:	014000b4 	movhi	r5,2
   20910:	29415e04 	addi	r5,r5,1400
   20914:	0020f4c1 	jmpi	20f4c <_fwalk>

00020918 <_fopen_r>:
   20918:	defffa04 	addi	sp,sp,-24
   2091c:	3005883a 	mov	r2,r6
   20920:	dcc00415 	stw	r19,16(sp)
   20924:	d80d883a 	mov	r6,sp
   20928:	2827883a 	mov	r19,r5
   2092c:	100b883a 	mov	r5,r2
   20930:	dc800315 	stw	r18,12(sp)
   20934:	dfc00515 	stw	ra,20(sp)
   20938:	dc400215 	stw	r17,8(sp)
   2093c:	dc000115 	stw	r16,4(sp)
   20940:	2025883a 	mov	r18,r4
   20944:	00267080 	call	26708 <__sflags>
   20948:	10002726 	beq	r2,zero,209e8 <_fopen_r+0xd0>
   2094c:	9009883a 	mov	r4,r18
   20950:	1023883a 	mov	r17,r2
   20954:	00207980 	call	20798 <__sfp>
   20958:	1021883a 	mov	r16,r2
   2095c:	10002226 	beq	r2,zero,209e8 <_fopen_r+0xd0>
   20960:	d9800017 	ldw	r6,0(sp)
   20964:	01c06d84 	movi	r7,438
   20968:	980b883a 	mov	r5,r19
   2096c:	9009883a 	mov	r4,r18
   20970:	0021df00 	call	21df0 <_open_r>
   20974:	10001916 	blt	r2,zero,209dc <_fopen_r+0xc4>
   20978:	8080038d 	sth	r2,14(r16)
   2097c:	008000b4 	movhi	r2,2
   20980:	10887504 	addi	r2,r2,8660
   20984:	80800815 	stw	r2,32(r16)
   20988:	008000b4 	movhi	r2,2
   2098c:	10888c04 	addi	r2,r2,8752
   20990:	80800915 	stw	r2,36(r16)
   20994:	008000b4 	movhi	r2,2
   20998:	1088ab04 	addi	r2,r2,8876
   2099c:	80800a15 	stw	r2,40(r16)
   209a0:	008000b4 	movhi	r2,2
   209a4:	1088c204 	addi	r2,r2,8968
   209a8:	8440030d 	sth	r17,12(r16)
   209ac:	84000715 	stw	r16,28(r16)
   209b0:	80800b15 	stw	r2,44(r16)
   209b4:	8c40400c 	andi	r17,r17,256
   209b8:	88000d1e 	bne	r17,zero,209f0 <_fopen_r+0xd8>
   209bc:	8005883a 	mov	r2,r16
   209c0:	dfc00517 	ldw	ra,20(sp)
   209c4:	dcc00417 	ldw	r19,16(sp)
   209c8:	dc800317 	ldw	r18,12(sp)
   209cc:	dc400217 	ldw	r17,8(sp)
   209d0:	dc000117 	ldw	r16,4(sp)
   209d4:	dec00604 	addi	sp,sp,24
   209d8:	f800283a 	ret
   209dc:	00208d80 	call	208d8 <__sfp_lock_acquire>
   209e0:	8000030d 	sth	zero,12(r16)
   209e4:	00208dc0 	call	208dc <__sfp_lock_release>
   209e8:	0005883a 	mov	r2,zero
   209ec:	003ff406 	br	209c0 <__alt_data_end+0xfffe09c0>
   209f0:	01c00084 	movi	r7,2
   209f4:	000d883a 	mov	r6,zero
   209f8:	800b883a 	mov	r5,r16
   209fc:	9009883a 	mov	r4,r18
   20a00:	0020a700 	call	20a70 <_fseek_r>
   20a04:	8005883a 	mov	r2,r16
   20a08:	003fed06 	br	209c0 <__alt_data_end+0xfffe09c0>

00020a0c <fopen>:
   20a0c:	008000f4 	movhi	r2,3
   20a10:	108af504 	addi	r2,r2,11220
   20a14:	280d883a 	mov	r6,r5
   20a18:	200b883a 	mov	r5,r4
   20a1c:	11000017 	ldw	r4,0(r2)
   20a20:	00209181 	jmpi	20918 <_fopen_r>

00020a24 <_fprintf_r>:
   20a24:	defffe04 	addi	sp,sp,-8
   20a28:	2809883a 	mov	r4,r5
   20a2c:	300b883a 	mov	r5,r6
   20a30:	dfc00015 	stw	ra,0(sp)
   20a34:	d9c00115 	stw	r7,4(sp)
   20a38:	d9800104 	addi	r6,sp,4
   20a3c:	00247f40 	call	247f4 <__vfprintf_internal>
   20a40:	dfc00017 	ldw	ra,0(sp)
   20a44:	dec00204 	addi	sp,sp,8
   20a48:	f800283a 	ret

00020a4c <fprintf>:
   20a4c:	defffd04 	addi	sp,sp,-12
   20a50:	dfc00015 	stw	ra,0(sp)
   20a54:	d9800115 	stw	r6,4(sp)
   20a58:	d9c00215 	stw	r7,8(sp)
   20a5c:	d9800104 	addi	r6,sp,4
   20a60:	00247f40 	call	247f4 <__vfprintf_internal>
   20a64:	dfc00017 	ldw	ra,0(sp)
   20a68:	dec00304 	addi	sp,sp,12
   20a6c:	f800283a 	ret

00020a70 <_fseek_r>:
   20a70:	0020a901 	jmpi	20a90 <_fseeko_r>

00020a74 <fseek>:
   20a74:	008000f4 	movhi	r2,3
   20a78:	108af504 	addi	r2,r2,11220
   20a7c:	300f883a 	mov	r7,r6
   20a80:	280d883a 	mov	r6,r5
   20a84:	200b883a 	mov	r5,r4
   20a88:	11000017 	ldw	r4,0(r2)
   20a8c:	0020a901 	jmpi	20a90 <_fseeko_r>

00020a90 <_fseeko_r>:
   20a90:	deffe804 	addi	sp,sp,-96
   20a94:	dd401415 	stw	r21,80(sp)
   20a98:	dc801115 	stw	r18,68(sp)
   20a9c:	dc401015 	stw	r17,64(sp)
   20aa0:	dc000f15 	stw	r16,60(sp)
   20aa4:	dfc01715 	stw	ra,92(sp)
   20aa8:	ddc01615 	stw	r23,88(sp)
   20aac:	dd801515 	stw	r22,84(sp)
   20ab0:	dd001315 	stw	r20,76(sp)
   20ab4:	dcc01215 	stw	r19,72(sp)
   20ab8:	2023883a 	mov	r17,r4
   20abc:	2821883a 	mov	r16,r5
   20ac0:	302b883a 	mov	r21,r6
   20ac4:	3825883a 	mov	r18,r7
   20ac8:	20000226 	beq	r4,zero,20ad4 <_fseeko_r+0x44>
   20acc:	20800e17 	ldw	r2,56(r4)
   20ad0:	10005a26 	beq	r2,zero,20c3c <_fseeko_r+0x1ac>
   20ad4:	8080030b 	ldhu	r2,12(r16)
   20ad8:	00c04204 	movi	r3,264
   20adc:	1080420c 	andi	r2,r2,264
   20ae0:	10c05b26 	beq	r2,r3,20c50 <_fseeko_r+0x1c0>
   20ae4:	85000a17 	ldw	r20,40(r16)
   20ae8:	a000f626 	beq	r20,zero,20ec4 <_fseeko_r+0x434>
   20aec:	00800044 	movi	r2,1
   20af0:	90803e26 	beq	r18,r2,20bec <_fseeko_r+0x15c>
   20af4:	00800084 	movi	r2,2
   20af8:	90801026 	beq	r18,r2,20b3c <_fseeko_r+0xac>
   20afc:	90000f26 	beq	r18,zero,20b3c <_fseeko_r+0xac>
   20b00:	00800584 	movi	r2,22
   20b04:	88800015 	stw	r2,0(r17)
   20b08:	04ffffc4 	movi	r19,-1
   20b0c:	9805883a 	mov	r2,r19
   20b10:	dfc01717 	ldw	ra,92(sp)
   20b14:	ddc01617 	ldw	r23,88(sp)
   20b18:	dd801517 	ldw	r22,84(sp)
   20b1c:	dd401417 	ldw	r21,80(sp)
   20b20:	dd001317 	ldw	r20,76(sp)
   20b24:	dcc01217 	ldw	r19,72(sp)
   20b28:	dc801117 	ldw	r18,68(sp)
   20b2c:	dc401017 	ldw	r17,64(sp)
   20b30:	dc000f17 	ldw	r16,60(sp)
   20b34:	dec01804 	addi	sp,sp,96
   20b38:	f800283a 	ret
   20b3c:	80800417 	ldw	r2,16(r16)
   20b40:	002f883a 	mov	r23,zero
   20b44:	0027883a 	mov	r19,zero
   20b48:	1000cb26 	beq	r2,zero,20e78 <_fseeko_r+0x3e8>
   20b4c:	8080030b 	ldhu	r2,12(r16)
   20b50:	10c2068c 	andi	r3,r2,2074
   20b54:	1800071e 	bne	r3,zero,20b74 <_fseeko_r+0xe4>
   20b58:	10c1000c 	andi	r3,r2,1024
   20b5c:	1800451e 	bne	r3,zero,20c74 <_fseeko_r+0x1e4>
   20b60:	00c000b4 	movhi	r3,2
   20b64:	18c8ab04 	addi	r3,r3,8876
   20b68:	a0c0b726 	beq	r20,r3,20e48 <_fseeko_r+0x3b8>
   20b6c:	10820014 	ori	r2,r2,2048
   20b70:	8080030d 	sth	r2,12(r16)
   20b74:	800b883a 	mov	r5,r16
   20b78:	8809883a 	mov	r4,r17
   20b7c:	002667c0 	call	2667c <_fflush_r>
   20b80:	1027883a 	mov	r19,r2
   20b84:	103fe01e 	bne	r2,zero,20b08 <__alt_data_end+0xfffe0b08>
   20b88:	81400717 	ldw	r5,28(r16)
   20b8c:	900f883a 	mov	r7,r18
   20b90:	a80d883a 	mov	r6,r21
   20b94:	8809883a 	mov	r4,r17
   20b98:	a03ee83a 	callr	r20
   20b9c:	00ffffc4 	movi	r3,-1
   20ba0:	10ffd926 	beq	r2,r3,20b08 <__alt_data_end+0xfffe0b08>
   20ba4:	81400c17 	ldw	r5,48(r16)
   20ba8:	28000526 	beq	r5,zero,20bc0 <_fseeko_r+0x130>
   20bac:	80801004 	addi	r2,r16,64
   20bb0:	28800226 	beq	r5,r2,20bbc <_fseeko_r+0x12c>
   20bb4:	8809883a 	mov	r4,r17
   20bb8:	00268d80 	call	268d8 <_free_r>
   20bbc:	80000c15 	stw	zero,48(r16)
   20bc0:	8080030b 	ldhu	r2,12(r16)
   20bc4:	80c00417 	ldw	r3,16(r16)
   20bc8:	80000115 	stw	zero,4(r16)
   20bcc:	10bdf7cc 	andi	r2,r2,63455
   20bd0:	80c00015 	stw	r3,0(r16)
   20bd4:	8080030d 	sth	r2,12(r16)
   20bd8:	01800204 	movi	r6,8
   20bdc:	000b883a 	mov	r5,zero
   20be0:	81001704 	addi	r4,r16,92
   20be4:	0021cc80 	call	21cc8 <memset>
   20be8:	003fc806 	br	20b0c <__alt_data_end+0xfffe0b0c>
   20bec:	800b883a 	mov	r5,r16
   20bf0:	8809883a 	mov	r4,r17
   20bf4:	002667c0 	call	2667c <_fflush_r>
   20bf8:	8080030b 	ldhu	r2,12(r16)
   20bfc:	10c4000c 	andi	r3,r2,4096
   20c00:	18008726 	beq	r3,zero,20e20 <_fseeko_r+0x390>
   20c04:	84c01417 	ldw	r19,80(r16)
   20c08:	10c0010c 	andi	r3,r2,4
   20c0c:	1800431e 	bne	r3,zero,20d1c <_fseeko_r+0x28c>
   20c10:	1080020c 	andi	r2,r2,8
   20c14:	10008026 	beq	r2,zero,20e18 <_fseeko_r+0x388>
   20c18:	80c00017 	ldw	r3,0(r16)
   20c1c:	80800417 	ldw	r2,16(r16)
   20c20:	18000226 	beq	r3,zero,20c2c <_fseeko_r+0x19c>
   20c24:	1887c83a 	sub	r3,r3,r2
   20c28:	98e7883a 	add	r19,r19,r3
   20c2c:	aceb883a 	add	r21,r21,r19
   20c30:	05c00044 	movi	r23,1
   20c34:	0025883a 	mov	r18,zero
   20c38:	003fc306 	br	20b48 <__alt_data_end+0xfffe0b48>
   20c3c:	00208c80 	call	208c8 <__sinit>
   20c40:	8080030b 	ldhu	r2,12(r16)
   20c44:	00c04204 	movi	r3,264
   20c48:	1080420c 	andi	r2,r2,264
   20c4c:	10ffa51e 	bne	r2,r3,20ae4 <__alt_data_end+0xfffe0ae4>
   20c50:	800b883a 	mov	r5,r16
   20c54:	8809883a 	mov	r4,r17
   20c58:	002667c0 	call	2667c <_fflush_r>
   20c5c:	003fa106 	br	20ae4 <__alt_data_end+0xfffe0ae4>
   20c60:	8080030b 	ldhu	r2,12(r16)
   20c64:	00c10004 	movi	r3,1024
   20c68:	80c01315 	stw	r3,76(r16)
   20c6c:	10c4b03a 	or	r2,r2,r3
   20c70:	8080030d 	sth	r2,12(r16)
   20c74:	9000311e 	bne	r18,zero,20d3c <_fseeko_r+0x2ac>
   20c78:	a82d883a 	mov	r22,r21
   20c7c:	b800371e 	bne	r23,zero,20d5c <_fseeko_r+0x2cc>
   20c80:	8080030b 	ldhu	r2,12(r16)
   20c84:	1084000c 	andi	r2,r2,4096
   20c88:	10007f26 	beq	r2,zero,20e88 <_fseeko_r+0x3f8>
   20c8c:	80801417 	ldw	r2,80(r16)
   20c90:	81800117 	ldw	r6,4(r16)
   20c94:	81400c17 	ldw	r5,48(r16)
   20c98:	11a7c83a 	sub	r19,r2,r6
   20c9c:	28008226 	beq	r5,zero,20ea8 <_fseeko_r+0x418>
   20ca0:	81c00f17 	ldw	r7,60(r16)
   20ca4:	99e7c83a 	sub	r19,r19,r7
   20ca8:	81000e17 	ldw	r4,56(r16)
   20cac:	80800417 	ldw	r2,16(r16)
   20cb0:	99a7883a 	add	r19,r19,r6
   20cb4:	2087c83a 	sub	r3,r4,r2
   20cb8:	98e7c83a 	sub	r19,r19,r3
   20cbc:	38c7883a 	add	r3,r7,r3
   20cc0:	b4c02b16 	blt	r22,r19,20d70 <_fseeko_r+0x2e0>
   20cc4:	98c9883a 	add	r4,r19,r3
   20cc8:	b100292e 	bgeu	r22,r4,20d70 <_fseeko_r+0x2e0>
   20ccc:	b4e7c83a 	sub	r19,r22,r19
   20cd0:	14c5883a 	add	r2,r2,r19
   20cd4:	1ce7c83a 	sub	r19,r3,r19
   20cd8:	80800015 	stw	r2,0(r16)
   20cdc:	84c00115 	stw	r19,4(r16)
   20ce0:	28000526 	beq	r5,zero,20cf8 <_fseeko_r+0x268>
   20ce4:	80801004 	addi	r2,r16,64
   20ce8:	28800226 	beq	r5,r2,20cf4 <_fseeko_r+0x264>
   20cec:	8809883a 	mov	r4,r17
   20cf0:	00268d80 	call	268d8 <_free_r>
   20cf4:	80000c15 	stw	zero,48(r16)
   20cf8:	8080030b 	ldhu	r2,12(r16)
   20cfc:	01800204 	movi	r6,8
   20d00:	000b883a 	mov	r5,zero
   20d04:	10bff7cc 	andi	r2,r2,65503
   20d08:	8080030d 	sth	r2,12(r16)
   20d0c:	81001704 	addi	r4,r16,92
   20d10:	0021cc80 	call	21cc8 <memset>
   20d14:	0027883a 	mov	r19,zero
   20d18:	003f7c06 	br	20b0c <__alt_data_end+0xfffe0b0c>
   20d1c:	80c00117 	ldw	r3,4(r16)
   20d20:	80800c17 	ldw	r2,48(r16)
   20d24:	98e7c83a 	sub	r19,r19,r3
   20d28:	10003b26 	beq	r2,zero,20e18 <_fseeko_r+0x388>
   20d2c:	80c00f17 	ldw	r3,60(r16)
   20d30:	80800417 	ldw	r2,16(r16)
   20d34:	98e7c83a 	sub	r19,r19,r3
   20d38:	003fbc06 	br	20c2c <__alt_data_end+0xfffe0c2c>
   20d3c:	8140038f 	ldh	r5,14(r16)
   20d40:	d80d883a 	mov	r6,sp
   20d44:	8809883a 	mov	r4,r17
   20d48:	0020ef00 	call	20ef0 <_fstat_r>
   20d4c:	103f891e 	bne	r2,zero,20b74 <__alt_data_end+0xfffe0b74>
   20d50:	dd800417 	ldw	r22,16(sp)
   20d54:	adad883a 	add	r22,r21,r22
   20d58:	b83fc926 	beq	r23,zero,20c80 <__alt_data_end+0xfffe0c80>
   20d5c:	81400c17 	ldw	r5,48(r16)
   20d60:	81800117 	ldw	r6,4(r16)
   20d64:	28005026 	beq	r5,zero,20ea8 <_fseeko_r+0x418>
   20d68:	81c00f17 	ldw	r7,60(r16)
   20d6c:	003fce06 	br	20ca8 <__alt_data_end+0xfffe0ca8>
   20d70:	84c01317 	ldw	r19,76(r16)
   20d74:	81400717 	ldw	r5,28(r16)
   20d78:	000f883a 	mov	r7,zero
   20d7c:	04e7c83a 	sub	r19,zero,r19
   20d80:	9da6703a 	and	r19,r19,r22
   20d84:	980d883a 	mov	r6,r19
   20d88:	8809883a 	mov	r4,r17
   20d8c:	a03ee83a 	callr	r20
   20d90:	00ffffc4 	movi	r3,-1
   20d94:	10ff7726 	beq	r2,r3,20b74 <__alt_data_end+0xfffe0b74>
   20d98:	80800417 	ldw	r2,16(r16)
   20d9c:	81400c17 	ldw	r5,48(r16)
   20da0:	80000115 	stw	zero,4(r16)
   20da4:	80800015 	stw	r2,0(r16)
   20da8:	28000526 	beq	r5,zero,20dc0 <_fseeko_r+0x330>
   20dac:	80801004 	addi	r2,r16,64
   20db0:	28800226 	beq	r5,r2,20dbc <_fseeko_r+0x32c>
   20db4:	8809883a 	mov	r4,r17
   20db8:	00268d80 	call	268d8 <_free_r>
   20dbc:	80000c15 	stw	zero,48(r16)
   20dc0:	8080030b 	ldhu	r2,12(r16)
   20dc4:	b4e7c83a 	sub	r19,r22,r19
   20dc8:	10bff7cc 	andi	r2,r2,65503
   20dcc:	8080030d 	sth	r2,12(r16)
   20dd0:	98000b26 	beq	r19,zero,20e00 <_fseeko_r+0x370>
   20dd4:	800b883a 	mov	r5,r16
   20dd8:	8809883a 	mov	r4,r17
   20ddc:	0021fac0 	call	21fac <__srefill_r>
   20de0:	103f641e 	bne	r2,zero,20b74 <__alt_data_end+0xfffe0b74>
   20de4:	80800117 	ldw	r2,4(r16)
   20de8:	14ff6236 	bltu	r2,r19,20b74 <__alt_data_end+0xfffe0b74>
   20dec:	80c00017 	ldw	r3,0(r16)
   20df0:	14c5c83a 	sub	r2,r2,r19
   20df4:	80800115 	stw	r2,4(r16)
   20df8:	1ce7883a 	add	r19,r3,r19
   20dfc:	84c00015 	stw	r19,0(r16)
   20e00:	01800204 	movi	r6,8
   20e04:	000b883a 	mov	r5,zero
   20e08:	81001704 	addi	r4,r16,92
   20e0c:	0021cc80 	call	21cc8 <memset>
   20e10:	0027883a 	mov	r19,zero
   20e14:	003f3d06 	br	20b0c <__alt_data_end+0xfffe0b0c>
   20e18:	80800417 	ldw	r2,16(r16)
   20e1c:	003f8306 	br	20c2c <__alt_data_end+0xfffe0c2c>
   20e20:	81400717 	ldw	r5,28(r16)
   20e24:	900f883a 	mov	r7,r18
   20e28:	000d883a 	mov	r6,zero
   20e2c:	8809883a 	mov	r4,r17
   20e30:	a03ee83a 	callr	r20
   20e34:	1027883a 	mov	r19,r2
   20e38:	00bfffc4 	movi	r2,-1
   20e3c:	98bf3226 	beq	r19,r2,20b08 <__alt_data_end+0xfffe0b08>
   20e40:	8080030b 	ldhu	r2,12(r16)
   20e44:	003f7006 	br	20c08 <__alt_data_end+0xfffe0c08>
   20e48:	8140038f 	ldh	r5,14(r16)
   20e4c:	283f4716 	blt	r5,zero,20b6c <__alt_data_end+0xfffe0b6c>
   20e50:	d80d883a 	mov	r6,sp
   20e54:	8809883a 	mov	r4,r17
   20e58:	0020ef00 	call	20ef0 <_fstat_r>
   20e5c:	1000041e 	bne	r2,zero,20e70 <_fseeko_r+0x3e0>
   20e60:	d8800117 	ldw	r2,4(sp)
   20e64:	00e00014 	movui	r3,32768
   20e68:	10bc000c 	andi	r2,r2,61440
   20e6c:	10ff7c26 	beq	r2,r3,20c60 <__alt_data_end+0xfffe0c60>
   20e70:	8080030b 	ldhu	r2,12(r16)
   20e74:	003f3d06 	br	20b6c <__alt_data_end+0xfffe0b6c>
   20e78:	800b883a 	mov	r5,r16
   20e7c:	8809883a 	mov	r4,r17
   20e80:	00210d40 	call	210d4 <__smakebuf_r>
   20e84:	003f3106 	br	20b4c <__alt_data_end+0xfffe0b4c>
   20e88:	81400717 	ldw	r5,28(r16)
   20e8c:	01c00044 	movi	r7,1
   20e90:	000d883a 	mov	r6,zero
   20e94:	8809883a 	mov	r4,r17
   20e98:	a03ee83a 	callr	r20
   20e9c:	00ffffc4 	movi	r3,-1
   20ea0:	10ff7b1e 	bne	r2,r3,20c90 <__alt_data_end+0xfffe0c90>
   20ea4:	003f3306 	br	20b74 <__alt_data_end+0xfffe0b74>
   20ea8:	80c00017 	ldw	r3,0(r16)
   20eac:	80800417 	ldw	r2,16(r16)
   20eb0:	000b883a 	mov	r5,zero
   20eb4:	1887c83a 	sub	r3,r3,r2
   20eb8:	98e7c83a 	sub	r19,r19,r3
   20ebc:	30c7883a 	add	r3,r6,r3
   20ec0:	003f7f06 	br	20cc0 <__alt_data_end+0xfffe0cc0>
   20ec4:	00800744 	movi	r2,29
   20ec8:	88800015 	stw	r2,0(r17)
   20ecc:	04ffffc4 	movi	r19,-1
   20ed0:	003f0e06 	br	20b0c <__alt_data_end+0xfffe0b0c>

00020ed4 <fseeko>:
   20ed4:	008000f4 	movhi	r2,3
   20ed8:	108af504 	addi	r2,r2,11220
   20edc:	300f883a 	mov	r7,r6
   20ee0:	280d883a 	mov	r6,r5
   20ee4:	200b883a 	mov	r5,r4
   20ee8:	11000017 	ldw	r4,0(r2)
   20eec:	0020a901 	jmpi	20a90 <_fseeko_r>

00020ef0 <_fstat_r>:
   20ef0:	defffd04 	addi	sp,sp,-12
   20ef4:	2805883a 	mov	r2,r5
   20ef8:	dc000015 	stw	r16,0(sp)
   20efc:	040000f4 	movhi	r16,3
   20f00:	dc400115 	stw	r17,4(sp)
   20f04:	8411f104 	addi	r16,r16,18372
   20f08:	2023883a 	mov	r17,r4
   20f0c:	300b883a 	mov	r5,r6
   20f10:	1009883a 	mov	r4,r2
   20f14:	dfc00215 	stw	ra,8(sp)
   20f18:	80000015 	stw	zero,0(r16)
   20f1c:	002db340 	call	2db34 <fstat>
   20f20:	00ffffc4 	movi	r3,-1
   20f24:	10c00526 	beq	r2,r3,20f3c <_fstat_r+0x4c>
   20f28:	dfc00217 	ldw	ra,8(sp)
   20f2c:	dc400117 	ldw	r17,4(sp)
   20f30:	dc000017 	ldw	r16,0(sp)
   20f34:	dec00304 	addi	sp,sp,12
   20f38:	f800283a 	ret
   20f3c:	80c00017 	ldw	r3,0(r16)
   20f40:	183ff926 	beq	r3,zero,20f28 <__alt_data_end+0xfffe0f28>
   20f44:	88c00015 	stw	r3,0(r17)
   20f48:	003ff706 	br	20f28 <__alt_data_end+0xfffe0f28>

00020f4c <_fwalk>:
   20f4c:	defff704 	addi	sp,sp,-36
   20f50:	dd000415 	stw	r20,16(sp)
   20f54:	dfc00815 	stw	ra,32(sp)
   20f58:	ddc00715 	stw	r23,28(sp)
   20f5c:	dd800615 	stw	r22,24(sp)
   20f60:	dd400515 	stw	r21,20(sp)
   20f64:	dcc00315 	stw	r19,12(sp)
   20f68:	dc800215 	stw	r18,8(sp)
   20f6c:	dc400115 	stw	r17,4(sp)
   20f70:	dc000015 	stw	r16,0(sp)
   20f74:	2500b804 	addi	r20,r4,736
   20f78:	a0002326 	beq	r20,zero,21008 <_fwalk+0xbc>
   20f7c:	282b883a 	mov	r21,r5
   20f80:	002f883a 	mov	r23,zero
   20f84:	05800044 	movi	r22,1
   20f88:	04ffffc4 	movi	r19,-1
   20f8c:	a4400117 	ldw	r17,4(r20)
   20f90:	a4800217 	ldw	r18,8(r20)
   20f94:	8c7fffc4 	addi	r17,r17,-1
   20f98:	88000d16 	blt	r17,zero,20fd0 <_fwalk+0x84>
   20f9c:	94000304 	addi	r16,r18,12
   20fa0:	94800384 	addi	r18,r18,14
   20fa4:	8080000b 	ldhu	r2,0(r16)
   20fa8:	8c7fffc4 	addi	r17,r17,-1
   20fac:	813ffd04 	addi	r4,r16,-12
   20fb0:	b080042e 	bgeu	r22,r2,20fc4 <_fwalk+0x78>
   20fb4:	9080000f 	ldh	r2,0(r18)
   20fb8:	14c00226 	beq	r2,r19,20fc4 <_fwalk+0x78>
   20fbc:	a83ee83a 	callr	r21
   20fc0:	b8aeb03a 	or	r23,r23,r2
   20fc4:	84001a04 	addi	r16,r16,104
   20fc8:	94801a04 	addi	r18,r18,104
   20fcc:	8cfff51e 	bne	r17,r19,20fa4 <__alt_data_end+0xfffe0fa4>
   20fd0:	a5000017 	ldw	r20,0(r20)
   20fd4:	a03fed1e 	bne	r20,zero,20f8c <__alt_data_end+0xfffe0f8c>
   20fd8:	b805883a 	mov	r2,r23
   20fdc:	dfc00817 	ldw	ra,32(sp)
   20fe0:	ddc00717 	ldw	r23,28(sp)
   20fe4:	dd800617 	ldw	r22,24(sp)
   20fe8:	dd400517 	ldw	r21,20(sp)
   20fec:	dd000417 	ldw	r20,16(sp)
   20ff0:	dcc00317 	ldw	r19,12(sp)
   20ff4:	dc800217 	ldw	r18,8(sp)
   20ff8:	dc400117 	ldw	r17,4(sp)
   20ffc:	dc000017 	ldw	r16,0(sp)
   21000:	dec00904 	addi	sp,sp,36
   21004:	f800283a 	ret
   21008:	002f883a 	mov	r23,zero
   2100c:	003ff206 	br	20fd8 <__alt_data_end+0xfffe0fd8>

00021010 <_fwalk_reent>:
   21010:	defff704 	addi	sp,sp,-36
   21014:	dd000415 	stw	r20,16(sp)
   21018:	dfc00815 	stw	ra,32(sp)
   2101c:	ddc00715 	stw	r23,28(sp)
   21020:	dd800615 	stw	r22,24(sp)
   21024:	dd400515 	stw	r21,20(sp)
   21028:	dcc00315 	stw	r19,12(sp)
   2102c:	dc800215 	stw	r18,8(sp)
   21030:	dc400115 	stw	r17,4(sp)
   21034:	dc000015 	stw	r16,0(sp)
   21038:	2500b804 	addi	r20,r4,736
   2103c:	a0002326 	beq	r20,zero,210cc <_fwalk_reent+0xbc>
   21040:	282b883a 	mov	r21,r5
   21044:	2027883a 	mov	r19,r4
   21048:	002f883a 	mov	r23,zero
   2104c:	05800044 	movi	r22,1
   21050:	04bfffc4 	movi	r18,-1
   21054:	a4400117 	ldw	r17,4(r20)
   21058:	a4000217 	ldw	r16,8(r20)
   2105c:	8c7fffc4 	addi	r17,r17,-1
   21060:	88000c16 	blt	r17,zero,21094 <_fwalk_reent+0x84>
   21064:	84000304 	addi	r16,r16,12
   21068:	8080000b 	ldhu	r2,0(r16)
   2106c:	8c7fffc4 	addi	r17,r17,-1
   21070:	817ffd04 	addi	r5,r16,-12
   21074:	b080052e 	bgeu	r22,r2,2108c <_fwalk_reent+0x7c>
   21078:	8080008f 	ldh	r2,2(r16)
   2107c:	9809883a 	mov	r4,r19
   21080:	14800226 	beq	r2,r18,2108c <_fwalk_reent+0x7c>
   21084:	a83ee83a 	callr	r21
   21088:	b8aeb03a 	or	r23,r23,r2
   2108c:	84001a04 	addi	r16,r16,104
   21090:	8cbff51e 	bne	r17,r18,21068 <__alt_data_end+0xfffe1068>
   21094:	a5000017 	ldw	r20,0(r20)
   21098:	a03fee1e 	bne	r20,zero,21054 <__alt_data_end+0xfffe1054>
   2109c:	b805883a 	mov	r2,r23
   210a0:	dfc00817 	ldw	ra,32(sp)
   210a4:	ddc00717 	ldw	r23,28(sp)
   210a8:	dd800617 	ldw	r22,24(sp)
   210ac:	dd400517 	ldw	r21,20(sp)
   210b0:	dd000417 	ldw	r20,16(sp)
   210b4:	dcc00317 	ldw	r19,12(sp)
   210b8:	dc800217 	ldw	r18,8(sp)
   210bc:	dc400117 	ldw	r17,4(sp)
   210c0:	dc000017 	ldw	r16,0(sp)
   210c4:	dec00904 	addi	sp,sp,36
   210c8:	f800283a 	ret
   210cc:	002f883a 	mov	r23,zero
   210d0:	003ff206 	br	2109c <__alt_data_end+0xfffe109c>

000210d4 <__smakebuf_r>:
   210d4:	2880030b 	ldhu	r2,12(r5)
   210d8:	10c0008c 	andi	r3,r2,2
   210dc:	1800411e 	bne	r3,zero,211e4 <__smakebuf_r+0x110>
   210e0:	deffec04 	addi	sp,sp,-80
   210e4:	dc000f15 	stw	r16,60(sp)
   210e8:	2821883a 	mov	r16,r5
   210ec:	2940038f 	ldh	r5,14(r5)
   210f0:	dc401015 	stw	r17,64(sp)
   210f4:	dfc01315 	stw	ra,76(sp)
   210f8:	dcc01215 	stw	r19,72(sp)
   210fc:	dc801115 	stw	r18,68(sp)
   21100:	2023883a 	mov	r17,r4
   21104:	28001c16 	blt	r5,zero,21178 <__smakebuf_r+0xa4>
   21108:	d80d883a 	mov	r6,sp
   2110c:	0020ef00 	call	20ef0 <_fstat_r>
   21110:	10001816 	blt	r2,zero,21174 <__smakebuf_r+0xa0>
   21114:	d8800117 	ldw	r2,4(sp)
   21118:	00e00014 	movui	r3,32768
   2111c:	10bc000c 	andi	r2,r2,61440
   21120:	14c80020 	cmpeqi	r19,r2,8192
   21124:	10c03726 	beq	r2,r3,21204 <__smakebuf_r+0x130>
   21128:	80c0030b 	ldhu	r3,12(r16)
   2112c:	18c20014 	ori	r3,r3,2048
   21130:	80c0030d 	sth	r3,12(r16)
   21134:	00c80004 	movi	r3,8192
   21138:	10c0521e 	bne	r2,r3,21284 <__smakebuf_r+0x1b0>
   2113c:	8140038f 	ldh	r5,14(r16)
   21140:	8809883a 	mov	r4,r17
   21144:	00270a40 	call	270a4 <_isatty_r>
   21148:	10004c26 	beq	r2,zero,2127c <__smakebuf_r+0x1a8>
   2114c:	8080030b 	ldhu	r2,12(r16)
   21150:	80c010c4 	addi	r3,r16,67
   21154:	80c00015 	stw	r3,0(r16)
   21158:	10800054 	ori	r2,r2,1
   2115c:	8080030d 	sth	r2,12(r16)
   21160:	00800044 	movi	r2,1
   21164:	80c00415 	stw	r3,16(r16)
   21168:	80800515 	stw	r2,20(r16)
   2116c:	04810004 	movi	r18,1024
   21170:	00000706 	br	21190 <__smakebuf_r+0xbc>
   21174:	8080030b 	ldhu	r2,12(r16)
   21178:	10c0200c 	andi	r3,r2,128
   2117c:	18001f1e 	bne	r3,zero,211fc <__smakebuf_r+0x128>
   21180:	04810004 	movi	r18,1024
   21184:	10820014 	ori	r2,r2,2048
   21188:	8080030d 	sth	r2,12(r16)
   2118c:	0027883a 	mov	r19,zero
   21190:	900b883a 	mov	r5,r18
   21194:	8809883a 	mov	r4,r17
   21198:	00212900 	call	21290 <_malloc_r>
   2119c:	10002c26 	beq	r2,zero,21250 <__smakebuf_r+0x17c>
   211a0:	80c0030b 	ldhu	r3,12(r16)
   211a4:	010000b4 	movhi	r4,2
   211a8:	21016004 	addi	r4,r4,1408
   211ac:	89000f15 	stw	r4,60(r17)
   211b0:	18c02014 	ori	r3,r3,128
   211b4:	80c0030d 	sth	r3,12(r16)
   211b8:	80800015 	stw	r2,0(r16)
   211bc:	80800415 	stw	r2,16(r16)
   211c0:	84800515 	stw	r18,20(r16)
   211c4:	98001a1e 	bne	r19,zero,21230 <__smakebuf_r+0x15c>
   211c8:	dfc01317 	ldw	ra,76(sp)
   211cc:	dcc01217 	ldw	r19,72(sp)
   211d0:	dc801117 	ldw	r18,68(sp)
   211d4:	dc401017 	ldw	r17,64(sp)
   211d8:	dc000f17 	ldw	r16,60(sp)
   211dc:	dec01404 	addi	sp,sp,80
   211e0:	f800283a 	ret
   211e4:	288010c4 	addi	r2,r5,67
   211e8:	28800015 	stw	r2,0(r5)
   211ec:	28800415 	stw	r2,16(r5)
   211f0:	00800044 	movi	r2,1
   211f4:	28800515 	stw	r2,20(r5)
   211f8:	f800283a 	ret
   211fc:	04801004 	movi	r18,64
   21200:	003fe006 	br	21184 <__alt_data_end+0xfffe1184>
   21204:	81000a17 	ldw	r4,40(r16)
   21208:	00c000b4 	movhi	r3,2
   2120c:	18c8ab04 	addi	r3,r3,8876
   21210:	20ffc51e 	bne	r4,r3,21128 <__alt_data_end+0xfffe1128>
   21214:	8080030b 	ldhu	r2,12(r16)
   21218:	04810004 	movi	r18,1024
   2121c:	84801315 	stw	r18,76(r16)
   21220:	1484b03a 	or	r2,r2,r18
   21224:	8080030d 	sth	r2,12(r16)
   21228:	0027883a 	mov	r19,zero
   2122c:	003fd806 	br	21190 <__alt_data_end+0xfffe1190>
   21230:	8140038f 	ldh	r5,14(r16)
   21234:	8809883a 	mov	r4,r17
   21238:	00270a40 	call	270a4 <_isatty_r>
   2123c:	103fe226 	beq	r2,zero,211c8 <__alt_data_end+0xfffe11c8>
   21240:	8080030b 	ldhu	r2,12(r16)
   21244:	10800054 	ori	r2,r2,1
   21248:	8080030d 	sth	r2,12(r16)
   2124c:	003fde06 	br	211c8 <__alt_data_end+0xfffe11c8>
   21250:	8080030b 	ldhu	r2,12(r16)
   21254:	10c0800c 	andi	r3,r2,512
   21258:	183fdb1e 	bne	r3,zero,211c8 <__alt_data_end+0xfffe11c8>
   2125c:	10800094 	ori	r2,r2,2
   21260:	80c010c4 	addi	r3,r16,67
   21264:	8080030d 	sth	r2,12(r16)
   21268:	00800044 	movi	r2,1
   2126c:	80c00015 	stw	r3,0(r16)
   21270:	80c00415 	stw	r3,16(r16)
   21274:	80800515 	stw	r2,20(r16)
   21278:	003fd306 	br	211c8 <__alt_data_end+0xfffe11c8>
   2127c:	04810004 	movi	r18,1024
   21280:	003fc306 	br	21190 <__alt_data_end+0xfffe1190>
   21284:	0027883a 	mov	r19,zero
   21288:	04810004 	movi	r18,1024
   2128c:	003fc006 	br	21190 <__alt_data_end+0xfffe1190>

00021290 <_malloc_r>:
   21290:	defff504 	addi	sp,sp,-44
   21294:	dc800315 	stw	r18,12(sp)
   21298:	dfc00a15 	stw	ra,40(sp)
   2129c:	df000915 	stw	fp,36(sp)
   212a0:	ddc00815 	stw	r23,32(sp)
   212a4:	dd800715 	stw	r22,28(sp)
   212a8:	dd400615 	stw	r21,24(sp)
   212ac:	dd000515 	stw	r20,20(sp)
   212b0:	dcc00415 	stw	r19,16(sp)
   212b4:	dc400215 	stw	r17,8(sp)
   212b8:	dc000115 	stw	r16,4(sp)
   212bc:	288002c4 	addi	r2,r5,11
   212c0:	00c00584 	movi	r3,22
   212c4:	2025883a 	mov	r18,r4
   212c8:	18807f2e 	bgeu	r3,r2,214c8 <_malloc_r+0x238>
   212cc:	047ffe04 	movi	r17,-8
   212d0:	1462703a 	and	r17,r2,r17
   212d4:	8800a316 	blt	r17,zero,21564 <_malloc_r+0x2d4>
   212d8:	8940a236 	bltu	r17,r5,21564 <_malloc_r+0x2d4>
   212dc:	002df3c0 	call	2df3c <__malloc_lock>
   212e0:	00807dc4 	movi	r2,503
   212e4:	1441e92e 	bgeu	r2,r17,21a8c <_malloc_r+0x7fc>
   212e8:	8804d27a 	srli	r2,r17,9
   212ec:	1000a126 	beq	r2,zero,21574 <_malloc_r+0x2e4>
   212f0:	00c00104 	movi	r3,4
   212f4:	18811e36 	bltu	r3,r2,21770 <_malloc_r+0x4e0>
   212f8:	8804d1ba 	srli	r2,r17,6
   212fc:	12000e44 	addi	r8,r2,57
   21300:	11c00e04 	addi	r7,r2,56
   21304:	4209883a 	add	r4,r8,r8
   21308:	04c000f4 	movhi	r19,3
   2130c:	2109883a 	add	r4,r4,r4
   21310:	9cc52004 	addi	r19,r19,5248
   21314:	2109883a 	add	r4,r4,r4
   21318:	9909883a 	add	r4,r19,r4
   2131c:	24000117 	ldw	r16,4(r4)
   21320:	213ffe04 	addi	r4,r4,-8
   21324:	24009726 	beq	r4,r16,21584 <_malloc_r+0x2f4>
   21328:	80800117 	ldw	r2,4(r16)
   2132c:	01bfff04 	movi	r6,-4
   21330:	014003c4 	movi	r5,15
   21334:	1184703a 	and	r2,r2,r6
   21338:	1447c83a 	sub	r3,r2,r17
   2133c:	28c00716 	blt	r5,r3,2135c <_malloc_r+0xcc>
   21340:	1800920e 	bge	r3,zero,2158c <_malloc_r+0x2fc>
   21344:	84000317 	ldw	r16,12(r16)
   21348:	24008e26 	beq	r4,r16,21584 <_malloc_r+0x2f4>
   2134c:	80800117 	ldw	r2,4(r16)
   21350:	1184703a 	and	r2,r2,r6
   21354:	1447c83a 	sub	r3,r2,r17
   21358:	28fff90e 	bge	r5,r3,21340 <__alt_data_end+0xfffe1340>
   2135c:	3809883a 	mov	r4,r7
   21360:	018000f4 	movhi	r6,3
   21364:	9c000417 	ldw	r16,16(r19)
   21368:	31852004 	addi	r6,r6,5248
   2136c:	32000204 	addi	r8,r6,8
   21370:	82013426 	beq	r16,r8,21844 <_malloc_r+0x5b4>
   21374:	80c00117 	ldw	r3,4(r16)
   21378:	00bfff04 	movi	r2,-4
   2137c:	188e703a 	and	r7,r3,r2
   21380:	3c45c83a 	sub	r2,r7,r17
   21384:	00c003c4 	movi	r3,15
   21388:	18811f16 	blt	r3,r2,21808 <_malloc_r+0x578>
   2138c:	32000515 	stw	r8,20(r6)
   21390:	32000415 	stw	r8,16(r6)
   21394:	10007f0e 	bge	r2,zero,21594 <_malloc_r+0x304>
   21398:	00807fc4 	movi	r2,511
   2139c:	11c0fd36 	bltu	r2,r7,21794 <_malloc_r+0x504>
   213a0:	3806d0fa 	srli	r3,r7,3
   213a4:	01c00044 	movi	r7,1
   213a8:	30800117 	ldw	r2,4(r6)
   213ac:	19400044 	addi	r5,r3,1
   213b0:	294b883a 	add	r5,r5,r5
   213b4:	1807d0ba 	srai	r3,r3,2
   213b8:	294b883a 	add	r5,r5,r5
   213bc:	294b883a 	add	r5,r5,r5
   213c0:	298b883a 	add	r5,r5,r6
   213c4:	38c6983a 	sll	r3,r7,r3
   213c8:	29c00017 	ldw	r7,0(r5)
   213cc:	2a7ffe04 	addi	r9,r5,-8
   213d0:	1886b03a 	or	r3,r3,r2
   213d4:	82400315 	stw	r9,12(r16)
   213d8:	81c00215 	stw	r7,8(r16)
   213dc:	30c00115 	stw	r3,4(r6)
   213e0:	2c000015 	stw	r16,0(r5)
   213e4:	3c000315 	stw	r16,12(r7)
   213e8:	2005d0ba 	srai	r2,r4,2
   213ec:	01400044 	movi	r5,1
   213f0:	288a983a 	sll	r5,r5,r2
   213f4:	19406f36 	bltu	r3,r5,215b4 <_malloc_r+0x324>
   213f8:	28c4703a 	and	r2,r5,r3
   213fc:	10000a1e 	bne	r2,zero,21428 <_malloc_r+0x198>
   21400:	00bfff04 	movi	r2,-4
   21404:	294b883a 	add	r5,r5,r5
   21408:	2088703a 	and	r4,r4,r2
   2140c:	28c4703a 	and	r2,r5,r3
   21410:	21000104 	addi	r4,r4,4
   21414:	1000041e 	bne	r2,zero,21428 <_malloc_r+0x198>
   21418:	294b883a 	add	r5,r5,r5
   2141c:	28c4703a 	and	r2,r5,r3
   21420:	21000104 	addi	r4,r4,4
   21424:	103ffc26 	beq	r2,zero,21418 <__alt_data_end+0xfffe1418>
   21428:	02bfff04 	movi	r10,-4
   2142c:	024003c4 	movi	r9,15
   21430:	21800044 	addi	r6,r4,1
   21434:	318d883a 	add	r6,r6,r6
   21438:	318d883a 	add	r6,r6,r6
   2143c:	318d883a 	add	r6,r6,r6
   21440:	998d883a 	add	r6,r19,r6
   21444:	333ffe04 	addi	r12,r6,-8
   21448:	2017883a 	mov	r11,r4
   2144c:	31800104 	addi	r6,r6,4
   21450:	34000017 	ldw	r16,0(r6)
   21454:	31fffd04 	addi	r7,r6,-12
   21458:	81c0041e 	bne	r16,r7,2146c <_malloc_r+0x1dc>
   2145c:	0000fb06 	br	2184c <_malloc_r+0x5bc>
   21460:	1801030e 	bge	r3,zero,21870 <_malloc_r+0x5e0>
   21464:	84000317 	ldw	r16,12(r16)
   21468:	81c0f826 	beq	r16,r7,2184c <_malloc_r+0x5bc>
   2146c:	80800117 	ldw	r2,4(r16)
   21470:	1284703a 	and	r2,r2,r10
   21474:	1447c83a 	sub	r3,r2,r17
   21478:	48fff90e 	bge	r9,r3,21460 <__alt_data_end+0xfffe1460>
   2147c:	80800317 	ldw	r2,12(r16)
   21480:	81000217 	ldw	r4,8(r16)
   21484:	89400054 	ori	r5,r17,1
   21488:	81400115 	stw	r5,4(r16)
   2148c:	20800315 	stw	r2,12(r4)
   21490:	11000215 	stw	r4,8(r2)
   21494:	8463883a 	add	r17,r16,r17
   21498:	9c400515 	stw	r17,20(r19)
   2149c:	9c400415 	stw	r17,16(r19)
   214a0:	18800054 	ori	r2,r3,1
   214a4:	88800115 	stw	r2,4(r17)
   214a8:	8a000315 	stw	r8,12(r17)
   214ac:	8a000215 	stw	r8,8(r17)
   214b0:	88e3883a 	add	r17,r17,r3
   214b4:	88c00015 	stw	r3,0(r17)
   214b8:	9009883a 	mov	r4,r18
   214bc:	002df600 	call	2df60 <__malloc_unlock>
   214c0:	80800204 	addi	r2,r16,8
   214c4:	00001b06 	br	21534 <_malloc_r+0x2a4>
   214c8:	04400404 	movi	r17,16
   214cc:	89402536 	bltu	r17,r5,21564 <_malloc_r+0x2d4>
   214d0:	002df3c0 	call	2df3c <__malloc_lock>
   214d4:	00800184 	movi	r2,6
   214d8:	01000084 	movi	r4,2
   214dc:	04c000f4 	movhi	r19,3
   214e0:	1085883a 	add	r2,r2,r2
   214e4:	9cc52004 	addi	r19,r19,5248
   214e8:	1085883a 	add	r2,r2,r2
   214ec:	9885883a 	add	r2,r19,r2
   214f0:	14000117 	ldw	r16,4(r2)
   214f4:	10fffe04 	addi	r3,r2,-8
   214f8:	80c0d926 	beq	r16,r3,21860 <_malloc_r+0x5d0>
   214fc:	80c00117 	ldw	r3,4(r16)
   21500:	81000317 	ldw	r4,12(r16)
   21504:	00bfff04 	movi	r2,-4
   21508:	1884703a 	and	r2,r3,r2
   2150c:	81400217 	ldw	r5,8(r16)
   21510:	8085883a 	add	r2,r16,r2
   21514:	10c00117 	ldw	r3,4(r2)
   21518:	29000315 	stw	r4,12(r5)
   2151c:	21400215 	stw	r5,8(r4)
   21520:	18c00054 	ori	r3,r3,1
   21524:	10c00115 	stw	r3,4(r2)
   21528:	9009883a 	mov	r4,r18
   2152c:	002df600 	call	2df60 <__malloc_unlock>
   21530:	80800204 	addi	r2,r16,8
   21534:	dfc00a17 	ldw	ra,40(sp)
   21538:	df000917 	ldw	fp,36(sp)
   2153c:	ddc00817 	ldw	r23,32(sp)
   21540:	dd800717 	ldw	r22,28(sp)
   21544:	dd400617 	ldw	r21,24(sp)
   21548:	dd000517 	ldw	r20,20(sp)
   2154c:	dcc00417 	ldw	r19,16(sp)
   21550:	dc800317 	ldw	r18,12(sp)
   21554:	dc400217 	ldw	r17,8(sp)
   21558:	dc000117 	ldw	r16,4(sp)
   2155c:	dec00b04 	addi	sp,sp,44
   21560:	f800283a 	ret
   21564:	00800304 	movi	r2,12
   21568:	90800015 	stw	r2,0(r18)
   2156c:	0005883a 	mov	r2,zero
   21570:	003ff006 	br	21534 <__alt_data_end+0xfffe1534>
   21574:	01002004 	movi	r4,128
   21578:	02001004 	movi	r8,64
   2157c:	01c00fc4 	movi	r7,63
   21580:	003f6106 	br	21308 <__alt_data_end+0xfffe1308>
   21584:	4009883a 	mov	r4,r8
   21588:	003f7506 	br	21360 <__alt_data_end+0xfffe1360>
   2158c:	81000317 	ldw	r4,12(r16)
   21590:	003fde06 	br	2150c <__alt_data_end+0xfffe150c>
   21594:	81c5883a 	add	r2,r16,r7
   21598:	11400117 	ldw	r5,4(r2)
   2159c:	9009883a 	mov	r4,r18
   215a0:	29400054 	ori	r5,r5,1
   215a4:	11400115 	stw	r5,4(r2)
   215a8:	002df600 	call	2df60 <__malloc_unlock>
   215ac:	80800204 	addi	r2,r16,8
   215b0:	003fe006 	br	21534 <__alt_data_end+0xfffe1534>
   215b4:	9c000217 	ldw	r16,8(r19)
   215b8:	00bfff04 	movi	r2,-4
   215bc:	85800117 	ldw	r22,4(r16)
   215c0:	b0ac703a 	and	r22,r22,r2
   215c4:	b4400336 	bltu	r22,r17,215d4 <_malloc_r+0x344>
   215c8:	b445c83a 	sub	r2,r22,r17
   215cc:	00c003c4 	movi	r3,15
   215d0:	18805d16 	blt	r3,r2,21748 <_malloc_r+0x4b8>
   215d4:	05c000f4 	movhi	r23,3
   215d8:	008000f4 	movhi	r2,3
   215dc:	1091f404 	addi	r2,r2,18384
   215e0:	bdcaf604 	addi	r23,r23,11224
   215e4:	15400017 	ldw	r21,0(r2)
   215e8:	b8c00017 	ldw	r3,0(r23)
   215ec:	00bfffc4 	movi	r2,-1
   215f0:	858d883a 	add	r6,r16,r22
   215f4:	8d6b883a 	add	r21,r17,r21
   215f8:	1880ea26 	beq	r3,r2,219a4 <_malloc_r+0x714>
   215fc:	ad4403c4 	addi	r21,r21,4111
   21600:	00bc0004 	movi	r2,-4096
   21604:	a8aa703a 	and	r21,r21,r2
   21608:	a80b883a 	mov	r5,r21
   2160c:	9009883a 	mov	r4,r18
   21610:	d9800015 	stw	r6,0(sp)
   21614:	00221800 	call	22180 <_sbrk_r>
   21618:	1029883a 	mov	r20,r2
   2161c:	00bfffc4 	movi	r2,-1
   21620:	d9800017 	ldw	r6,0(sp)
   21624:	a080e826 	beq	r20,r2,219c8 <_malloc_r+0x738>
   21628:	a180a636 	bltu	r20,r6,218c4 <_malloc_r+0x634>
   2162c:	070000f4 	movhi	fp,3
   21630:	e711ff04 	addi	fp,fp,18428
   21634:	e0800017 	ldw	r2,0(fp)
   21638:	a887883a 	add	r3,r21,r2
   2163c:	e0c00015 	stw	r3,0(fp)
   21640:	3500e626 	beq	r6,r20,219dc <_malloc_r+0x74c>
   21644:	b9000017 	ldw	r4,0(r23)
   21648:	00bfffc4 	movi	r2,-1
   2164c:	2080ee26 	beq	r4,r2,21a08 <_malloc_r+0x778>
   21650:	a185c83a 	sub	r2,r20,r6
   21654:	10c5883a 	add	r2,r2,r3
   21658:	e0800015 	stw	r2,0(fp)
   2165c:	a0c001cc 	andi	r3,r20,7
   21660:	1800bc26 	beq	r3,zero,21954 <_malloc_r+0x6c4>
   21664:	a0e9c83a 	sub	r20,r20,r3
   21668:	00840204 	movi	r2,4104
   2166c:	a5000204 	addi	r20,r20,8
   21670:	10c7c83a 	sub	r3,r2,r3
   21674:	a545883a 	add	r2,r20,r21
   21678:	1083ffcc 	andi	r2,r2,4095
   2167c:	18abc83a 	sub	r21,r3,r2
   21680:	a80b883a 	mov	r5,r21
   21684:	9009883a 	mov	r4,r18
   21688:	00221800 	call	22180 <_sbrk_r>
   2168c:	00ffffc4 	movi	r3,-1
   21690:	10c0e126 	beq	r2,r3,21a18 <_malloc_r+0x788>
   21694:	1505c83a 	sub	r2,r2,r20
   21698:	1545883a 	add	r2,r2,r21
   2169c:	10800054 	ori	r2,r2,1
   216a0:	e0c00017 	ldw	r3,0(fp)
   216a4:	9d000215 	stw	r20,8(r19)
   216a8:	a0800115 	stw	r2,4(r20)
   216ac:	a8c7883a 	add	r3,r21,r3
   216b0:	e0c00015 	stw	r3,0(fp)
   216b4:	84c00e26 	beq	r16,r19,216f0 <_malloc_r+0x460>
   216b8:	018003c4 	movi	r6,15
   216bc:	3580a72e 	bgeu	r6,r22,2195c <_malloc_r+0x6cc>
   216c0:	81400117 	ldw	r5,4(r16)
   216c4:	013ffe04 	movi	r4,-8
   216c8:	b0bffd04 	addi	r2,r22,-12
   216cc:	1104703a 	and	r2,r2,r4
   216d0:	2900004c 	andi	r4,r5,1
   216d4:	2088b03a 	or	r4,r4,r2
   216d8:	81000115 	stw	r4,4(r16)
   216dc:	01400144 	movi	r5,5
   216e0:	8089883a 	add	r4,r16,r2
   216e4:	21400115 	stw	r5,4(r4)
   216e8:	21400215 	stw	r5,8(r4)
   216ec:	3080cd36 	bltu	r6,r2,21a24 <_malloc_r+0x794>
   216f0:	008000f4 	movhi	r2,3
   216f4:	1091f304 	addi	r2,r2,18380
   216f8:	11000017 	ldw	r4,0(r2)
   216fc:	20c0012e 	bgeu	r4,r3,21704 <_malloc_r+0x474>
   21700:	10c00015 	stw	r3,0(r2)
   21704:	008000f4 	movhi	r2,3
   21708:	1091f204 	addi	r2,r2,18376
   2170c:	11000017 	ldw	r4,0(r2)
   21710:	9c000217 	ldw	r16,8(r19)
   21714:	20c0012e 	bgeu	r4,r3,2171c <_malloc_r+0x48c>
   21718:	10c00015 	stw	r3,0(r2)
   2171c:	80c00117 	ldw	r3,4(r16)
   21720:	00bfff04 	movi	r2,-4
   21724:	1886703a 	and	r3,r3,r2
   21728:	1c45c83a 	sub	r2,r3,r17
   2172c:	1c400236 	bltu	r3,r17,21738 <_malloc_r+0x4a8>
   21730:	00c003c4 	movi	r3,15
   21734:	18800416 	blt	r3,r2,21748 <_malloc_r+0x4b8>
   21738:	9009883a 	mov	r4,r18
   2173c:	002df600 	call	2df60 <__malloc_unlock>
   21740:	0005883a 	mov	r2,zero
   21744:	003f7b06 	br	21534 <__alt_data_end+0xfffe1534>
   21748:	88c00054 	ori	r3,r17,1
   2174c:	80c00115 	stw	r3,4(r16)
   21750:	8463883a 	add	r17,r16,r17
   21754:	10800054 	ori	r2,r2,1
   21758:	9c400215 	stw	r17,8(r19)
   2175c:	88800115 	stw	r2,4(r17)
   21760:	9009883a 	mov	r4,r18
   21764:	002df600 	call	2df60 <__malloc_unlock>
   21768:	80800204 	addi	r2,r16,8
   2176c:	003f7106 	br	21534 <__alt_data_end+0xfffe1534>
   21770:	00c00504 	movi	r3,20
   21774:	18804a2e 	bgeu	r3,r2,218a0 <_malloc_r+0x610>
   21778:	00c01504 	movi	r3,84
   2177c:	18806e36 	bltu	r3,r2,21938 <_malloc_r+0x6a8>
   21780:	8804d33a 	srli	r2,r17,12
   21784:	12001bc4 	addi	r8,r2,111
   21788:	11c01b84 	addi	r7,r2,110
   2178c:	4209883a 	add	r4,r8,r8
   21790:	003edd06 	br	21308 <__alt_data_end+0xfffe1308>
   21794:	3804d27a 	srli	r2,r7,9
   21798:	00c00104 	movi	r3,4
   2179c:	1880442e 	bgeu	r3,r2,218b0 <_malloc_r+0x620>
   217a0:	00c00504 	movi	r3,20
   217a4:	18808136 	bltu	r3,r2,219ac <_malloc_r+0x71c>
   217a8:	11401704 	addi	r5,r2,92
   217ac:	10c016c4 	addi	r3,r2,91
   217b0:	294b883a 	add	r5,r5,r5
   217b4:	294b883a 	add	r5,r5,r5
   217b8:	294b883a 	add	r5,r5,r5
   217bc:	994b883a 	add	r5,r19,r5
   217c0:	28800017 	ldw	r2,0(r5)
   217c4:	018000f4 	movhi	r6,3
   217c8:	297ffe04 	addi	r5,r5,-8
   217cc:	31852004 	addi	r6,r6,5248
   217d0:	28806526 	beq	r5,r2,21968 <_malloc_r+0x6d8>
   217d4:	01bfff04 	movi	r6,-4
   217d8:	10c00117 	ldw	r3,4(r2)
   217dc:	1986703a 	and	r3,r3,r6
   217e0:	38c0022e 	bgeu	r7,r3,217ec <_malloc_r+0x55c>
   217e4:	10800217 	ldw	r2,8(r2)
   217e8:	28bffb1e 	bne	r5,r2,217d8 <__alt_data_end+0xfffe17d8>
   217ec:	11400317 	ldw	r5,12(r2)
   217f0:	98c00117 	ldw	r3,4(r19)
   217f4:	81400315 	stw	r5,12(r16)
   217f8:	80800215 	stw	r2,8(r16)
   217fc:	2c000215 	stw	r16,8(r5)
   21800:	14000315 	stw	r16,12(r2)
   21804:	003ef806 	br	213e8 <__alt_data_end+0xfffe13e8>
   21808:	88c00054 	ori	r3,r17,1
   2180c:	80c00115 	stw	r3,4(r16)
   21810:	8463883a 	add	r17,r16,r17
   21814:	34400515 	stw	r17,20(r6)
   21818:	34400415 	stw	r17,16(r6)
   2181c:	10c00054 	ori	r3,r2,1
   21820:	8a000315 	stw	r8,12(r17)
   21824:	8a000215 	stw	r8,8(r17)
   21828:	88c00115 	stw	r3,4(r17)
   2182c:	88a3883a 	add	r17,r17,r2
   21830:	88800015 	stw	r2,0(r17)
   21834:	9009883a 	mov	r4,r18
   21838:	002df600 	call	2df60 <__malloc_unlock>
   2183c:	80800204 	addi	r2,r16,8
   21840:	003f3c06 	br	21534 <__alt_data_end+0xfffe1534>
   21844:	30c00117 	ldw	r3,4(r6)
   21848:	003ee706 	br	213e8 <__alt_data_end+0xfffe13e8>
   2184c:	5ac00044 	addi	r11,r11,1
   21850:	588000cc 	andi	r2,r11,3
   21854:	31800204 	addi	r6,r6,8
   21858:	103efd1e 	bne	r2,zero,21450 <__alt_data_end+0xfffe1450>
   2185c:	00002406 	br	218f0 <_malloc_r+0x660>
   21860:	14000317 	ldw	r16,12(r2)
   21864:	143f251e 	bne	r2,r16,214fc <__alt_data_end+0xfffe14fc>
   21868:	21000084 	addi	r4,r4,2
   2186c:	003ebc06 	br	21360 <__alt_data_end+0xfffe1360>
   21870:	8085883a 	add	r2,r16,r2
   21874:	10c00117 	ldw	r3,4(r2)
   21878:	81000317 	ldw	r4,12(r16)
   2187c:	81400217 	ldw	r5,8(r16)
   21880:	18c00054 	ori	r3,r3,1
   21884:	10c00115 	stw	r3,4(r2)
   21888:	29000315 	stw	r4,12(r5)
   2188c:	21400215 	stw	r5,8(r4)
   21890:	9009883a 	mov	r4,r18
   21894:	002df600 	call	2df60 <__malloc_unlock>
   21898:	80800204 	addi	r2,r16,8
   2189c:	003f2506 	br	21534 <__alt_data_end+0xfffe1534>
   218a0:	12001704 	addi	r8,r2,92
   218a4:	11c016c4 	addi	r7,r2,91
   218a8:	4209883a 	add	r4,r8,r8
   218ac:	003e9606 	br	21308 <__alt_data_end+0xfffe1308>
   218b0:	3804d1ba 	srli	r2,r7,6
   218b4:	11400e44 	addi	r5,r2,57
   218b8:	10c00e04 	addi	r3,r2,56
   218bc:	294b883a 	add	r5,r5,r5
   218c0:	003fbc06 	br	217b4 <__alt_data_end+0xfffe17b4>
   218c4:	84ff5926 	beq	r16,r19,2162c <__alt_data_end+0xfffe162c>
   218c8:	008000f4 	movhi	r2,3
   218cc:	10852004 	addi	r2,r2,5248
   218d0:	14000217 	ldw	r16,8(r2)
   218d4:	00bfff04 	movi	r2,-4
   218d8:	80c00117 	ldw	r3,4(r16)
   218dc:	1886703a 	and	r3,r3,r2
   218e0:	003f9106 	br	21728 <__alt_data_end+0xfffe1728>
   218e4:	60800217 	ldw	r2,8(r12)
   218e8:	213fffc4 	addi	r4,r4,-1
   218ec:	1300651e 	bne	r2,r12,21a84 <_malloc_r+0x7f4>
   218f0:	208000cc 	andi	r2,r4,3
   218f4:	633ffe04 	addi	r12,r12,-8
   218f8:	103ffa1e 	bne	r2,zero,218e4 <__alt_data_end+0xfffe18e4>
   218fc:	98800117 	ldw	r2,4(r19)
   21900:	0146303a 	nor	r3,zero,r5
   21904:	1884703a 	and	r2,r3,r2
   21908:	98800115 	stw	r2,4(r19)
   2190c:	294b883a 	add	r5,r5,r5
   21910:	117f2836 	bltu	r2,r5,215b4 <__alt_data_end+0xfffe15b4>
   21914:	283f2726 	beq	r5,zero,215b4 <__alt_data_end+0xfffe15b4>
   21918:	2886703a 	and	r3,r5,r2
   2191c:	5809883a 	mov	r4,r11
   21920:	183ec31e 	bne	r3,zero,21430 <__alt_data_end+0xfffe1430>
   21924:	294b883a 	add	r5,r5,r5
   21928:	2886703a 	and	r3,r5,r2
   2192c:	21000104 	addi	r4,r4,4
   21930:	183ffc26 	beq	r3,zero,21924 <__alt_data_end+0xfffe1924>
   21934:	003ebe06 	br	21430 <__alt_data_end+0xfffe1430>
   21938:	00c05504 	movi	r3,340
   2193c:	18801236 	bltu	r3,r2,21988 <_malloc_r+0x6f8>
   21940:	8804d3fa 	srli	r2,r17,15
   21944:	12001e04 	addi	r8,r2,120
   21948:	11c01dc4 	addi	r7,r2,119
   2194c:	4209883a 	add	r4,r8,r8
   21950:	003e6d06 	br	21308 <__alt_data_end+0xfffe1308>
   21954:	00c40004 	movi	r3,4096
   21958:	003f4606 	br	21674 <__alt_data_end+0xfffe1674>
   2195c:	00800044 	movi	r2,1
   21960:	a0800115 	stw	r2,4(r20)
   21964:	003f7406 	br	21738 <__alt_data_end+0xfffe1738>
   21968:	1805d0ba 	srai	r2,r3,2
   2196c:	01c00044 	movi	r7,1
   21970:	30c00117 	ldw	r3,4(r6)
   21974:	388e983a 	sll	r7,r7,r2
   21978:	2805883a 	mov	r2,r5
   2197c:	38c6b03a 	or	r3,r7,r3
   21980:	30c00115 	stw	r3,4(r6)
   21984:	003f9b06 	br	217f4 <__alt_data_end+0xfffe17f4>
   21988:	00c15504 	movi	r3,1364
   2198c:	18801a36 	bltu	r3,r2,219f8 <_malloc_r+0x768>
   21990:	8804d4ba 	srli	r2,r17,18
   21994:	12001f44 	addi	r8,r2,125
   21998:	11c01f04 	addi	r7,r2,124
   2199c:	4209883a 	add	r4,r8,r8
   219a0:	003e5906 	br	21308 <__alt_data_end+0xfffe1308>
   219a4:	ad400404 	addi	r21,r21,16
   219a8:	003f1706 	br	21608 <__alt_data_end+0xfffe1608>
   219ac:	00c01504 	movi	r3,84
   219b0:	18802336 	bltu	r3,r2,21a40 <_malloc_r+0x7b0>
   219b4:	3804d33a 	srli	r2,r7,12
   219b8:	11401bc4 	addi	r5,r2,111
   219bc:	10c01b84 	addi	r3,r2,110
   219c0:	294b883a 	add	r5,r5,r5
   219c4:	003f7b06 	br	217b4 <__alt_data_end+0xfffe17b4>
   219c8:	9c000217 	ldw	r16,8(r19)
   219cc:	00bfff04 	movi	r2,-4
   219d0:	80c00117 	ldw	r3,4(r16)
   219d4:	1886703a 	and	r3,r3,r2
   219d8:	003f5306 	br	21728 <__alt_data_end+0xfffe1728>
   219dc:	3083ffcc 	andi	r2,r6,4095
   219e0:	103f181e 	bne	r2,zero,21644 <__alt_data_end+0xfffe1644>
   219e4:	99000217 	ldw	r4,8(r19)
   219e8:	b545883a 	add	r2,r22,r21
   219ec:	10800054 	ori	r2,r2,1
   219f0:	20800115 	stw	r2,4(r4)
   219f4:	003f3e06 	br	216f0 <__alt_data_end+0xfffe16f0>
   219f8:	01003f84 	movi	r4,254
   219fc:	02001fc4 	movi	r8,127
   21a00:	01c01f84 	movi	r7,126
   21a04:	003e4006 	br	21308 <__alt_data_end+0xfffe1308>
   21a08:	008000f4 	movhi	r2,3
   21a0c:	108af604 	addi	r2,r2,11224
   21a10:	15000015 	stw	r20,0(r2)
   21a14:	003f1106 	br	2165c <__alt_data_end+0xfffe165c>
   21a18:	00800044 	movi	r2,1
   21a1c:	002b883a 	mov	r21,zero
   21a20:	003f1f06 	br	216a0 <__alt_data_end+0xfffe16a0>
   21a24:	81400204 	addi	r5,r16,8
   21a28:	9009883a 	mov	r4,r18
   21a2c:	00268d80 	call	268d8 <_free_r>
   21a30:	008000f4 	movhi	r2,3
   21a34:	1091ff04 	addi	r2,r2,18428
   21a38:	10c00017 	ldw	r3,0(r2)
   21a3c:	003f2c06 	br	216f0 <__alt_data_end+0xfffe16f0>
   21a40:	00c05504 	movi	r3,340
   21a44:	18800536 	bltu	r3,r2,21a5c <_malloc_r+0x7cc>
   21a48:	3804d3fa 	srli	r2,r7,15
   21a4c:	11401e04 	addi	r5,r2,120
   21a50:	10c01dc4 	addi	r3,r2,119
   21a54:	294b883a 	add	r5,r5,r5
   21a58:	003f5606 	br	217b4 <__alt_data_end+0xfffe17b4>
   21a5c:	00c15504 	movi	r3,1364
   21a60:	18800536 	bltu	r3,r2,21a78 <_malloc_r+0x7e8>
   21a64:	3804d4ba 	srli	r2,r7,18
   21a68:	11401f44 	addi	r5,r2,125
   21a6c:	10c01f04 	addi	r3,r2,124
   21a70:	294b883a 	add	r5,r5,r5
   21a74:	003f4f06 	br	217b4 <__alt_data_end+0xfffe17b4>
   21a78:	01403f84 	movi	r5,254
   21a7c:	00c01f84 	movi	r3,126
   21a80:	003f4c06 	br	217b4 <__alt_data_end+0xfffe17b4>
   21a84:	98800117 	ldw	r2,4(r19)
   21a88:	003fa006 	br	2190c <__alt_data_end+0xfffe190c>
   21a8c:	8808d0fa 	srli	r4,r17,3
   21a90:	20800044 	addi	r2,r4,1
   21a94:	1085883a 	add	r2,r2,r2
   21a98:	003e9006 	br	214dc <__alt_data_end+0xfffe14dc>

00021a9c <memchr>:
   21a9c:	208000cc 	andi	r2,r4,3
   21aa0:	280f883a 	mov	r7,r5
   21aa4:	10003426 	beq	r2,zero,21b78 <memchr+0xdc>
   21aa8:	30bfffc4 	addi	r2,r6,-1
   21aac:	30001a26 	beq	r6,zero,21b18 <memchr+0x7c>
   21ab0:	20c00003 	ldbu	r3,0(r4)
   21ab4:	29803fcc 	andi	r6,r5,255
   21ab8:	30c0051e 	bne	r6,r3,21ad0 <memchr+0x34>
   21abc:	00001806 	br	21b20 <memchr+0x84>
   21ac0:	10001526 	beq	r2,zero,21b18 <memchr+0x7c>
   21ac4:	20c00003 	ldbu	r3,0(r4)
   21ac8:	10bfffc4 	addi	r2,r2,-1
   21acc:	30c01426 	beq	r6,r3,21b20 <memchr+0x84>
   21ad0:	21000044 	addi	r4,r4,1
   21ad4:	20c000cc 	andi	r3,r4,3
   21ad8:	183ff91e 	bne	r3,zero,21ac0 <__alt_data_end+0xfffe1ac0>
   21adc:	020000c4 	movi	r8,3
   21ae0:	40801136 	bltu	r8,r2,21b28 <memchr+0x8c>
   21ae4:	10000c26 	beq	r2,zero,21b18 <memchr+0x7c>
   21ae8:	20c00003 	ldbu	r3,0(r4)
   21aec:	29403fcc 	andi	r5,r5,255
   21af0:	28c00b26 	beq	r5,r3,21b20 <memchr+0x84>
   21af4:	20c00044 	addi	r3,r4,1
   21af8:	39803fcc 	andi	r6,r7,255
   21afc:	2089883a 	add	r4,r4,r2
   21b00:	00000306 	br	21b10 <memchr+0x74>
   21b04:	18c00044 	addi	r3,r3,1
   21b08:	197fffc3 	ldbu	r5,-1(r3)
   21b0c:	31400526 	beq	r6,r5,21b24 <memchr+0x88>
   21b10:	1805883a 	mov	r2,r3
   21b14:	20fffb1e 	bne	r4,r3,21b04 <__alt_data_end+0xfffe1b04>
   21b18:	0005883a 	mov	r2,zero
   21b1c:	f800283a 	ret
   21b20:	2005883a 	mov	r2,r4
   21b24:	f800283a 	ret
   21b28:	28c03fcc 	andi	r3,r5,255
   21b2c:	1812923a 	slli	r9,r3,8
   21b30:	02ffbff4 	movhi	r11,65279
   21b34:	02a02074 	movhi	r10,32897
   21b38:	48d2b03a 	or	r9,r9,r3
   21b3c:	4806943a 	slli	r3,r9,16
   21b40:	5affbfc4 	addi	r11,r11,-257
   21b44:	52a02004 	addi	r10,r10,-32640
   21b48:	48d2b03a 	or	r9,r9,r3
   21b4c:	20c00017 	ldw	r3,0(r4)
   21b50:	48c6f03a 	xor	r3,r9,r3
   21b54:	1acd883a 	add	r6,r3,r11
   21b58:	00c6303a 	nor	r3,zero,r3
   21b5c:	30c6703a 	and	r3,r6,r3
   21b60:	1a86703a 	and	r3,r3,r10
   21b64:	183fe01e 	bne	r3,zero,21ae8 <__alt_data_end+0xfffe1ae8>
   21b68:	10bfff04 	addi	r2,r2,-4
   21b6c:	21000104 	addi	r4,r4,4
   21b70:	40bff636 	bltu	r8,r2,21b4c <__alt_data_end+0xfffe1b4c>
   21b74:	003fdb06 	br	21ae4 <__alt_data_end+0xfffe1ae4>
   21b78:	3005883a 	mov	r2,r6
   21b7c:	003fd706 	br	21adc <__alt_data_end+0xfffe1adc>

00021b80 <memcpy>:
   21b80:	defffd04 	addi	sp,sp,-12
   21b84:	dfc00215 	stw	ra,8(sp)
   21b88:	dc400115 	stw	r17,4(sp)
   21b8c:	dc000015 	stw	r16,0(sp)
   21b90:	00c003c4 	movi	r3,15
   21b94:	2005883a 	mov	r2,r4
   21b98:	1980452e 	bgeu	r3,r6,21cb0 <memcpy+0x130>
   21b9c:	2906b03a 	or	r3,r5,r4
   21ba0:	18c000cc 	andi	r3,r3,3
   21ba4:	1800441e 	bne	r3,zero,21cb8 <memcpy+0x138>
   21ba8:	347ffc04 	addi	r17,r6,-16
   21bac:	8822d13a 	srli	r17,r17,4
   21bb0:	28c00104 	addi	r3,r5,4
   21bb4:	23400104 	addi	r13,r4,4
   21bb8:	8820913a 	slli	r16,r17,4
   21bbc:	2b000204 	addi	r12,r5,8
   21bc0:	22c00204 	addi	r11,r4,8
   21bc4:	84000504 	addi	r16,r16,20
   21bc8:	2a800304 	addi	r10,r5,12
   21bcc:	22400304 	addi	r9,r4,12
   21bd0:	2c21883a 	add	r16,r5,r16
   21bd4:	2811883a 	mov	r8,r5
   21bd8:	200f883a 	mov	r7,r4
   21bdc:	41000017 	ldw	r4,0(r8)
   21be0:	1fc00017 	ldw	ra,0(r3)
   21be4:	63c00017 	ldw	r15,0(r12)
   21be8:	39000015 	stw	r4,0(r7)
   21bec:	53800017 	ldw	r14,0(r10)
   21bf0:	6fc00015 	stw	ra,0(r13)
   21bf4:	5bc00015 	stw	r15,0(r11)
   21bf8:	4b800015 	stw	r14,0(r9)
   21bfc:	18c00404 	addi	r3,r3,16
   21c00:	39c00404 	addi	r7,r7,16
   21c04:	42000404 	addi	r8,r8,16
   21c08:	6b400404 	addi	r13,r13,16
   21c0c:	63000404 	addi	r12,r12,16
   21c10:	5ac00404 	addi	r11,r11,16
   21c14:	52800404 	addi	r10,r10,16
   21c18:	4a400404 	addi	r9,r9,16
   21c1c:	1c3fef1e 	bne	r3,r16,21bdc <__alt_data_end+0xfffe1bdc>
   21c20:	89c00044 	addi	r7,r17,1
   21c24:	380e913a 	slli	r7,r7,4
   21c28:	310003cc 	andi	r4,r6,15
   21c2c:	02c000c4 	movi	r11,3
   21c30:	11c7883a 	add	r3,r2,r7
   21c34:	29cb883a 	add	r5,r5,r7
   21c38:	5900212e 	bgeu	r11,r4,21cc0 <memcpy+0x140>
   21c3c:	1813883a 	mov	r9,r3
   21c40:	2811883a 	mov	r8,r5
   21c44:	200f883a 	mov	r7,r4
   21c48:	42800017 	ldw	r10,0(r8)
   21c4c:	4a400104 	addi	r9,r9,4
   21c50:	39ffff04 	addi	r7,r7,-4
   21c54:	4abfff15 	stw	r10,-4(r9)
   21c58:	42000104 	addi	r8,r8,4
   21c5c:	59fffa36 	bltu	r11,r7,21c48 <__alt_data_end+0xfffe1c48>
   21c60:	213fff04 	addi	r4,r4,-4
   21c64:	2008d0ba 	srli	r4,r4,2
   21c68:	318000cc 	andi	r6,r6,3
   21c6c:	21000044 	addi	r4,r4,1
   21c70:	2109883a 	add	r4,r4,r4
   21c74:	2109883a 	add	r4,r4,r4
   21c78:	1907883a 	add	r3,r3,r4
   21c7c:	290b883a 	add	r5,r5,r4
   21c80:	30000626 	beq	r6,zero,21c9c <memcpy+0x11c>
   21c84:	198d883a 	add	r6,r3,r6
   21c88:	29c00003 	ldbu	r7,0(r5)
   21c8c:	18c00044 	addi	r3,r3,1
   21c90:	29400044 	addi	r5,r5,1
   21c94:	19ffffc5 	stb	r7,-1(r3)
   21c98:	19bffb1e 	bne	r3,r6,21c88 <__alt_data_end+0xfffe1c88>
   21c9c:	dfc00217 	ldw	ra,8(sp)
   21ca0:	dc400117 	ldw	r17,4(sp)
   21ca4:	dc000017 	ldw	r16,0(sp)
   21ca8:	dec00304 	addi	sp,sp,12
   21cac:	f800283a 	ret
   21cb0:	2007883a 	mov	r3,r4
   21cb4:	003ff206 	br	21c80 <__alt_data_end+0xfffe1c80>
   21cb8:	2007883a 	mov	r3,r4
   21cbc:	003ff106 	br	21c84 <__alt_data_end+0xfffe1c84>
   21cc0:	200d883a 	mov	r6,r4
   21cc4:	003fee06 	br	21c80 <__alt_data_end+0xfffe1c80>

00021cc8 <memset>:
   21cc8:	20c000cc 	andi	r3,r4,3
   21ccc:	2005883a 	mov	r2,r4
   21cd0:	18004426 	beq	r3,zero,21de4 <memset+0x11c>
   21cd4:	31ffffc4 	addi	r7,r6,-1
   21cd8:	30004026 	beq	r6,zero,21ddc <memset+0x114>
   21cdc:	2813883a 	mov	r9,r5
   21ce0:	200d883a 	mov	r6,r4
   21ce4:	2007883a 	mov	r3,r4
   21ce8:	00000406 	br	21cfc <memset+0x34>
   21cec:	3a3fffc4 	addi	r8,r7,-1
   21cf0:	31800044 	addi	r6,r6,1
   21cf4:	38003926 	beq	r7,zero,21ddc <memset+0x114>
   21cf8:	400f883a 	mov	r7,r8
   21cfc:	18c00044 	addi	r3,r3,1
   21d00:	32400005 	stb	r9,0(r6)
   21d04:	1a0000cc 	andi	r8,r3,3
   21d08:	403ff81e 	bne	r8,zero,21cec <__alt_data_end+0xfffe1cec>
   21d0c:	010000c4 	movi	r4,3
   21d10:	21c02d2e 	bgeu	r4,r7,21dc8 <memset+0x100>
   21d14:	29003fcc 	andi	r4,r5,255
   21d18:	200c923a 	slli	r6,r4,8
   21d1c:	3108b03a 	or	r4,r6,r4
   21d20:	200c943a 	slli	r6,r4,16
   21d24:	218cb03a 	or	r6,r4,r6
   21d28:	010003c4 	movi	r4,15
   21d2c:	21c0182e 	bgeu	r4,r7,21d90 <memset+0xc8>
   21d30:	3b3ffc04 	addi	r12,r7,-16
   21d34:	6018d13a 	srli	r12,r12,4
   21d38:	1a000104 	addi	r8,r3,4
   21d3c:	1ac00204 	addi	r11,r3,8
   21d40:	6008913a 	slli	r4,r12,4
   21d44:	1a800304 	addi	r10,r3,12
   21d48:	1813883a 	mov	r9,r3
   21d4c:	21000504 	addi	r4,r4,20
   21d50:	1909883a 	add	r4,r3,r4
   21d54:	49800015 	stw	r6,0(r9)
   21d58:	41800015 	stw	r6,0(r8)
   21d5c:	59800015 	stw	r6,0(r11)
   21d60:	51800015 	stw	r6,0(r10)
   21d64:	42000404 	addi	r8,r8,16
   21d68:	4a400404 	addi	r9,r9,16
   21d6c:	5ac00404 	addi	r11,r11,16
   21d70:	52800404 	addi	r10,r10,16
   21d74:	413ff71e 	bne	r8,r4,21d54 <__alt_data_end+0xfffe1d54>
   21d78:	63000044 	addi	r12,r12,1
   21d7c:	6018913a 	slli	r12,r12,4
   21d80:	39c003cc 	andi	r7,r7,15
   21d84:	010000c4 	movi	r4,3
   21d88:	1b07883a 	add	r3,r3,r12
   21d8c:	21c00e2e 	bgeu	r4,r7,21dc8 <memset+0x100>
   21d90:	1813883a 	mov	r9,r3
   21d94:	3811883a 	mov	r8,r7
   21d98:	010000c4 	movi	r4,3
   21d9c:	49800015 	stw	r6,0(r9)
   21da0:	423fff04 	addi	r8,r8,-4
   21da4:	4a400104 	addi	r9,r9,4
   21da8:	223ffc36 	bltu	r4,r8,21d9c <__alt_data_end+0xfffe1d9c>
   21dac:	393fff04 	addi	r4,r7,-4
   21db0:	2008d0ba 	srli	r4,r4,2
   21db4:	39c000cc 	andi	r7,r7,3
   21db8:	21000044 	addi	r4,r4,1
   21dbc:	2109883a 	add	r4,r4,r4
   21dc0:	2109883a 	add	r4,r4,r4
   21dc4:	1907883a 	add	r3,r3,r4
   21dc8:	38000526 	beq	r7,zero,21de0 <memset+0x118>
   21dcc:	19cf883a 	add	r7,r3,r7
   21dd0:	19400005 	stb	r5,0(r3)
   21dd4:	18c00044 	addi	r3,r3,1
   21dd8:	38fffd1e 	bne	r7,r3,21dd0 <__alt_data_end+0xfffe1dd0>
   21ddc:	f800283a 	ret
   21de0:	f800283a 	ret
   21de4:	2007883a 	mov	r3,r4
   21de8:	300f883a 	mov	r7,r6
   21dec:	003fc706 	br	21d0c <__alt_data_end+0xfffe1d0c>

00021df0 <_open_r>:
   21df0:	defffd04 	addi	sp,sp,-12
   21df4:	2805883a 	mov	r2,r5
   21df8:	dc000015 	stw	r16,0(sp)
   21dfc:	040000f4 	movhi	r16,3
   21e00:	dc400115 	stw	r17,4(sp)
   21e04:	300b883a 	mov	r5,r6
   21e08:	8411f104 	addi	r16,r16,18372
   21e0c:	2023883a 	mov	r17,r4
   21e10:	380d883a 	mov	r6,r7
   21e14:	1009883a 	mov	r4,r2
   21e18:	dfc00215 	stw	ra,8(sp)
   21e1c:	80000015 	stw	zero,0(r16)
   21e20:	002e0840 	call	2e084 <open>
   21e24:	00ffffc4 	movi	r3,-1
   21e28:	10c00526 	beq	r2,r3,21e40 <_open_r+0x50>
   21e2c:	dfc00217 	ldw	ra,8(sp)
   21e30:	dc400117 	ldw	r17,4(sp)
   21e34:	dc000017 	ldw	r16,0(sp)
   21e38:	dec00304 	addi	sp,sp,12
   21e3c:	f800283a 	ret
   21e40:	80c00017 	ldw	r3,0(r16)
   21e44:	183ff926 	beq	r3,zero,21e2c <__alt_data_end+0xfffe1e2c>
   21e48:	88c00015 	stw	r3,0(r17)
   21e4c:	003ff706 	br	21e2c <__alt_data_end+0xfffe1e2c>

00021e50 <_printf_r>:
   21e50:	defffd04 	addi	sp,sp,-12
   21e54:	2805883a 	mov	r2,r5
   21e58:	dfc00015 	stw	ra,0(sp)
   21e5c:	d9800115 	stw	r6,4(sp)
   21e60:	d9c00215 	stw	r7,8(sp)
   21e64:	21400217 	ldw	r5,8(r4)
   21e68:	d9c00104 	addi	r7,sp,4
   21e6c:	100d883a 	mov	r6,r2
   21e70:	00225fc0 	call	225fc <___vfprintf_internal_r>
   21e74:	dfc00017 	ldw	ra,0(sp)
   21e78:	dec00304 	addi	sp,sp,12
   21e7c:	f800283a 	ret

00021e80 <printf>:
   21e80:	defffc04 	addi	sp,sp,-16
   21e84:	dfc00015 	stw	ra,0(sp)
   21e88:	d9400115 	stw	r5,4(sp)
   21e8c:	d9800215 	stw	r6,8(sp)
   21e90:	d9c00315 	stw	r7,12(sp)
   21e94:	008000f4 	movhi	r2,3
   21e98:	108af504 	addi	r2,r2,11220
   21e9c:	10800017 	ldw	r2,0(r2)
   21ea0:	200b883a 	mov	r5,r4
   21ea4:	d9800104 	addi	r6,sp,4
   21ea8:	11000217 	ldw	r4,8(r2)
   21eac:	00247f40 	call	247f4 <__vfprintf_internal>
   21eb0:	dfc00017 	ldw	ra,0(sp)
   21eb4:	dec00404 	addi	sp,sp,16
   21eb8:	f800283a 	ret

00021ebc <_puts_r>:
   21ebc:	defff604 	addi	sp,sp,-40
   21ec0:	dc000715 	stw	r16,28(sp)
   21ec4:	2021883a 	mov	r16,r4
   21ec8:	2809883a 	mov	r4,r5
   21ecc:	dc400815 	stw	r17,32(sp)
   21ed0:	dfc00915 	stw	ra,36(sp)
   21ed4:	2823883a 	mov	r17,r5
   21ed8:	00223100 	call	22310 <strlen>
   21edc:	10c00044 	addi	r3,r2,1
   21ee0:	d8800115 	stw	r2,4(sp)
   21ee4:	008000f4 	movhi	r2,3
   21ee8:	10835704 	addi	r2,r2,3420
   21eec:	d8800215 	stw	r2,8(sp)
   21ef0:	00800044 	movi	r2,1
   21ef4:	d8800315 	stw	r2,12(sp)
   21ef8:	00800084 	movi	r2,2
   21efc:	dc400015 	stw	r17,0(sp)
   21f00:	d8c00615 	stw	r3,24(sp)
   21f04:	dec00415 	stw	sp,16(sp)
   21f08:	d8800515 	stw	r2,20(sp)
   21f0c:	80000226 	beq	r16,zero,21f18 <_puts_r+0x5c>
   21f10:	80800e17 	ldw	r2,56(r16)
   21f14:	10001426 	beq	r2,zero,21f68 <_puts_r+0xac>
   21f18:	81400217 	ldw	r5,8(r16)
   21f1c:	2880030b 	ldhu	r2,12(r5)
   21f20:	10c8000c 	andi	r3,r2,8192
   21f24:	1800061e 	bne	r3,zero,21f40 <_puts_r+0x84>
   21f28:	29001917 	ldw	r4,100(r5)
   21f2c:	00f7ffc4 	movi	r3,-8193
   21f30:	10880014 	ori	r2,r2,8192
   21f34:	20c6703a 	and	r3,r4,r3
   21f38:	2880030d 	sth	r2,12(r5)
   21f3c:	28c01915 	stw	r3,100(r5)
   21f40:	d9800404 	addi	r6,sp,16
   21f44:	8009883a 	mov	r4,r16
   21f48:	0026be80 	call	26be8 <__sfvwrite_r>
   21f4c:	1000091e 	bne	r2,zero,21f74 <_puts_r+0xb8>
   21f50:	00800284 	movi	r2,10
   21f54:	dfc00917 	ldw	ra,36(sp)
   21f58:	dc400817 	ldw	r17,32(sp)
   21f5c:	dc000717 	ldw	r16,28(sp)
   21f60:	dec00a04 	addi	sp,sp,40
   21f64:	f800283a 	ret
   21f68:	8009883a 	mov	r4,r16
   21f6c:	00208c80 	call	208c8 <__sinit>
   21f70:	003fe906 	br	21f18 <__alt_data_end+0xfffe1f18>
   21f74:	00bfffc4 	movi	r2,-1
   21f78:	003ff606 	br	21f54 <__alt_data_end+0xfffe1f54>

00021f7c <puts>:
   21f7c:	008000f4 	movhi	r2,3
   21f80:	108af504 	addi	r2,r2,11220
   21f84:	200b883a 	mov	r5,r4
   21f88:	11000017 	ldw	r4,0(r2)
   21f8c:	0021ebc1 	jmpi	21ebc <_puts_r>

00021f90 <lflush>:
   21f90:	2080030b 	ldhu	r2,12(r4)
   21f94:	00c00244 	movi	r3,9
   21f98:	1080024c 	andi	r2,r2,9
   21f9c:	10c00226 	beq	r2,r3,21fa8 <lflush+0x18>
   21fa0:	0005883a 	mov	r2,zero
   21fa4:	f800283a 	ret
   21fa8:	00266d81 	jmpi	266d8 <fflush>

00021fac <__srefill_r>:
   21fac:	defffc04 	addi	sp,sp,-16
   21fb0:	dc400115 	stw	r17,4(sp)
   21fb4:	dc000015 	stw	r16,0(sp)
   21fb8:	dfc00315 	stw	ra,12(sp)
   21fbc:	dc800215 	stw	r18,8(sp)
   21fc0:	2023883a 	mov	r17,r4
   21fc4:	2821883a 	mov	r16,r5
   21fc8:	20000226 	beq	r4,zero,21fd4 <__srefill_r+0x28>
   21fcc:	20800e17 	ldw	r2,56(r4)
   21fd0:	10003c26 	beq	r2,zero,220c4 <__srefill_r+0x118>
   21fd4:	80c0030b 	ldhu	r3,12(r16)
   21fd8:	1908000c 	andi	r4,r3,8192
   21fdc:	1805883a 	mov	r2,r3
   21fe0:	2000071e 	bne	r4,zero,22000 <__srefill_r+0x54>
   21fe4:	81001917 	ldw	r4,100(r16)
   21fe8:	18880014 	ori	r2,r3,8192
   21fec:	00f7ffc4 	movi	r3,-8193
   21ff0:	20c8703a 	and	r4,r4,r3
   21ff4:	8080030d 	sth	r2,12(r16)
   21ff8:	1007883a 	mov	r3,r2
   21ffc:	81001915 	stw	r4,100(r16)
   22000:	80000115 	stw	zero,4(r16)
   22004:	1100080c 	andi	r4,r2,32
   22008:	2000571e 	bne	r4,zero,22168 <__srefill_r+0x1bc>
   2200c:	1100010c 	andi	r4,r2,4
   22010:	20001f26 	beq	r4,zero,22090 <__srefill_r+0xe4>
   22014:	81400c17 	ldw	r5,48(r16)
   22018:	28000826 	beq	r5,zero,2203c <__srefill_r+0x90>
   2201c:	80801004 	addi	r2,r16,64
   22020:	28800226 	beq	r5,r2,2202c <__srefill_r+0x80>
   22024:	8809883a 	mov	r4,r17
   22028:	00268d80 	call	268d8 <_free_r>
   2202c:	80800f17 	ldw	r2,60(r16)
   22030:	80000c15 	stw	zero,48(r16)
   22034:	80800115 	stw	r2,4(r16)
   22038:	1000391e 	bne	r2,zero,22120 <__srefill_r+0x174>
   2203c:	80800417 	ldw	r2,16(r16)
   22040:	10004b26 	beq	r2,zero,22170 <__srefill_r+0x1c4>
   22044:	8480030b 	ldhu	r18,12(r16)
   22048:	908000cc 	andi	r2,r18,3
   2204c:	10001f1e 	bne	r2,zero,220cc <__srefill_r+0x120>
   22050:	81800417 	ldw	r6,16(r16)
   22054:	80800817 	ldw	r2,32(r16)
   22058:	81c00517 	ldw	r7,20(r16)
   2205c:	81400717 	ldw	r5,28(r16)
   22060:	81800015 	stw	r6,0(r16)
   22064:	8809883a 	mov	r4,r17
   22068:	103ee83a 	callr	r2
   2206c:	80800115 	stw	r2,4(r16)
   22070:	00800e0e 	bge	zero,r2,220ac <__srefill_r+0x100>
   22074:	0005883a 	mov	r2,zero
   22078:	dfc00317 	ldw	ra,12(sp)
   2207c:	dc800217 	ldw	r18,8(sp)
   22080:	dc400117 	ldw	r17,4(sp)
   22084:	dc000017 	ldw	r16,0(sp)
   22088:	dec00404 	addi	sp,sp,16
   2208c:	f800283a 	ret
   22090:	1100040c 	andi	r4,r2,16
   22094:	20003026 	beq	r4,zero,22158 <__srefill_r+0x1ac>
   22098:	1080020c 	andi	r2,r2,8
   2209c:	1000241e 	bne	r2,zero,22130 <__srefill_r+0x184>
   220a0:	18c00114 	ori	r3,r3,4
   220a4:	80c0030d 	sth	r3,12(r16)
   220a8:	003fe406 	br	2203c <__alt_data_end+0xfffe203c>
   220ac:	80c0030b 	ldhu	r3,12(r16)
   220b0:	1000161e 	bne	r2,zero,2210c <__srefill_r+0x160>
   220b4:	18c00814 	ori	r3,r3,32
   220b8:	00bfffc4 	movi	r2,-1
   220bc:	80c0030d 	sth	r3,12(r16)
   220c0:	003fed06 	br	22078 <__alt_data_end+0xfffe2078>
   220c4:	00208c80 	call	208c8 <__sinit>
   220c8:	003fc206 	br	21fd4 <__alt_data_end+0xfffe1fd4>
   220cc:	008000f4 	movhi	r2,3
   220d0:	108af404 	addi	r2,r2,11216
   220d4:	11000017 	ldw	r4,0(r2)
   220d8:	014000b4 	movhi	r5,2
   220dc:	00800044 	movi	r2,1
   220e0:	2947e404 	addi	r5,r5,8080
   220e4:	8080030d 	sth	r2,12(r16)
   220e8:	0020f4c0 	call	20f4c <_fwalk>
   220ec:	00800244 	movi	r2,9
   220f0:	8480030d 	sth	r18,12(r16)
   220f4:	9480024c 	andi	r18,r18,9
   220f8:	90bfd51e 	bne	r18,r2,22050 <__alt_data_end+0xfffe2050>
   220fc:	800b883a 	mov	r5,r16
   22100:	8809883a 	mov	r4,r17
   22104:	00264600 	call	26460 <__sflush_r>
   22108:	003fd106 	br	22050 <__alt_data_end+0xfffe2050>
   2210c:	18c01014 	ori	r3,r3,64
   22110:	80000115 	stw	zero,4(r16)
   22114:	00bfffc4 	movi	r2,-1
   22118:	80c0030d 	sth	r3,12(r16)
   2211c:	003fd606 	br	22078 <__alt_data_end+0xfffe2078>
   22120:	80c00e17 	ldw	r3,56(r16)
   22124:	0005883a 	mov	r2,zero
   22128:	80c00015 	stw	r3,0(r16)
   2212c:	003fd206 	br	22078 <__alt_data_end+0xfffe2078>
   22130:	800b883a 	mov	r5,r16
   22134:	8809883a 	mov	r4,r17
   22138:	002667c0 	call	2667c <_fflush_r>
   2213c:	10000a1e 	bne	r2,zero,22168 <__srefill_r+0x1bc>
   22140:	8080030b 	ldhu	r2,12(r16)
   22144:	00fffdc4 	movi	r3,-9
   22148:	80000215 	stw	zero,8(r16)
   2214c:	1886703a 	and	r3,r3,r2
   22150:	80000615 	stw	zero,24(r16)
   22154:	003fd206 	br	220a0 <__alt_data_end+0xfffe20a0>
   22158:	00800244 	movi	r2,9
   2215c:	88800015 	stw	r2,0(r17)
   22160:	18c01014 	ori	r3,r3,64
   22164:	80c0030d 	sth	r3,12(r16)
   22168:	00bfffc4 	movi	r2,-1
   2216c:	003fc206 	br	22078 <__alt_data_end+0xfffe2078>
   22170:	800b883a 	mov	r5,r16
   22174:	8809883a 	mov	r4,r17
   22178:	00210d40 	call	210d4 <__smakebuf_r>
   2217c:	003fb106 	br	22044 <__alt_data_end+0xfffe2044>

00022180 <_sbrk_r>:
   22180:	defffd04 	addi	sp,sp,-12
   22184:	dc000015 	stw	r16,0(sp)
   22188:	040000f4 	movhi	r16,3
   2218c:	dc400115 	stw	r17,4(sp)
   22190:	8411f104 	addi	r16,r16,18372
   22194:	2023883a 	mov	r17,r4
   22198:	2809883a 	mov	r4,r5
   2219c:	dfc00215 	stw	ra,8(sp)
   221a0:	80000015 	stw	zero,0(r16)
   221a4:	002e3740 	call	2e374 <sbrk>
   221a8:	00ffffc4 	movi	r3,-1
   221ac:	10c00526 	beq	r2,r3,221c4 <_sbrk_r+0x44>
   221b0:	dfc00217 	ldw	ra,8(sp)
   221b4:	dc400117 	ldw	r17,4(sp)
   221b8:	dc000017 	ldw	r16,0(sp)
   221bc:	dec00304 	addi	sp,sp,12
   221c0:	f800283a 	ret
   221c4:	80c00017 	ldw	r3,0(r16)
   221c8:	183ff926 	beq	r3,zero,221b0 <__alt_data_end+0xfffe21b0>
   221cc:	88c00015 	stw	r3,0(r17)
   221d0:	003ff706 	br	221b0 <__alt_data_end+0xfffe21b0>

000221d4 <__sread>:
   221d4:	defffe04 	addi	sp,sp,-8
   221d8:	dc000015 	stw	r16,0(sp)
   221dc:	2821883a 	mov	r16,r5
   221e0:	2940038f 	ldh	r5,14(r5)
   221e4:	dfc00115 	stw	ra,4(sp)
   221e8:	002838c0 	call	2838c <_read_r>
   221ec:	10000716 	blt	r2,zero,2220c <__sread+0x38>
   221f0:	80c01417 	ldw	r3,80(r16)
   221f4:	1887883a 	add	r3,r3,r2
   221f8:	80c01415 	stw	r3,80(r16)
   221fc:	dfc00117 	ldw	ra,4(sp)
   22200:	dc000017 	ldw	r16,0(sp)
   22204:	dec00204 	addi	sp,sp,8
   22208:	f800283a 	ret
   2220c:	80c0030b 	ldhu	r3,12(r16)
   22210:	18fbffcc 	andi	r3,r3,61439
   22214:	80c0030d 	sth	r3,12(r16)
   22218:	dfc00117 	ldw	ra,4(sp)
   2221c:	dc000017 	ldw	r16,0(sp)
   22220:	dec00204 	addi	sp,sp,8
   22224:	f800283a 	ret

00022228 <__seofread>:
   22228:	0005883a 	mov	r2,zero
   2222c:	f800283a 	ret

00022230 <__swrite>:
   22230:	2880030b 	ldhu	r2,12(r5)
   22234:	defffb04 	addi	sp,sp,-20
   22238:	dcc00315 	stw	r19,12(sp)
   2223c:	dc800215 	stw	r18,8(sp)
   22240:	dc400115 	stw	r17,4(sp)
   22244:	dc000015 	stw	r16,0(sp)
   22248:	dfc00415 	stw	ra,16(sp)
   2224c:	10c0400c 	andi	r3,r2,256
   22250:	2821883a 	mov	r16,r5
   22254:	2023883a 	mov	r17,r4
   22258:	3025883a 	mov	r18,r6
   2225c:	3827883a 	mov	r19,r7
   22260:	18000526 	beq	r3,zero,22278 <__swrite+0x48>
   22264:	2940038f 	ldh	r5,14(r5)
   22268:	01c00084 	movi	r7,2
   2226c:	000d883a 	mov	r6,zero
   22270:	00271d40 	call	271d4 <_lseek_r>
   22274:	8080030b 	ldhu	r2,12(r16)
   22278:	8140038f 	ldh	r5,14(r16)
   2227c:	10bbffcc 	andi	r2,r2,61439
   22280:	980f883a 	mov	r7,r19
   22284:	900d883a 	mov	r6,r18
   22288:	8809883a 	mov	r4,r17
   2228c:	8080030d 	sth	r2,12(r16)
   22290:	dfc00417 	ldw	ra,16(sp)
   22294:	dcc00317 	ldw	r19,12(sp)
   22298:	dc800217 	ldw	r18,8(sp)
   2229c:	dc400117 	ldw	r17,4(sp)
   222a0:	dc000017 	ldw	r16,0(sp)
   222a4:	dec00504 	addi	sp,sp,20
   222a8:	00248cc1 	jmpi	248cc <_write_r>

000222ac <__sseek>:
   222ac:	defffe04 	addi	sp,sp,-8
   222b0:	dc000015 	stw	r16,0(sp)
   222b4:	2821883a 	mov	r16,r5
   222b8:	2940038f 	ldh	r5,14(r5)
   222bc:	dfc00115 	stw	ra,4(sp)
   222c0:	00271d40 	call	271d4 <_lseek_r>
   222c4:	00ffffc4 	movi	r3,-1
   222c8:	10c00826 	beq	r2,r3,222ec <__sseek+0x40>
   222cc:	80c0030b 	ldhu	r3,12(r16)
   222d0:	80801415 	stw	r2,80(r16)
   222d4:	18c40014 	ori	r3,r3,4096
   222d8:	80c0030d 	sth	r3,12(r16)
   222dc:	dfc00117 	ldw	ra,4(sp)
   222e0:	dc000017 	ldw	r16,0(sp)
   222e4:	dec00204 	addi	sp,sp,8
   222e8:	f800283a 	ret
   222ec:	80c0030b 	ldhu	r3,12(r16)
   222f0:	18fbffcc 	andi	r3,r3,61439
   222f4:	80c0030d 	sth	r3,12(r16)
   222f8:	dfc00117 	ldw	ra,4(sp)
   222fc:	dc000017 	ldw	r16,0(sp)
   22300:	dec00204 	addi	sp,sp,8
   22304:	f800283a 	ret

00022308 <__sclose>:
   22308:	2940038f 	ldh	r5,14(r5)
   2230c:	0024a801 	jmpi	24a80 <_close_r>

00022310 <strlen>:
   22310:	208000cc 	andi	r2,r4,3
   22314:	10002026 	beq	r2,zero,22398 <strlen+0x88>
   22318:	20800007 	ldb	r2,0(r4)
   2231c:	10002026 	beq	r2,zero,223a0 <strlen+0x90>
   22320:	2005883a 	mov	r2,r4
   22324:	00000206 	br	22330 <strlen+0x20>
   22328:	10c00007 	ldb	r3,0(r2)
   2232c:	18001826 	beq	r3,zero,22390 <strlen+0x80>
   22330:	10800044 	addi	r2,r2,1
   22334:	10c000cc 	andi	r3,r2,3
   22338:	183ffb1e 	bne	r3,zero,22328 <__alt_data_end+0xfffe2328>
   2233c:	10c00017 	ldw	r3,0(r2)
   22340:	01ffbff4 	movhi	r7,65279
   22344:	39ffbfc4 	addi	r7,r7,-257
   22348:	00ca303a 	nor	r5,zero,r3
   2234c:	01a02074 	movhi	r6,32897
   22350:	19c7883a 	add	r3,r3,r7
   22354:	31a02004 	addi	r6,r6,-32640
   22358:	1946703a 	and	r3,r3,r5
   2235c:	1986703a 	and	r3,r3,r6
   22360:	1800091e 	bne	r3,zero,22388 <strlen+0x78>
   22364:	10800104 	addi	r2,r2,4
   22368:	10c00017 	ldw	r3,0(r2)
   2236c:	19cb883a 	add	r5,r3,r7
   22370:	00c6303a 	nor	r3,zero,r3
   22374:	28c6703a 	and	r3,r5,r3
   22378:	1986703a 	and	r3,r3,r6
   2237c:	183ff926 	beq	r3,zero,22364 <__alt_data_end+0xfffe2364>
   22380:	00000106 	br	22388 <strlen+0x78>
   22384:	10800044 	addi	r2,r2,1
   22388:	10c00007 	ldb	r3,0(r2)
   2238c:	183ffd1e 	bne	r3,zero,22384 <__alt_data_end+0xfffe2384>
   22390:	1105c83a 	sub	r2,r2,r4
   22394:	f800283a 	ret
   22398:	2005883a 	mov	r2,r4
   2239c:	003fe706 	br	2233c <__alt_data_end+0xfffe233c>
   223a0:	0005883a 	mov	r2,zero
   223a4:	f800283a 	ret

000223a8 <_strtol_r>:
   223a8:	008000f4 	movhi	r2,3
   223ac:	defff404 	addi	sp,sp,-48
   223b0:	108af304 	addi	r2,r2,11212
   223b4:	dd400715 	stw	r21,28(sp)
   223b8:	15400017 	ldw	r21,0(r2)
   223bc:	dd800815 	stw	r22,32(sp)
   223c0:	dd000615 	stw	r20,24(sp)
   223c4:	dcc00515 	stw	r19,20(sp)
   223c8:	d9000015 	stw	r4,0(sp)
   223cc:	dfc00b15 	stw	ra,44(sp)
   223d0:	df000a15 	stw	fp,40(sp)
   223d4:	ddc00915 	stw	r23,36(sp)
   223d8:	dc800415 	stw	r18,16(sp)
   223dc:	dc400315 	stw	r17,12(sp)
   223e0:	dc000215 	stw	r16,8(sp)
   223e4:	2829883a 	mov	r20,r5
   223e8:	3027883a 	mov	r19,r6
   223ec:	382d883a 	mov	r22,r7
   223f0:	2809883a 	mov	r4,r5
   223f4:	24000003 	ldbu	r16,0(r4)
   223f8:	24400044 	addi	r17,r4,1
   223fc:	2007883a 	mov	r3,r4
   22400:	ac05883a 	add	r2,r21,r16
   22404:	10800043 	ldbu	r2,1(r2)
   22408:	8809883a 	mov	r4,r17
   2240c:	1080020c 	andi	r2,r2,8
   22410:	103ff81e 	bne	r2,zero,223f4 <__alt_data_end+0xfffe23f4>
   22414:	00800b44 	movi	r2,45
   22418:	80805826 	beq	r16,r2,2257c <_strtol_r+0x1d4>
   2241c:	00800ac4 	movi	r2,43
   22420:	80805a26 	beq	r16,r2,2258c <_strtol_r+0x1e4>
   22424:	0039883a 	mov	fp,zero
   22428:	b0004426 	beq	r22,zero,2253c <_strtol_r+0x194>
   2242c:	00800404 	movi	r2,16
   22430:	b0806026 	beq	r22,r2,225b4 <_strtol_r+0x20c>
   22434:	b02f883a 	mov	r23,r22
   22438:	00a00034 	movhi	r2,32768
   2243c:	e025003a 	cmpeq	r18,fp,zero
   22440:	14a5c83a 	sub	r18,r2,r18
   22444:	b80b883a 	mov	r5,r23
   22448:	9009883a 	mov	r4,r18
   2244c:	002b3000 	call	2b300 <__umodsi3>
   22450:	b80b883a 	mov	r5,r23
   22454:	9009883a 	mov	r4,r18
   22458:	d8800115 	stw	r2,4(sp)
   2245c:	002b29c0 	call	2b29c <__udivsi3>
   22460:	ac07883a 	add	r3,r21,r16
   22464:	18c00043 	ldbu	r3,1(r3)
   22468:	880b883a 	mov	r5,r17
   2246c:	000d883a 	mov	r6,zero
   22470:	1a00010c 	andi	r8,r3,4
   22474:	0009883a 	mov	r4,zero
   22478:	02800044 	movi	r10,1
   2247c:	027fffc4 	movi	r9,-1
   22480:	d9c00117 	ldw	r7,4(sp)
   22484:	40000e26 	beq	r8,zero,224c0 <_strtol_r+0x118>
   22488:	843ff404 	addi	r16,r16,-48
   2248c:	8580120e 	bge	r16,r22,224d8 <_strtol_r+0x130>
   22490:	32400526 	beq	r6,r9,224a8 <_strtol_r+0x100>
   22494:	11002536 	bltu	r2,r4,2252c <_strtol_r+0x184>
   22498:	20802326 	beq	r4,r2,22528 <_strtol_r+0x180>
   2249c:	25c9383a 	mul	r4,r4,r23
   224a0:	01800044 	movi	r6,1
   224a4:	8109883a 	add	r4,r16,r4
   224a8:	2c000003 	ldbu	r16,0(r5)
   224ac:	29400044 	addi	r5,r5,1
   224b0:	ac07883a 	add	r3,r21,r16
   224b4:	18c00043 	ldbu	r3,1(r3)
   224b8:	1a00010c 	andi	r8,r3,4
   224bc:	403ff21e 	bne	r8,zero,22488 <__alt_data_end+0xfffe2488>
   224c0:	18c000cc 	andi	r3,r3,3
   224c4:	18000426 	beq	r3,zero,224d8 <_strtol_r+0x130>
   224c8:	1a801a26 	beq	r3,r10,22534 <_strtol_r+0x18c>
   224cc:	00c015c4 	movi	r3,87
   224d0:	80e1c83a 	sub	r16,r16,r3
   224d4:	85bfee16 	blt	r16,r22,22490 <__alt_data_end+0xfffe2490>
   224d8:	00bfffc4 	movi	r2,-1
   224dc:	30801e26 	beq	r6,r2,22558 <_strtol_r+0x1b0>
   224e0:	e0001b1e 	bne	fp,zero,22550 <_strtol_r+0x1a8>
   224e4:	2005883a 	mov	r2,r4
   224e8:	98000326 	beq	r19,zero,224f8 <_strtol_r+0x150>
   224ec:	3000211e 	bne	r6,zero,22574 <_strtol_r+0x1cc>
   224f0:	a00b883a 	mov	r5,r20
   224f4:	99400015 	stw	r5,0(r19)
   224f8:	dfc00b17 	ldw	ra,44(sp)
   224fc:	df000a17 	ldw	fp,40(sp)
   22500:	ddc00917 	ldw	r23,36(sp)
   22504:	dd800817 	ldw	r22,32(sp)
   22508:	dd400717 	ldw	r21,28(sp)
   2250c:	dd000617 	ldw	r20,24(sp)
   22510:	dcc00517 	ldw	r19,20(sp)
   22514:	dc800417 	ldw	r18,16(sp)
   22518:	dc400317 	ldw	r17,12(sp)
   2251c:	dc000217 	ldw	r16,8(sp)
   22520:	dec00c04 	addi	sp,sp,48
   22524:	f800283a 	ret
   22528:	3c3fdc0e 	bge	r7,r16,2249c <__alt_data_end+0xfffe249c>
   2252c:	01bfffc4 	movi	r6,-1
   22530:	003fdd06 	br	224a8 <__alt_data_end+0xfffe24a8>
   22534:	00c00dc4 	movi	r3,55
   22538:	003fe506 	br	224d0 <__alt_data_end+0xfffe24d0>
   2253c:	00800c04 	movi	r2,48
   22540:	80801626 	beq	r16,r2,2259c <_strtol_r+0x1f4>
   22544:	05800284 	movi	r22,10
   22548:	b02f883a 	mov	r23,r22
   2254c:	003fba06 	br	22438 <__alt_data_end+0xfffe2438>
   22550:	0109c83a 	sub	r4,zero,r4
   22554:	003fe306 	br	224e4 <__alt_data_end+0xfffe24e4>
   22558:	d9000017 	ldw	r4,0(sp)
   2255c:	00c00884 	movi	r3,34
   22560:	e005003a 	cmpeq	r2,fp,zero
   22564:	20c00015 	stw	r3,0(r4)
   22568:	00e00034 	movhi	r3,32768
   2256c:	1885c83a 	sub	r2,r3,r2
   22570:	983fe126 	beq	r19,zero,224f8 <__alt_data_end+0xfffe24f8>
   22574:	297fffc4 	addi	r5,r5,-1
   22578:	003fde06 	br	224f4 <__alt_data_end+0xfffe24f4>
   2257c:	1c400084 	addi	r17,r3,2
   22580:	1c000043 	ldbu	r16,1(r3)
   22584:	07000044 	movi	fp,1
   22588:	003fa706 	br	22428 <__alt_data_end+0xfffe2428>
   2258c:	1c400084 	addi	r17,r3,2
   22590:	1c000043 	ldbu	r16,1(r3)
   22594:	0039883a 	mov	fp,zero
   22598:	003fa306 	br	22428 <__alt_data_end+0xfffe2428>
   2259c:	88800003 	ldbu	r2,0(r17)
   225a0:	00c01604 	movi	r3,88
   225a4:	108037cc 	andi	r2,r2,223
   225a8:	10c00826 	beq	r2,r3,225cc <_strtol_r+0x224>
   225ac:	05800204 	movi	r22,8
   225b0:	003fa006 	br	22434 <__alt_data_end+0xfffe2434>
   225b4:	00800c04 	movi	r2,48
   225b8:	80bf9e1e 	bne	r16,r2,22434 <__alt_data_end+0xfffe2434>
   225bc:	88800003 	ldbu	r2,0(r17)
   225c0:	00c01604 	movi	r3,88
   225c4:	108037cc 	andi	r2,r2,223
   225c8:	10ff9a1e 	bne	r2,r3,22434 <__alt_data_end+0xfffe2434>
   225cc:	05c00404 	movi	r23,16
   225d0:	8c000043 	ldbu	r16,1(r17)
   225d4:	b82d883a 	mov	r22,r23
   225d8:	8c400084 	addi	r17,r17,2
   225dc:	003f9606 	br	22438 <__alt_data_end+0xfffe2438>

000225e0 <strtol>:
   225e0:	008000f4 	movhi	r2,3
   225e4:	108af504 	addi	r2,r2,11220
   225e8:	300f883a 	mov	r7,r6
   225ec:	280d883a 	mov	r6,r5
   225f0:	200b883a 	mov	r5,r4
   225f4:	11000017 	ldw	r4,0(r2)
   225f8:	00223a81 	jmpi	223a8 <_strtol_r>

000225fc <___vfprintf_internal_r>:
   225fc:	deffb804 	addi	sp,sp,-288
   22600:	dfc04715 	stw	ra,284(sp)
   22604:	ddc04515 	stw	r23,276(sp)
   22608:	dd404315 	stw	r21,268(sp)
   2260c:	d9002c15 	stw	r4,176(sp)
   22610:	282f883a 	mov	r23,r5
   22614:	302b883a 	mov	r21,r6
   22618:	d9c02d15 	stw	r7,180(sp)
   2261c:	df004615 	stw	fp,280(sp)
   22620:	dd804415 	stw	r22,272(sp)
   22624:	dd004215 	stw	r20,264(sp)
   22628:	dcc04115 	stw	r19,260(sp)
   2262c:	dc804015 	stw	r18,256(sp)
   22630:	dc403f15 	stw	r17,252(sp)
   22634:	dc003e15 	stw	r16,248(sp)
   22638:	00271a40 	call	271a4 <_localeconv_r>
   2263c:	10800017 	ldw	r2,0(r2)
   22640:	1009883a 	mov	r4,r2
   22644:	d8803415 	stw	r2,208(sp)
   22648:	00223100 	call	22310 <strlen>
   2264c:	d8803715 	stw	r2,220(sp)
   22650:	d8802c17 	ldw	r2,176(sp)
   22654:	10000226 	beq	r2,zero,22660 <___vfprintf_internal_r+0x64>
   22658:	10800e17 	ldw	r2,56(r2)
   2265c:	1000f926 	beq	r2,zero,22a44 <___vfprintf_internal_r+0x448>
   22660:	b880030b 	ldhu	r2,12(r23)
   22664:	10c8000c 	andi	r3,r2,8192
   22668:	1800061e 	bne	r3,zero,22684 <___vfprintf_internal_r+0x88>
   2266c:	b9001917 	ldw	r4,100(r23)
   22670:	00f7ffc4 	movi	r3,-8193
   22674:	10880014 	ori	r2,r2,8192
   22678:	20c6703a 	and	r3,r4,r3
   2267c:	b880030d 	sth	r2,12(r23)
   22680:	b8c01915 	stw	r3,100(r23)
   22684:	10c0020c 	andi	r3,r2,8
   22688:	1800c126 	beq	r3,zero,22990 <___vfprintf_internal_r+0x394>
   2268c:	b8c00417 	ldw	r3,16(r23)
   22690:	1800bf26 	beq	r3,zero,22990 <___vfprintf_internal_r+0x394>
   22694:	1080068c 	andi	r2,r2,26
   22698:	00c00284 	movi	r3,10
   2269c:	10c0c426 	beq	r2,r3,229b0 <___vfprintf_internal_r+0x3b4>
   226a0:	d8c00404 	addi	r3,sp,16
   226a4:	050000f4 	movhi	r20,3
   226a8:	d9001e04 	addi	r4,sp,120
   226ac:	a5036884 	addi	r20,r20,3490
   226b0:	d8c01e15 	stw	r3,120(sp)
   226b4:	d8002015 	stw	zero,128(sp)
   226b8:	d8001f15 	stw	zero,124(sp)
   226bc:	d8003315 	stw	zero,204(sp)
   226c0:	d8003615 	stw	zero,216(sp)
   226c4:	d8003815 	stw	zero,224(sp)
   226c8:	1811883a 	mov	r8,r3
   226cc:	d8003915 	stw	zero,228(sp)
   226d0:	d8003a15 	stw	zero,232(sp)
   226d4:	d8002f15 	stw	zero,188(sp)
   226d8:	d9002815 	stw	r4,160(sp)
   226dc:	a8800007 	ldb	r2,0(r21)
   226e0:	10027b26 	beq	r2,zero,230d0 <___vfprintf_internal_r+0xad4>
   226e4:	00c00944 	movi	r3,37
   226e8:	a821883a 	mov	r16,r21
   226ec:	10c0021e 	bne	r2,r3,226f8 <___vfprintf_internal_r+0xfc>
   226f0:	00001406 	br	22744 <___vfprintf_internal_r+0x148>
   226f4:	10c00326 	beq	r2,r3,22704 <___vfprintf_internal_r+0x108>
   226f8:	84000044 	addi	r16,r16,1
   226fc:	80800007 	ldb	r2,0(r16)
   22700:	103ffc1e 	bne	r2,zero,226f4 <__alt_data_end+0xfffe26f4>
   22704:	8563c83a 	sub	r17,r16,r21
   22708:	88000e26 	beq	r17,zero,22744 <___vfprintf_internal_r+0x148>
   2270c:	d8c02017 	ldw	r3,128(sp)
   22710:	d8801f17 	ldw	r2,124(sp)
   22714:	45400015 	stw	r21,0(r8)
   22718:	1c47883a 	add	r3,r3,r17
   2271c:	10800044 	addi	r2,r2,1
   22720:	d8c02015 	stw	r3,128(sp)
   22724:	44400115 	stw	r17,4(r8)
   22728:	d8801f15 	stw	r2,124(sp)
   2272c:	00c001c4 	movi	r3,7
   22730:	1880a716 	blt	r3,r2,229d0 <___vfprintf_internal_r+0x3d4>
   22734:	42000204 	addi	r8,r8,8
   22738:	d9402f17 	ldw	r5,188(sp)
   2273c:	2c4b883a 	add	r5,r5,r17
   22740:	d9402f15 	stw	r5,188(sp)
   22744:	80800007 	ldb	r2,0(r16)
   22748:	1000a826 	beq	r2,zero,229ec <___vfprintf_internal_r+0x3f0>
   2274c:	84400047 	ldb	r17,1(r16)
   22750:	00bfffc4 	movi	r2,-1
   22754:	85400044 	addi	r21,r16,1
   22758:	d8002785 	stb	zero,158(sp)
   2275c:	0007883a 	mov	r3,zero
   22760:	000f883a 	mov	r7,zero
   22764:	d8802915 	stw	r2,164(sp)
   22768:	d8003115 	stw	zero,196(sp)
   2276c:	0025883a 	mov	r18,zero
   22770:	01401604 	movi	r5,88
   22774:	01800244 	movi	r6,9
   22778:	02800a84 	movi	r10,42
   2277c:	02401b04 	movi	r9,108
   22780:	ad400044 	addi	r21,r21,1
   22784:	88bff804 	addi	r2,r17,-32
   22788:	28830436 	bltu	r5,r2,2339c <___vfprintf_internal_r+0xda0>
   2278c:	100490ba 	slli	r2,r2,2
   22790:	010000b4 	movhi	r4,2
   22794:	2109e904 	addi	r4,r4,10148
   22798:	1105883a 	add	r2,r2,r4
   2279c:	10800017 	ldw	r2,0(r2)
   227a0:	1000683a 	jmp	r2
   227a4:	000232bc 	xorhi	zero,zero,2250
   227a8:	0002339c 	xori	zero,zero,2254
   227ac:	0002339c 	xori	zero,zero,2254
   227b0:	000232dc 	xori	zero,zero,2251
   227b4:	0002339c 	xori	zero,zero,2254
   227b8:	0002339c 	xori	zero,zero,2254
   227bc:	0002339c 	xori	zero,zero,2254
   227c0:	0002339c 	xori	zero,zero,2254
   227c4:	0002339c 	xori	zero,zero,2254
   227c8:	0002339c 	xori	zero,zero,2254
   227cc:	00022a50 	cmplti	zero,zero,2217
   227d0:	000231f8 	rdprs	zero,zero,2247
   227d4:	0002339c 	xori	zero,zero,2254
   227d8:	00022918 	cmpnei	zero,zero,2212
   227dc:	00022a78 	rdprs	zero,zero,2217
   227e0:	0002339c 	xori	zero,zero,2254
   227e4:	00022ab8 	rdprs	zero,zero,2218
   227e8:	00022ac4 	movi	zero,2219
   227ec:	00022ac4 	movi	zero,2219
   227f0:	00022ac4 	movi	zero,2219
   227f4:	00022ac4 	movi	zero,2219
   227f8:	00022ac4 	movi	zero,2219
   227fc:	00022ac4 	movi	zero,2219
   22800:	00022ac4 	movi	zero,2219
   22804:	00022ac4 	movi	zero,2219
   22808:	00022ac4 	movi	zero,2219
   2280c:	0002339c 	xori	zero,zero,2254
   22810:	0002339c 	xori	zero,zero,2254
   22814:	0002339c 	xori	zero,zero,2254
   22818:	0002339c 	xori	zero,zero,2254
   2281c:	0002339c 	xori	zero,zero,2254
   22820:	0002339c 	xori	zero,zero,2254
   22824:	0002339c 	xori	zero,zero,2254
   22828:	0002339c 	xori	zero,zero,2254
   2282c:	0002339c 	xori	zero,zero,2254
   22830:	0002339c 	xori	zero,zero,2254
   22834:	00022af8 	rdprs	zero,zero,2219
   22838:	00022bb4 	movhi	zero,2222
   2283c:	0002339c 	xori	zero,zero,2254
   22840:	00022bb4 	movhi	zero,2222
   22844:	0002339c 	xori	zero,zero,2254
   22848:	0002339c 	xori	zero,zero,2254
   2284c:	0002339c 	xori	zero,zero,2254
   22850:	0002339c 	xori	zero,zero,2254
   22854:	00022c54 	movui	zero,2225
   22858:	0002339c 	xori	zero,zero,2254
   2285c:	0002339c 	xori	zero,zero,2254
   22860:	00022c60 	cmpeqi	zero,zero,2225
   22864:	0002339c 	xori	zero,zero,2254
   22868:	0002339c 	xori	zero,zero,2254
   2286c:	0002339c 	xori	zero,zero,2254
   22870:	0002339c 	xori	zero,zero,2254
   22874:	0002339c 	xori	zero,zero,2254
   22878:	000230d8 	cmpnei	zero,zero,2243
   2287c:	0002339c 	xori	zero,zero,2254
   22880:	0002339c 	xori	zero,zero,2254
   22884:	00023138 	rdprs	zero,zero,2244
   22888:	0002339c 	xori	zero,zero,2254
   2288c:	0002339c 	xori	zero,zero,2254
   22890:	0002339c 	xori	zero,zero,2254
   22894:	0002339c 	xori	zero,zero,2254
   22898:	0002339c 	xori	zero,zero,2254
   2289c:	0002339c 	xori	zero,zero,2254
   228a0:	0002339c 	xori	zero,zero,2254
   228a4:	0002339c 	xori	zero,zero,2254
   228a8:	0002339c 	xori	zero,zero,2254
   228ac:	0002339c 	xori	zero,zero,2254
   228b0:	00023348 	cmpgei	zero,zero,2253
   228b4:	000232e8 	cmpgeui	zero,zero,2251
   228b8:	00022bb4 	movhi	zero,2222
   228bc:	00022bb4 	movhi	zero,2222
   228c0:	00022bb4 	movhi	zero,2222
   228c4:	000232f8 	rdprs	zero,zero,2251
   228c8:	000232e8 	cmpgeui	zero,zero,2251
   228cc:	0002339c 	xori	zero,zero,2254
   228d0:	0002339c 	xori	zero,zero,2254
   228d4:	00023304 	movi	zero,2252
   228d8:	0002339c 	xori	zero,zero,2254
   228dc:	00023314 	movui	zero,2252
   228e0:	000231e8 	cmpgeui	zero,zero,2247
   228e4:	00022924 	muli	zero,zero,2212
   228e8:	00023208 	cmpgei	zero,zero,2248
   228ec:	0002339c 	xori	zero,zero,2254
   228f0:	00023214 	movui	zero,2248
   228f4:	0002339c 	xori	zero,zero,2254
   228f8:	00023270 	cmpltui	zero,zero,2249
   228fc:	0002339c 	xori	zero,zero,2254
   22900:	0002339c 	xori	zero,zero,2254
   22904:	00023280 	call	2328 <__alt_mem_onchip_memory2_0-0x1dcd8>
   22908:	d9003117 	ldw	r4,196(sp)
   2290c:	d8802d15 	stw	r2,180(sp)
   22910:	0109c83a 	sub	r4,zero,r4
   22914:	d9003115 	stw	r4,196(sp)
   22918:	94800114 	ori	r18,r18,4
   2291c:	ac400007 	ldb	r17,0(r21)
   22920:	003f9706 	br	22780 <__alt_data_end+0xfffe2780>
   22924:	00800c04 	movi	r2,48
   22928:	d9002d17 	ldw	r4,180(sp)
   2292c:	d9402917 	ldw	r5,164(sp)
   22930:	d8802705 	stb	r2,156(sp)
   22934:	00801e04 	movi	r2,120
   22938:	d8802745 	stb	r2,157(sp)
   2293c:	d8002785 	stb	zero,158(sp)
   22940:	20c00104 	addi	r3,r4,4
   22944:	24c00017 	ldw	r19,0(r4)
   22948:	002d883a 	mov	r22,zero
   2294c:	90800094 	ori	r2,r18,2
   22950:	28029a16 	blt	r5,zero,233bc <___vfprintf_internal_r+0xdc0>
   22954:	00bfdfc4 	movi	r2,-129
   22958:	90a4703a 	and	r18,r18,r2
   2295c:	d8c02d15 	stw	r3,180(sp)
   22960:	94800094 	ori	r18,r18,2
   22964:	9802871e 	bne	r19,zero,23384 <___vfprintf_internal_r+0xd88>
   22968:	008000f4 	movhi	r2,3
   2296c:	10836104 	addi	r2,r2,3460
   22970:	d8803915 	stw	r2,228(sp)
   22974:	04401e04 	movi	r17,120
   22978:	d8802917 	ldw	r2,164(sp)
   2297c:	0039883a 	mov	fp,zero
   22980:	1001e926 	beq	r2,zero,23128 <___vfprintf_internal_r+0xb2c>
   22984:	0027883a 	mov	r19,zero
   22988:	002d883a 	mov	r22,zero
   2298c:	00020506 	br	231a4 <___vfprintf_internal_r+0xba8>
   22990:	d9002c17 	ldw	r4,176(sp)
   22994:	b80b883a 	mov	r5,r23
   22998:	002492c0 	call	2492c <__swsetup_r>
   2299c:	1005ac1e 	bne	r2,zero,24050 <___vfprintf_internal_r+0x1a54>
   229a0:	b880030b 	ldhu	r2,12(r23)
   229a4:	00c00284 	movi	r3,10
   229a8:	1080068c 	andi	r2,r2,26
   229ac:	10ff3c1e 	bne	r2,r3,226a0 <__alt_data_end+0xfffe26a0>
   229b0:	b880038f 	ldh	r2,14(r23)
   229b4:	103f3a16 	blt	r2,zero,226a0 <__alt_data_end+0xfffe26a0>
   229b8:	d9c02d17 	ldw	r7,180(sp)
   229bc:	d9002c17 	ldw	r4,176(sp)
   229c0:	a80d883a 	mov	r6,r21
   229c4:	b80b883a 	mov	r5,r23
   229c8:	00248100 	call	24810 <__sbprintf>
   229cc:	00001106 	br	22a14 <___vfprintf_internal_r+0x418>
   229d0:	d9002c17 	ldw	r4,176(sp)
   229d4:	d9801e04 	addi	r6,sp,120
   229d8:	b80b883a 	mov	r5,r23
   229dc:	0028b9c0 	call	28b9c <__sprint_r>
   229e0:	1000081e 	bne	r2,zero,22a04 <___vfprintf_internal_r+0x408>
   229e4:	da000404 	addi	r8,sp,16
   229e8:	003f5306 	br	22738 <__alt_data_end+0xfffe2738>
   229ec:	d8802017 	ldw	r2,128(sp)
   229f0:	10000426 	beq	r2,zero,22a04 <___vfprintf_internal_r+0x408>
   229f4:	d9002c17 	ldw	r4,176(sp)
   229f8:	d9801e04 	addi	r6,sp,120
   229fc:	b80b883a 	mov	r5,r23
   22a00:	0028b9c0 	call	28b9c <__sprint_r>
   22a04:	b880030b 	ldhu	r2,12(r23)
   22a08:	1080100c 	andi	r2,r2,64
   22a0c:	1005901e 	bne	r2,zero,24050 <___vfprintf_internal_r+0x1a54>
   22a10:	d8802f17 	ldw	r2,188(sp)
   22a14:	dfc04717 	ldw	ra,284(sp)
   22a18:	df004617 	ldw	fp,280(sp)
   22a1c:	ddc04517 	ldw	r23,276(sp)
   22a20:	dd804417 	ldw	r22,272(sp)
   22a24:	dd404317 	ldw	r21,268(sp)
   22a28:	dd004217 	ldw	r20,264(sp)
   22a2c:	dcc04117 	ldw	r19,260(sp)
   22a30:	dc804017 	ldw	r18,256(sp)
   22a34:	dc403f17 	ldw	r17,252(sp)
   22a38:	dc003e17 	ldw	r16,248(sp)
   22a3c:	dec04804 	addi	sp,sp,288
   22a40:	f800283a 	ret
   22a44:	d9002c17 	ldw	r4,176(sp)
   22a48:	00208c80 	call	208c8 <__sinit>
   22a4c:	003f0406 	br	22660 <__alt_data_end+0xfffe2660>
   22a50:	d8802d17 	ldw	r2,180(sp)
   22a54:	d9002d17 	ldw	r4,180(sp)
   22a58:	10800017 	ldw	r2,0(r2)
   22a5c:	d8803115 	stw	r2,196(sp)
   22a60:	20800104 	addi	r2,r4,4
   22a64:	d9003117 	ldw	r4,196(sp)
   22a68:	203fa716 	blt	r4,zero,22908 <__alt_data_end+0xfffe2908>
   22a6c:	d8802d15 	stw	r2,180(sp)
   22a70:	ac400007 	ldb	r17,0(r21)
   22a74:	003f4206 	br	22780 <__alt_data_end+0xfffe2780>
   22a78:	ac400007 	ldb	r17,0(r21)
   22a7c:	aac00044 	addi	r11,r21,1
   22a80:	8a872826 	beq	r17,r10,24724 <___vfprintf_internal_r+0x2128>
   22a84:	88bff404 	addi	r2,r17,-48
   22a88:	0009883a 	mov	r4,zero
   22a8c:	30867d36 	bltu	r6,r2,24484 <___vfprintf_internal_r+0x1e88>
   22a90:	5c400007 	ldb	r17,0(r11)
   22a94:	210002a4 	muli	r4,r4,10
   22a98:	5d400044 	addi	r21,r11,1
   22a9c:	a817883a 	mov	r11,r21
   22aa0:	2089883a 	add	r4,r4,r2
   22aa4:	88bff404 	addi	r2,r17,-48
   22aa8:	30bff92e 	bgeu	r6,r2,22a90 <__alt_data_end+0xfffe2a90>
   22aac:	2005c916 	blt	r4,zero,241d4 <___vfprintf_internal_r+0x1bd8>
   22ab0:	d9002915 	stw	r4,164(sp)
   22ab4:	003f3306 	br	22784 <__alt_data_end+0xfffe2784>
   22ab8:	94802014 	ori	r18,r18,128
   22abc:	ac400007 	ldb	r17,0(r21)
   22ac0:	003f2f06 	br	22780 <__alt_data_end+0xfffe2780>
   22ac4:	a809883a 	mov	r4,r21
   22ac8:	d8003115 	stw	zero,196(sp)
   22acc:	88bff404 	addi	r2,r17,-48
   22ad0:	0017883a 	mov	r11,zero
   22ad4:	24400007 	ldb	r17,0(r4)
   22ad8:	5ac002a4 	muli	r11,r11,10
   22adc:	ad400044 	addi	r21,r21,1
   22ae0:	a809883a 	mov	r4,r21
   22ae4:	12d7883a 	add	r11,r2,r11
   22ae8:	88bff404 	addi	r2,r17,-48
   22aec:	30bff92e 	bgeu	r6,r2,22ad4 <__alt_data_end+0xfffe2ad4>
   22af0:	dac03115 	stw	r11,196(sp)
   22af4:	003f2306 	br	22784 <__alt_data_end+0xfffe2784>
   22af8:	18c03fcc 	andi	r3,r3,255
   22afc:	18072b1e 	bne	r3,zero,247ac <___vfprintf_internal_r+0x21b0>
   22b00:	94800414 	ori	r18,r18,16
   22b04:	9080080c 	andi	r2,r18,32
   22b08:	10037b26 	beq	r2,zero,238f8 <___vfprintf_internal_r+0x12fc>
   22b0c:	d9402d17 	ldw	r5,180(sp)
   22b10:	28800117 	ldw	r2,4(r5)
   22b14:	2cc00017 	ldw	r19,0(r5)
   22b18:	29400204 	addi	r5,r5,8
   22b1c:	d9402d15 	stw	r5,180(sp)
   22b20:	102d883a 	mov	r22,r2
   22b24:	10044b16 	blt	r2,zero,23c54 <___vfprintf_internal_r+0x1658>
   22b28:	d9402917 	ldw	r5,164(sp)
   22b2c:	df002783 	ldbu	fp,158(sp)
   22b30:	2803bc16 	blt	r5,zero,23a24 <___vfprintf_internal_r+0x1428>
   22b34:	00ffdfc4 	movi	r3,-129
   22b38:	9d84b03a 	or	r2,r19,r22
   22b3c:	90e4703a 	and	r18,r18,r3
   22b40:	10017726 	beq	r2,zero,23120 <___vfprintf_internal_r+0xb24>
   22b44:	b0038326 	beq	r22,zero,23954 <___vfprintf_internal_r+0x1358>
   22b48:	dc402a15 	stw	r17,168(sp)
   22b4c:	dc001e04 	addi	r16,sp,120
   22b50:	b023883a 	mov	r17,r22
   22b54:	402d883a 	mov	r22,r8
   22b58:	9809883a 	mov	r4,r19
   22b5c:	880b883a 	mov	r5,r17
   22b60:	01800284 	movi	r6,10
   22b64:	000f883a 	mov	r7,zero
   22b68:	002ac6c0 	call	2ac6c <__umoddi3>
   22b6c:	10800c04 	addi	r2,r2,48
   22b70:	843fffc4 	addi	r16,r16,-1
   22b74:	9809883a 	mov	r4,r19
   22b78:	880b883a 	mov	r5,r17
   22b7c:	80800005 	stb	r2,0(r16)
   22b80:	01800284 	movi	r6,10
   22b84:	000f883a 	mov	r7,zero
   22b88:	002a6f40 	call	2a6f4 <__udivdi3>
   22b8c:	1027883a 	mov	r19,r2
   22b90:	10c4b03a 	or	r2,r2,r3
   22b94:	1823883a 	mov	r17,r3
   22b98:	103fef1e 	bne	r2,zero,22b58 <__alt_data_end+0xfffe2b58>
   22b9c:	d8c02817 	ldw	r3,160(sp)
   22ba0:	dc402a17 	ldw	r17,168(sp)
   22ba4:	b011883a 	mov	r8,r22
   22ba8:	1c07c83a 	sub	r3,r3,r16
   22bac:	d8c02e15 	stw	r3,184(sp)
   22bb0:	00005906 	br	22d18 <___vfprintf_internal_r+0x71c>
   22bb4:	18c03fcc 	andi	r3,r3,255
   22bb8:	1806fa1e 	bne	r3,zero,247a4 <___vfprintf_internal_r+0x21a8>
   22bbc:	9080020c 	andi	r2,r18,8
   22bc0:	10048a26 	beq	r2,zero,23dec <___vfprintf_internal_r+0x17f0>
   22bc4:	d8c02d17 	ldw	r3,180(sp)
   22bc8:	d9002d17 	ldw	r4,180(sp)
   22bcc:	d9402d17 	ldw	r5,180(sp)
   22bd0:	18c00017 	ldw	r3,0(r3)
   22bd4:	21000117 	ldw	r4,4(r4)
   22bd8:	29400204 	addi	r5,r5,8
   22bdc:	d8c03615 	stw	r3,216(sp)
   22be0:	d9003815 	stw	r4,224(sp)
   22be4:	d9402d15 	stw	r5,180(sp)
   22be8:	d9003617 	ldw	r4,216(sp)
   22bec:	d9403817 	ldw	r5,224(sp)
   22bf0:	da003d15 	stw	r8,244(sp)
   22bf4:	04000044 	movi	r16,1
   22bf8:	00289500 	call	28950 <__fpclassifyd>
   22bfc:	da003d17 	ldw	r8,244(sp)
   22c00:	14041f1e 	bne	r2,r16,23c80 <___vfprintf_internal_r+0x1684>
   22c04:	d9003617 	ldw	r4,216(sp)
   22c08:	d9403817 	ldw	r5,224(sp)
   22c0c:	000d883a 	mov	r6,zero
   22c10:	000f883a 	mov	r7,zero
   22c14:	002c6500 	call	2c650 <__ledf2>
   22c18:	da003d17 	ldw	r8,244(sp)
   22c1c:	1005be16 	blt	r2,zero,24318 <___vfprintf_internal_r+0x1d1c>
   22c20:	df002783 	ldbu	fp,158(sp)
   22c24:	008011c4 	movi	r2,71
   22c28:	1445330e 	bge	r2,r17,240f8 <___vfprintf_internal_r+0x1afc>
   22c2c:	040000f4 	movhi	r16,3
   22c30:	84035904 	addi	r16,r16,3428
   22c34:	00c000c4 	movi	r3,3
   22c38:	00bfdfc4 	movi	r2,-129
   22c3c:	d8c02a15 	stw	r3,168(sp)
   22c40:	90a4703a 	and	r18,r18,r2
   22c44:	d8c02e15 	stw	r3,184(sp)
   22c48:	d8002915 	stw	zero,164(sp)
   22c4c:	d8003215 	stw	zero,200(sp)
   22c50:	00003706 	br	22d30 <___vfprintf_internal_r+0x734>
   22c54:	94800214 	ori	r18,r18,8
   22c58:	ac400007 	ldb	r17,0(r21)
   22c5c:	003ec806 	br	22780 <__alt_data_end+0xfffe2780>
   22c60:	18c03fcc 	andi	r3,r3,255
   22c64:	1806db1e 	bne	r3,zero,247d4 <___vfprintf_internal_r+0x21d8>
   22c68:	94800414 	ori	r18,r18,16
   22c6c:	9080080c 	andi	r2,r18,32
   22c70:	1002d826 	beq	r2,zero,237d4 <___vfprintf_internal_r+0x11d8>
   22c74:	d9402d17 	ldw	r5,180(sp)
   22c78:	d8c02917 	ldw	r3,164(sp)
   22c7c:	d8002785 	stb	zero,158(sp)
   22c80:	28800204 	addi	r2,r5,8
   22c84:	2cc00017 	ldw	r19,0(r5)
   22c88:	2d800117 	ldw	r22,4(r5)
   22c8c:	18048f16 	blt	r3,zero,23ecc <___vfprintf_internal_r+0x18d0>
   22c90:	013fdfc4 	movi	r4,-129
   22c94:	9d86b03a 	or	r3,r19,r22
   22c98:	d8802d15 	stw	r2,180(sp)
   22c9c:	9124703a 	and	r18,r18,r4
   22ca0:	1802d91e 	bne	r3,zero,23808 <___vfprintf_internal_r+0x120c>
   22ca4:	d8c02917 	ldw	r3,164(sp)
   22ca8:	0039883a 	mov	fp,zero
   22cac:	1805c326 	beq	r3,zero,243bc <___vfprintf_internal_r+0x1dc0>
   22cb0:	0027883a 	mov	r19,zero
   22cb4:	002d883a 	mov	r22,zero
   22cb8:	dc001e04 	addi	r16,sp,120
   22cbc:	9806d0fa 	srli	r3,r19,3
   22cc0:	b008977a 	slli	r4,r22,29
   22cc4:	b02cd0fa 	srli	r22,r22,3
   22cc8:	9cc001cc 	andi	r19,r19,7
   22ccc:	98800c04 	addi	r2,r19,48
   22cd0:	843fffc4 	addi	r16,r16,-1
   22cd4:	20e6b03a 	or	r19,r4,r3
   22cd8:	80800005 	stb	r2,0(r16)
   22cdc:	9d86b03a 	or	r3,r19,r22
   22ce0:	183ff61e 	bne	r3,zero,22cbc <__alt_data_end+0xfffe2cbc>
   22ce4:	90c0004c 	andi	r3,r18,1
   22ce8:	18013b26 	beq	r3,zero,231d8 <___vfprintf_internal_r+0xbdc>
   22cec:	10803fcc 	andi	r2,r2,255
   22cf0:	1080201c 	xori	r2,r2,128
   22cf4:	10bfe004 	addi	r2,r2,-128
   22cf8:	00c00c04 	movi	r3,48
   22cfc:	10c13626 	beq	r2,r3,231d8 <___vfprintf_internal_r+0xbdc>
   22d00:	80ffffc5 	stb	r3,-1(r16)
   22d04:	d8c02817 	ldw	r3,160(sp)
   22d08:	80bfffc4 	addi	r2,r16,-1
   22d0c:	1021883a 	mov	r16,r2
   22d10:	1887c83a 	sub	r3,r3,r2
   22d14:	d8c02e15 	stw	r3,184(sp)
   22d18:	d8802e17 	ldw	r2,184(sp)
   22d1c:	d9002917 	ldw	r4,164(sp)
   22d20:	1100010e 	bge	r2,r4,22d28 <___vfprintf_internal_r+0x72c>
   22d24:	2005883a 	mov	r2,r4
   22d28:	d8802a15 	stw	r2,168(sp)
   22d2c:	d8003215 	stw	zero,200(sp)
   22d30:	e7003fcc 	andi	fp,fp,255
   22d34:	e700201c 	xori	fp,fp,128
   22d38:	e73fe004 	addi	fp,fp,-128
   22d3c:	e0000326 	beq	fp,zero,22d4c <___vfprintf_internal_r+0x750>
   22d40:	d8c02a17 	ldw	r3,168(sp)
   22d44:	18c00044 	addi	r3,r3,1
   22d48:	d8c02a15 	stw	r3,168(sp)
   22d4c:	90c0008c 	andi	r3,r18,2
   22d50:	d8c02b15 	stw	r3,172(sp)
   22d54:	18000326 	beq	r3,zero,22d64 <___vfprintf_internal_r+0x768>
   22d58:	d8c02a17 	ldw	r3,168(sp)
   22d5c:	18c00084 	addi	r3,r3,2
   22d60:	d8c02a15 	stw	r3,168(sp)
   22d64:	90c0210c 	andi	r3,r18,132
   22d68:	d8c03015 	stw	r3,192(sp)
   22d6c:	1801a31e 	bne	r3,zero,233fc <___vfprintf_internal_r+0xe00>
   22d70:	d9003117 	ldw	r4,196(sp)
   22d74:	d8c02a17 	ldw	r3,168(sp)
   22d78:	20e7c83a 	sub	r19,r4,r3
   22d7c:	04c19f0e 	bge	zero,r19,233fc <___vfprintf_internal_r+0xe00>
   22d80:	02400404 	movi	r9,16
   22d84:	d8c02017 	ldw	r3,128(sp)
   22d88:	d8801f17 	ldw	r2,124(sp)
   22d8c:	4cc50d0e 	bge	r9,r19,241c4 <___vfprintf_internal_r+0x1bc8>
   22d90:	014000f4 	movhi	r5,3
   22d94:	29436c84 	addi	r5,r5,3506
   22d98:	dc403b15 	stw	r17,236(sp)
   22d9c:	d9403515 	stw	r5,212(sp)
   22da0:	9823883a 	mov	r17,r19
   22da4:	482d883a 	mov	r22,r9
   22da8:	9027883a 	mov	r19,r18
   22dac:	070001c4 	movi	fp,7
   22db0:	8025883a 	mov	r18,r16
   22db4:	dc002c17 	ldw	r16,176(sp)
   22db8:	00000306 	br	22dc8 <___vfprintf_internal_r+0x7cc>
   22dbc:	8c7ffc04 	addi	r17,r17,-16
   22dc0:	42000204 	addi	r8,r8,8
   22dc4:	b440130e 	bge	r22,r17,22e14 <___vfprintf_internal_r+0x818>
   22dc8:	010000f4 	movhi	r4,3
   22dcc:	18c00404 	addi	r3,r3,16
   22dd0:	10800044 	addi	r2,r2,1
   22dd4:	21036c84 	addi	r4,r4,3506
   22dd8:	41000015 	stw	r4,0(r8)
   22ddc:	45800115 	stw	r22,4(r8)
   22de0:	d8c02015 	stw	r3,128(sp)
   22de4:	d8801f15 	stw	r2,124(sp)
   22de8:	e0bff40e 	bge	fp,r2,22dbc <__alt_data_end+0xfffe2dbc>
   22dec:	d9801e04 	addi	r6,sp,120
   22df0:	b80b883a 	mov	r5,r23
   22df4:	8009883a 	mov	r4,r16
   22df8:	0028b9c0 	call	28b9c <__sprint_r>
   22dfc:	103f011e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   22e00:	8c7ffc04 	addi	r17,r17,-16
   22e04:	d8c02017 	ldw	r3,128(sp)
   22e08:	d8801f17 	ldw	r2,124(sp)
   22e0c:	da000404 	addi	r8,sp,16
   22e10:	b47fed16 	blt	r22,r17,22dc8 <__alt_data_end+0xfffe2dc8>
   22e14:	9021883a 	mov	r16,r18
   22e18:	9825883a 	mov	r18,r19
   22e1c:	8827883a 	mov	r19,r17
   22e20:	dc403b17 	ldw	r17,236(sp)
   22e24:	d9403517 	ldw	r5,212(sp)
   22e28:	98c7883a 	add	r3,r19,r3
   22e2c:	10800044 	addi	r2,r2,1
   22e30:	41400015 	stw	r5,0(r8)
   22e34:	44c00115 	stw	r19,4(r8)
   22e38:	d8c02015 	stw	r3,128(sp)
   22e3c:	d8801f15 	stw	r2,124(sp)
   22e40:	010001c4 	movi	r4,7
   22e44:	2082a316 	blt	r4,r2,238d4 <___vfprintf_internal_r+0x12d8>
   22e48:	df002787 	ldb	fp,158(sp)
   22e4c:	42000204 	addi	r8,r8,8
   22e50:	e0000c26 	beq	fp,zero,22e84 <___vfprintf_internal_r+0x888>
   22e54:	d8801f17 	ldw	r2,124(sp)
   22e58:	d9002784 	addi	r4,sp,158
   22e5c:	18c00044 	addi	r3,r3,1
   22e60:	10800044 	addi	r2,r2,1
   22e64:	41000015 	stw	r4,0(r8)
   22e68:	01000044 	movi	r4,1
   22e6c:	41000115 	stw	r4,4(r8)
   22e70:	d8c02015 	stw	r3,128(sp)
   22e74:	d8801f15 	stw	r2,124(sp)
   22e78:	010001c4 	movi	r4,7
   22e7c:	20823c16 	blt	r4,r2,23770 <___vfprintf_internal_r+0x1174>
   22e80:	42000204 	addi	r8,r8,8
   22e84:	d8802b17 	ldw	r2,172(sp)
   22e88:	10000c26 	beq	r2,zero,22ebc <___vfprintf_internal_r+0x8c0>
   22e8c:	d8801f17 	ldw	r2,124(sp)
   22e90:	d9002704 	addi	r4,sp,156
   22e94:	18c00084 	addi	r3,r3,2
   22e98:	10800044 	addi	r2,r2,1
   22e9c:	41000015 	stw	r4,0(r8)
   22ea0:	01000084 	movi	r4,2
   22ea4:	41000115 	stw	r4,4(r8)
   22ea8:	d8c02015 	stw	r3,128(sp)
   22eac:	d8801f15 	stw	r2,124(sp)
   22eb0:	010001c4 	movi	r4,7
   22eb4:	20823616 	blt	r4,r2,23790 <___vfprintf_internal_r+0x1194>
   22eb8:	42000204 	addi	r8,r8,8
   22ebc:	d9003017 	ldw	r4,192(sp)
   22ec0:	00802004 	movi	r2,128
   22ec4:	20819926 	beq	r4,r2,2352c <___vfprintf_internal_r+0xf30>
   22ec8:	d9402917 	ldw	r5,164(sp)
   22ecc:	d8802e17 	ldw	r2,184(sp)
   22ed0:	28adc83a 	sub	r22,r5,r2
   22ed4:	0580310e 	bge	zero,r22,22f9c <___vfprintf_internal_r+0x9a0>
   22ed8:	07000404 	movi	fp,16
   22edc:	d8801f17 	ldw	r2,124(sp)
   22ee0:	e584140e 	bge	fp,r22,23f34 <___vfprintf_internal_r+0x1938>
   22ee4:	014000f4 	movhi	r5,3
   22ee8:	29436884 	addi	r5,r5,3490
   22eec:	dc402915 	stw	r17,164(sp)
   22ef0:	d9402b15 	stw	r5,172(sp)
   22ef4:	b023883a 	mov	r17,r22
   22ef8:	04c001c4 	movi	r19,7
   22efc:	a82d883a 	mov	r22,r21
   22f00:	902b883a 	mov	r21,r18
   22f04:	8025883a 	mov	r18,r16
   22f08:	dc002c17 	ldw	r16,176(sp)
   22f0c:	00000306 	br	22f1c <___vfprintf_internal_r+0x920>
   22f10:	8c7ffc04 	addi	r17,r17,-16
   22f14:	42000204 	addi	r8,r8,8
   22f18:	e440110e 	bge	fp,r17,22f60 <___vfprintf_internal_r+0x964>
   22f1c:	18c00404 	addi	r3,r3,16
   22f20:	10800044 	addi	r2,r2,1
   22f24:	45000015 	stw	r20,0(r8)
   22f28:	47000115 	stw	fp,4(r8)
   22f2c:	d8c02015 	stw	r3,128(sp)
   22f30:	d8801f15 	stw	r2,124(sp)
   22f34:	98bff60e 	bge	r19,r2,22f10 <__alt_data_end+0xfffe2f10>
   22f38:	d9801e04 	addi	r6,sp,120
   22f3c:	b80b883a 	mov	r5,r23
   22f40:	8009883a 	mov	r4,r16
   22f44:	0028b9c0 	call	28b9c <__sprint_r>
   22f48:	103eae1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   22f4c:	8c7ffc04 	addi	r17,r17,-16
   22f50:	d8c02017 	ldw	r3,128(sp)
   22f54:	d8801f17 	ldw	r2,124(sp)
   22f58:	da000404 	addi	r8,sp,16
   22f5c:	e47fef16 	blt	fp,r17,22f1c <__alt_data_end+0xfffe2f1c>
   22f60:	9021883a 	mov	r16,r18
   22f64:	a825883a 	mov	r18,r21
   22f68:	b02b883a 	mov	r21,r22
   22f6c:	882d883a 	mov	r22,r17
   22f70:	dc402917 	ldw	r17,164(sp)
   22f74:	d9002b17 	ldw	r4,172(sp)
   22f78:	1d87883a 	add	r3,r3,r22
   22f7c:	10800044 	addi	r2,r2,1
   22f80:	41000015 	stw	r4,0(r8)
   22f84:	45800115 	stw	r22,4(r8)
   22f88:	d8c02015 	stw	r3,128(sp)
   22f8c:	d8801f15 	stw	r2,124(sp)
   22f90:	010001c4 	movi	r4,7
   22f94:	2081ee16 	blt	r4,r2,23750 <___vfprintf_internal_r+0x1154>
   22f98:	42000204 	addi	r8,r8,8
   22f9c:	9080400c 	andi	r2,r18,256
   22fa0:	1001181e 	bne	r2,zero,23404 <___vfprintf_internal_r+0xe08>
   22fa4:	d9402e17 	ldw	r5,184(sp)
   22fa8:	d8801f17 	ldw	r2,124(sp)
   22fac:	44000015 	stw	r16,0(r8)
   22fb0:	1947883a 	add	r3,r3,r5
   22fb4:	10800044 	addi	r2,r2,1
   22fb8:	41400115 	stw	r5,4(r8)
   22fbc:	d8c02015 	stw	r3,128(sp)
   22fc0:	d8801f15 	stw	r2,124(sp)
   22fc4:	010001c4 	movi	r4,7
   22fc8:	2081d316 	blt	r4,r2,23718 <___vfprintf_internal_r+0x111c>
   22fcc:	42000204 	addi	r8,r8,8
   22fd0:	9480010c 	andi	r18,r18,4
   22fd4:	90003226 	beq	r18,zero,230a0 <___vfprintf_internal_r+0xaa4>
   22fd8:	d9403117 	ldw	r5,196(sp)
   22fdc:	d8802a17 	ldw	r2,168(sp)
   22fe0:	28a1c83a 	sub	r16,r5,r2
   22fe4:	04002e0e 	bge	zero,r16,230a0 <___vfprintf_internal_r+0xaa4>
   22fe8:	04400404 	movi	r17,16
   22fec:	d8801f17 	ldw	r2,124(sp)
   22ff0:	8c04a20e 	bge	r17,r16,2427c <___vfprintf_internal_r+0x1c80>
   22ff4:	014000f4 	movhi	r5,3
   22ff8:	29436c84 	addi	r5,r5,3506
   22ffc:	d9403515 	stw	r5,212(sp)
   23000:	048001c4 	movi	r18,7
   23004:	dcc02c17 	ldw	r19,176(sp)
   23008:	00000306 	br	23018 <___vfprintf_internal_r+0xa1c>
   2300c:	843ffc04 	addi	r16,r16,-16
   23010:	42000204 	addi	r8,r8,8
   23014:	8c00130e 	bge	r17,r16,23064 <___vfprintf_internal_r+0xa68>
   23018:	010000f4 	movhi	r4,3
   2301c:	18c00404 	addi	r3,r3,16
   23020:	10800044 	addi	r2,r2,1
   23024:	21036c84 	addi	r4,r4,3506
   23028:	41000015 	stw	r4,0(r8)
   2302c:	44400115 	stw	r17,4(r8)
   23030:	d8c02015 	stw	r3,128(sp)
   23034:	d8801f15 	stw	r2,124(sp)
   23038:	90bff40e 	bge	r18,r2,2300c <__alt_data_end+0xfffe300c>
   2303c:	d9801e04 	addi	r6,sp,120
   23040:	b80b883a 	mov	r5,r23
   23044:	9809883a 	mov	r4,r19
   23048:	0028b9c0 	call	28b9c <__sprint_r>
   2304c:	103e6d1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23050:	843ffc04 	addi	r16,r16,-16
   23054:	d8c02017 	ldw	r3,128(sp)
   23058:	d8801f17 	ldw	r2,124(sp)
   2305c:	da000404 	addi	r8,sp,16
   23060:	8c3fed16 	blt	r17,r16,23018 <__alt_data_end+0xfffe3018>
   23064:	d9403517 	ldw	r5,212(sp)
   23068:	1c07883a 	add	r3,r3,r16
   2306c:	10800044 	addi	r2,r2,1
   23070:	41400015 	stw	r5,0(r8)
   23074:	44000115 	stw	r16,4(r8)
   23078:	d8c02015 	stw	r3,128(sp)
   2307c:	d8801f15 	stw	r2,124(sp)
   23080:	010001c4 	movi	r4,7
   23084:	2080060e 	bge	r4,r2,230a0 <___vfprintf_internal_r+0xaa4>
   23088:	d9002c17 	ldw	r4,176(sp)
   2308c:	d9801e04 	addi	r6,sp,120
   23090:	b80b883a 	mov	r5,r23
   23094:	0028b9c0 	call	28b9c <__sprint_r>
   23098:	103e5a1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   2309c:	d8c02017 	ldw	r3,128(sp)
   230a0:	d8803117 	ldw	r2,196(sp)
   230a4:	d9002a17 	ldw	r4,168(sp)
   230a8:	1100010e 	bge	r2,r4,230b0 <___vfprintf_internal_r+0xab4>
   230ac:	2005883a 	mov	r2,r4
   230b0:	d9402f17 	ldw	r5,188(sp)
   230b4:	288b883a 	add	r5,r5,r2
   230b8:	d9402f15 	stw	r5,188(sp)
   230bc:	18019e1e 	bne	r3,zero,23738 <___vfprintf_internal_r+0x113c>
   230c0:	a8800007 	ldb	r2,0(r21)
   230c4:	d8001f15 	stw	zero,124(sp)
   230c8:	da000404 	addi	r8,sp,16
   230cc:	103d851e 	bne	r2,zero,226e4 <__alt_data_end+0xfffe26e4>
   230d0:	a821883a 	mov	r16,r21
   230d4:	003d9b06 	br	22744 <__alt_data_end+0xfffe2744>
   230d8:	18c03fcc 	andi	r3,r3,255
   230dc:	1805c11e 	bne	r3,zero,247e4 <___vfprintf_internal_r+0x21e8>
   230e0:	94800414 	ori	r18,r18,16
   230e4:	9080080c 	andi	r2,r18,32
   230e8:	10020c26 	beq	r2,zero,2391c <___vfprintf_internal_r+0x1320>
   230ec:	d8802d17 	ldw	r2,180(sp)
   230f0:	d9002917 	ldw	r4,164(sp)
   230f4:	d8002785 	stb	zero,158(sp)
   230f8:	10c00204 	addi	r3,r2,8
   230fc:	14c00017 	ldw	r19,0(r2)
   23100:	15800117 	ldw	r22,4(r2)
   23104:	20040f16 	blt	r4,zero,24144 <___vfprintf_internal_r+0x1b48>
   23108:	013fdfc4 	movi	r4,-129
   2310c:	9d84b03a 	or	r2,r19,r22
   23110:	d8c02d15 	stw	r3,180(sp)
   23114:	9124703a 	and	r18,r18,r4
   23118:	0039883a 	mov	fp,zero
   2311c:	103e891e 	bne	r2,zero,22b44 <__alt_data_end+0xfffe2b44>
   23120:	d9002917 	ldw	r4,164(sp)
   23124:	2002c11e 	bne	r4,zero,23c2c <___vfprintf_internal_r+0x1630>
   23128:	d8002915 	stw	zero,164(sp)
   2312c:	d8002e15 	stw	zero,184(sp)
   23130:	dc001e04 	addi	r16,sp,120
   23134:	003ef806 	br	22d18 <__alt_data_end+0xfffe2d18>
   23138:	18c03fcc 	andi	r3,r3,255
   2313c:	18059d1e 	bne	r3,zero,247b4 <___vfprintf_internal_r+0x21b8>
   23140:	014000f4 	movhi	r5,3
   23144:	29435c04 	addi	r5,r5,3440
   23148:	d9403915 	stw	r5,228(sp)
   2314c:	9080080c 	andi	r2,r18,32
   23150:	10005226 	beq	r2,zero,2329c <___vfprintf_internal_r+0xca0>
   23154:	d8802d17 	ldw	r2,180(sp)
   23158:	14c00017 	ldw	r19,0(r2)
   2315c:	15800117 	ldw	r22,4(r2)
   23160:	10800204 	addi	r2,r2,8
   23164:	d8802d15 	stw	r2,180(sp)
   23168:	9080004c 	andi	r2,r18,1
   2316c:	10019026 	beq	r2,zero,237b0 <___vfprintf_internal_r+0x11b4>
   23170:	9d84b03a 	or	r2,r19,r22
   23174:	10036926 	beq	r2,zero,23f1c <___vfprintf_internal_r+0x1920>
   23178:	d8c02917 	ldw	r3,164(sp)
   2317c:	00800c04 	movi	r2,48
   23180:	d8802705 	stb	r2,156(sp)
   23184:	dc402745 	stb	r17,157(sp)
   23188:	d8002785 	stb	zero,158(sp)
   2318c:	90800094 	ori	r2,r18,2
   23190:	18045d16 	blt	r3,zero,24308 <___vfprintf_internal_r+0x1d0c>
   23194:	00bfdfc4 	movi	r2,-129
   23198:	90a4703a 	and	r18,r18,r2
   2319c:	94800094 	ori	r18,r18,2
   231a0:	0039883a 	mov	fp,zero
   231a4:	d9003917 	ldw	r4,228(sp)
   231a8:	dc001e04 	addi	r16,sp,120
   231ac:	988003cc 	andi	r2,r19,15
   231b0:	b006973a 	slli	r3,r22,28
   231b4:	2085883a 	add	r2,r4,r2
   231b8:	9826d13a 	srli	r19,r19,4
   231bc:	10800003 	ldbu	r2,0(r2)
   231c0:	b02cd13a 	srli	r22,r22,4
   231c4:	843fffc4 	addi	r16,r16,-1
   231c8:	1ce6b03a 	or	r19,r3,r19
   231cc:	80800005 	stb	r2,0(r16)
   231d0:	9d84b03a 	or	r2,r19,r22
   231d4:	103ff51e 	bne	r2,zero,231ac <__alt_data_end+0xfffe31ac>
   231d8:	d8c02817 	ldw	r3,160(sp)
   231dc:	1c07c83a 	sub	r3,r3,r16
   231e0:	d8c02e15 	stw	r3,184(sp)
   231e4:	003ecc06 	br	22d18 <__alt_data_end+0xfffe2d18>
   231e8:	18c03fcc 	andi	r3,r3,255
   231ec:	183e9f26 	beq	r3,zero,22c6c <__alt_data_end+0xfffe2c6c>
   231f0:	d9c02785 	stb	r7,158(sp)
   231f4:	003e9d06 	br	22c6c <__alt_data_end+0xfffe2c6c>
   231f8:	00c00044 	movi	r3,1
   231fc:	01c00ac4 	movi	r7,43
   23200:	ac400007 	ldb	r17,0(r21)
   23204:	003d5e06 	br	22780 <__alt_data_end+0xfffe2780>
   23208:	94800814 	ori	r18,r18,32
   2320c:	ac400007 	ldb	r17,0(r21)
   23210:	003d5b06 	br	22780 <__alt_data_end+0xfffe2780>
   23214:	d8c02d17 	ldw	r3,180(sp)
   23218:	d8002785 	stb	zero,158(sp)
   2321c:	1c000017 	ldw	r16,0(r3)
   23220:	1cc00104 	addi	r19,r3,4
   23224:	80041926 	beq	r16,zero,2428c <___vfprintf_internal_r+0x1c90>
   23228:	d9002917 	ldw	r4,164(sp)
   2322c:	2003d016 	blt	r4,zero,24170 <___vfprintf_internal_r+0x1b74>
   23230:	200d883a 	mov	r6,r4
   23234:	000b883a 	mov	r5,zero
   23238:	8009883a 	mov	r4,r16
   2323c:	da003d15 	stw	r8,244(sp)
   23240:	0021a9c0 	call	21a9c <memchr>
   23244:	da003d17 	ldw	r8,244(sp)
   23248:	10045426 	beq	r2,zero,2439c <___vfprintf_internal_r+0x1da0>
   2324c:	1405c83a 	sub	r2,r2,r16
   23250:	d8802e15 	stw	r2,184(sp)
   23254:	1003cc16 	blt	r2,zero,24188 <___vfprintf_internal_r+0x1b8c>
   23258:	df002783 	ldbu	fp,158(sp)
   2325c:	d8802a15 	stw	r2,168(sp)
   23260:	dcc02d15 	stw	r19,180(sp)
   23264:	d8002915 	stw	zero,164(sp)
   23268:	d8003215 	stw	zero,200(sp)
   2326c:	003eb006 	br	22d30 <__alt_data_end+0xfffe2d30>
   23270:	18c03fcc 	andi	r3,r3,255
   23274:	183f9b26 	beq	r3,zero,230e4 <__alt_data_end+0xfffe30e4>
   23278:	d9c02785 	stb	r7,158(sp)
   2327c:	003f9906 	br	230e4 <__alt_data_end+0xfffe30e4>
   23280:	18c03fcc 	andi	r3,r3,255
   23284:	1805551e 	bne	r3,zero,247dc <___vfprintf_internal_r+0x21e0>
   23288:	014000f4 	movhi	r5,3
   2328c:	29436104 	addi	r5,r5,3460
   23290:	d9403915 	stw	r5,228(sp)
   23294:	9080080c 	andi	r2,r18,32
   23298:	103fae1e 	bne	r2,zero,23154 <__alt_data_end+0xfffe3154>
   2329c:	9080040c 	andi	r2,r18,16
   232a0:	1002de26 	beq	r2,zero,23e1c <___vfprintf_internal_r+0x1820>
   232a4:	d8c02d17 	ldw	r3,180(sp)
   232a8:	002d883a 	mov	r22,zero
   232ac:	1cc00017 	ldw	r19,0(r3)
   232b0:	18c00104 	addi	r3,r3,4
   232b4:	d8c02d15 	stw	r3,180(sp)
   232b8:	003fab06 	br	23168 <__alt_data_end+0xfffe3168>
   232bc:	38803fcc 	andi	r2,r7,255
   232c0:	1080201c 	xori	r2,r2,128
   232c4:	10bfe004 	addi	r2,r2,-128
   232c8:	1002d21e 	bne	r2,zero,23e14 <___vfprintf_internal_r+0x1818>
   232cc:	00c00044 	movi	r3,1
   232d0:	01c00804 	movi	r7,32
   232d4:	ac400007 	ldb	r17,0(r21)
   232d8:	003d2906 	br	22780 <__alt_data_end+0xfffe2780>
   232dc:	94800054 	ori	r18,r18,1
   232e0:	ac400007 	ldb	r17,0(r21)
   232e4:	003d2606 	br	22780 <__alt_data_end+0xfffe2780>
   232e8:	18c03fcc 	andi	r3,r3,255
   232ec:	183e0526 	beq	r3,zero,22b04 <__alt_data_end+0xfffe2b04>
   232f0:	d9c02785 	stb	r7,158(sp)
   232f4:	003e0306 	br	22b04 <__alt_data_end+0xfffe2b04>
   232f8:	94801014 	ori	r18,r18,64
   232fc:	ac400007 	ldb	r17,0(r21)
   23300:	003d1f06 	br	22780 <__alt_data_end+0xfffe2780>
   23304:	ac400007 	ldb	r17,0(r21)
   23308:	8a438726 	beq	r17,r9,24128 <___vfprintf_internal_r+0x1b2c>
   2330c:	94800414 	ori	r18,r18,16
   23310:	003d1b06 	br	22780 <__alt_data_end+0xfffe2780>
   23314:	18c03fcc 	andi	r3,r3,255
   23318:	1805341e 	bne	r3,zero,247ec <___vfprintf_internal_r+0x21f0>
   2331c:	9080080c 	andi	r2,r18,32
   23320:	1002cd26 	beq	r2,zero,23e58 <___vfprintf_internal_r+0x185c>
   23324:	d9402d17 	ldw	r5,180(sp)
   23328:	d9002f17 	ldw	r4,188(sp)
   2332c:	28800017 	ldw	r2,0(r5)
   23330:	2007d7fa 	srai	r3,r4,31
   23334:	29400104 	addi	r5,r5,4
   23338:	d9402d15 	stw	r5,180(sp)
   2333c:	11000015 	stw	r4,0(r2)
   23340:	10c00115 	stw	r3,4(r2)
   23344:	003ce506 	br	226dc <__alt_data_end+0xfffe26dc>
   23348:	d8c02d17 	ldw	r3,180(sp)
   2334c:	d9002d17 	ldw	r4,180(sp)
   23350:	d8002785 	stb	zero,158(sp)
   23354:	18800017 	ldw	r2,0(r3)
   23358:	21000104 	addi	r4,r4,4
   2335c:	00c00044 	movi	r3,1
   23360:	d8c02a15 	stw	r3,168(sp)
   23364:	d8801405 	stb	r2,80(sp)
   23368:	d9002d15 	stw	r4,180(sp)
   2336c:	d8c02e15 	stw	r3,184(sp)
   23370:	d8002915 	stw	zero,164(sp)
   23374:	d8003215 	stw	zero,200(sp)
   23378:	dc001404 	addi	r16,sp,80
   2337c:	0039883a 	mov	fp,zero
   23380:	003e7206 	br	22d4c <__alt_data_end+0xfffe2d4c>
   23384:	010000f4 	movhi	r4,3
   23388:	21036104 	addi	r4,r4,3460
   2338c:	0039883a 	mov	fp,zero
   23390:	d9003915 	stw	r4,228(sp)
   23394:	04401e04 	movi	r17,120
   23398:	003f8206 	br	231a4 <__alt_data_end+0xfffe31a4>
   2339c:	18c03fcc 	andi	r3,r3,255
   233a0:	1805061e 	bne	r3,zero,247bc <___vfprintf_internal_r+0x21c0>
   233a4:	883d9126 	beq	r17,zero,229ec <__alt_data_end+0xfffe29ec>
   233a8:	00c00044 	movi	r3,1
   233ac:	d8c02a15 	stw	r3,168(sp)
   233b0:	dc401405 	stb	r17,80(sp)
   233b4:	d8002785 	stb	zero,158(sp)
   233b8:	003fec06 	br	2336c <__alt_data_end+0xfffe336c>
   233bc:	014000f4 	movhi	r5,3
   233c0:	29436104 	addi	r5,r5,3460
   233c4:	d9403915 	stw	r5,228(sp)
   233c8:	d8c02d15 	stw	r3,180(sp)
   233cc:	1025883a 	mov	r18,r2
   233d0:	04401e04 	movi	r17,120
   233d4:	9d84b03a 	or	r2,r19,r22
   233d8:	1000fc1e 	bne	r2,zero,237cc <___vfprintf_internal_r+0x11d0>
   233dc:	0039883a 	mov	fp,zero
   233e0:	00800084 	movi	r2,2
   233e4:	10803fcc 	andi	r2,r2,255
   233e8:	00c00044 	movi	r3,1
   233ec:	10c20f26 	beq	r2,r3,23c2c <___vfprintf_internal_r+0x1630>
   233f0:	00c00084 	movi	r3,2
   233f4:	10fd6326 	beq	r2,r3,22984 <__alt_data_end+0xfffe2984>
   233f8:	003e2d06 	br	22cb0 <__alt_data_end+0xfffe2cb0>
   233fc:	d8c02017 	ldw	r3,128(sp)
   23400:	003e9306 	br	22e50 <__alt_data_end+0xfffe2e50>
   23404:	00801944 	movi	r2,101
   23408:	14407e0e 	bge	r2,r17,23604 <___vfprintf_internal_r+0x1008>
   2340c:	d9003617 	ldw	r4,216(sp)
   23410:	d9403817 	ldw	r5,224(sp)
   23414:	000d883a 	mov	r6,zero
   23418:	000f883a 	mov	r7,zero
   2341c:	d8c03c15 	stw	r3,240(sp)
   23420:	da003d15 	stw	r8,244(sp)
   23424:	002c4ec0 	call	2c4ec <__eqdf2>
   23428:	d8c03c17 	ldw	r3,240(sp)
   2342c:	da003d17 	ldw	r8,244(sp)
   23430:	1000f71e 	bne	r2,zero,23810 <___vfprintf_internal_r+0x1214>
   23434:	d8801f17 	ldw	r2,124(sp)
   23438:	010000f4 	movhi	r4,3
   2343c:	21036804 	addi	r4,r4,3488
   23440:	18c00044 	addi	r3,r3,1
   23444:	10800044 	addi	r2,r2,1
   23448:	41000015 	stw	r4,0(r8)
   2344c:	01000044 	movi	r4,1
   23450:	41000115 	stw	r4,4(r8)
   23454:	d8c02015 	stw	r3,128(sp)
   23458:	d8801f15 	stw	r2,124(sp)
   2345c:	010001c4 	movi	r4,7
   23460:	2082b816 	blt	r4,r2,23f44 <___vfprintf_internal_r+0x1948>
   23464:	42000204 	addi	r8,r8,8
   23468:	d8802617 	ldw	r2,152(sp)
   2346c:	d9403317 	ldw	r5,204(sp)
   23470:	11400216 	blt	r2,r5,2347c <___vfprintf_internal_r+0xe80>
   23474:	9080004c 	andi	r2,r18,1
   23478:	103ed526 	beq	r2,zero,22fd0 <__alt_data_end+0xfffe2fd0>
   2347c:	d8803717 	ldw	r2,220(sp)
   23480:	d9003417 	ldw	r4,208(sp)
   23484:	d9403717 	ldw	r5,220(sp)
   23488:	1887883a 	add	r3,r3,r2
   2348c:	d8801f17 	ldw	r2,124(sp)
   23490:	41000015 	stw	r4,0(r8)
   23494:	41400115 	stw	r5,4(r8)
   23498:	10800044 	addi	r2,r2,1
   2349c:	d8c02015 	stw	r3,128(sp)
   234a0:	d8801f15 	stw	r2,124(sp)
   234a4:	010001c4 	movi	r4,7
   234a8:	20832916 	blt	r4,r2,24150 <___vfprintf_internal_r+0x1b54>
   234ac:	42000204 	addi	r8,r8,8
   234b0:	d8803317 	ldw	r2,204(sp)
   234b4:	143fffc4 	addi	r16,r2,-1
   234b8:	043ec50e 	bge	zero,r16,22fd0 <__alt_data_end+0xfffe2fd0>
   234bc:	04400404 	movi	r17,16
   234c0:	d8801f17 	ldw	r2,124(sp)
   234c4:	8c00880e 	bge	r17,r16,236e8 <___vfprintf_internal_r+0x10ec>
   234c8:	014000f4 	movhi	r5,3
   234cc:	29436884 	addi	r5,r5,3490
   234d0:	d9402b15 	stw	r5,172(sp)
   234d4:	058001c4 	movi	r22,7
   234d8:	dcc02c17 	ldw	r19,176(sp)
   234dc:	00000306 	br	234ec <___vfprintf_internal_r+0xef0>
   234e0:	42000204 	addi	r8,r8,8
   234e4:	843ffc04 	addi	r16,r16,-16
   234e8:	8c00820e 	bge	r17,r16,236f4 <___vfprintf_internal_r+0x10f8>
   234ec:	18c00404 	addi	r3,r3,16
   234f0:	10800044 	addi	r2,r2,1
   234f4:	45000015 	stw	r20,0(r8)
   234f8:	44400115 	stw	r17,4(r8)
   234fc:	d8c02015 	stw	r3,128(sp)
   23500:	d8801f15 	stw	r2,124(sp)
   23504:	b0bff60e 	bge	r22,r2,234e0 <__alt_data_end+0xfffe34e0>
   23508:	d9801e04 	addi	r6,sp,120
   2350c:	b80b883a 	mov	r5,r23
   23510:	9809883a 	mov	r4,r19
   23514:	0028b9c0 	call	28b9c <__sprint_r>
   23518:	103d3a1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   2351c:	d8c02017 	ldw	r3,128(sp)
   23520:	d8801f17 	ldw	r2,124(sp)
   23524:	da000404 	addi	r8,sp,16
   23528:	003fee06 	br	234e4 <__alt_data_end+0xfffe34e4>
   2352c:	d9403117 	ldw	r5,196(sp)
   23530:	d8802a17 	ldw	r2,168(sp)
   23534:	28adc83a 	sub	r22,r5,r2
   23538:	05be630e 	bge	zero,r22,22ec8 <__alt_data_end+0xfffe2ec8>
   2353c:	07000404 	movi	fp,16
   23540:	d8801f17 	ldw	r2,124(sp)
   23544:	e5838f0e 	bge	fp,r22,24384 <___vfprintf_internal_r+0x1d88>
   23548:	014000f4 	movhi	r5,3
   2354c:	29436884 	addi	r5,r5,3490
   23550:	dc403015 	stw	r17,192(sp)
   23554:	d9402b15 	stw	r5,172(sp)
   23558:	b023883a 	mov	r17,r22
   2355c:	04c001c4 	movi	r19,7
   23560:	a82d883a 	mov	r22,r21
   23564:	902b883a 	mov	r21,r18
   23568:	8025883a 	mov	r18,r16
   2356c:	dc002c17 	ldw	r16,176(sp)
   23570:	00000306 	br	23580 <___vfprintf_internal_r+0xf84>
   23574:	8c7ffc04 	addi	r17,r17,-16
   23578:	42000204 	addi	r8,r8,8
   2357c:	e440110e 	bge	fp,r17,235c4 <___vfprintf_internal_r+0xfc8>
   23580:	18c00404 	addi	r3,r3,16
   23584:	10800044 	addi	r2,r2,1
   23588:	45000015 	stw	r20,0(r8)
   2358c:	47000115 	stw	fp,4(r8)
   23590:	d8c02015 	stw	r3,128(sp)
   23594:	d8801f15 	stw	r2,124(sp)
   23598:	98bff60e 	bge	r19,r2,23574 <__alt_data_end+0xfffe3574>
   2359c:	d9801e04 	addi	r6,sp,120
   235a0:	b80b883a 	mov	r5,r23
   235a4:	8009883a 	mov	r4,r16
   235a8:	0028b9c0 	call	28b9c <__sprint_r>
   235ac:	103d151e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   235b0:	8c7ffc04 	addi	r17,r17,-16
   235b4:	d8c02017 	ldw	r3,128(sp)
   235b8:	d8801f17 	ldw	r2,124(sp)
   235bc:	da000404 	addi	r8,sp,16
   235c0:	e47fef16 	blt	fp,r17,23580 <__alt_data_end+0xfffe3580>
   235c4:	9021883a 	mov	r16,r18
   235c8:	a825883a 	mov	r18,r21
   235cc:	b02b883a 	mov	r21,r22
   235d0:	882d883a 	mov	r22,r17
   235d4:	dc403017 	ldw	r17,192(sp)
   235d8:	d9002b17 	ldw	r4,172(sp)
   235dc:	1d87883a 	add	r3,r3,r22
   235e0:	10800044 	addi	r2,r2,1
   235e4:	41000015 	stw	r4,0(r8)
   235e8:	45800115 	stw	r22,4(r8)
   235ec:	d8c02015 	stw	r3,128(sp)
   235f0:	d8801f15 	stw	r2,124(sp)
   235f4:	010001c4 	movi	r4,7
   235f8:	20818e16 	blt	r4,r2,23c34 <___vfprintf_internal_r+0x1638>
   235fc:	42000204 	addi	r8,r8,8
   23600:	003e3106 	br	22ec8 <__alt_data_end+0xfffe2ec8>
   23604:	d9403317 	ldw	r5,204(sp)
   23608:	00800044 	movi	r2,1
   2360c:	18c00044 	addi	r3,r3,1
   23610:	1141530e 	bge	r2,r5,23b60 <___vfprintf_internal_r+0x1564>
   23614:	dc401f17 	ldw	r17,124(sp)
   23618:	00800044 	movi	r2,1
   2361c:	40800115 	stw	r2,4(r8)
   23620:	8c400044 	addi	r17,r17,1
   23624:	44000015 	stw	r16,0(r8)
   23628:	d8c02015 	stw	r3,128(sp)
   2362c:	dc401f15 	stw	r17,124(sp)
   23630:	008001c4 	movi	r2,7
   23634:	14416b16 	blt	r2,r17,23be4 <___vfprintf_internal_r+0x15e8>
   23638:	42000204 	addi	r8,r8,8
   2363c:	d8803717 	ldw	r2,220(sp)
   23640:	d9003417 	ldw	r4,208(sp)
   23644:	8c400044 	addi	r17,r17,1
   23648:	10c7883a 	add	r3,r2,r3
   2364c:	40800115 	stw	r2,4(r8)
   23650:	41000015 	stw	r4,0(r8)
   23654:	d8c02015 	stw	r3,128(sp)
   23658:	dc401f15 	stw	r17,124(sp)
   2365c:	008001c4 	movi	r2,7
   23660:	14416916 	blt	r2,r17,23c08 <___vfprintf_internal_r+0x160c>
   23664:	45800204 	addi	r22,r8,8
   23668:	d9003617 	ldw	r4,216(sp)
   2366c:	d9403817 	ldw	r5,224(sp)
   23670:	000d883a 	mov	r6,zero
   23674:	000f883a 	mov	r7,zero
   23678:	d8c03c15 	stw	r3,240(sp)
   2367c:	002c4ec0 	call	2c4ec <__eqdf2>
   23680:	d8c03c17 	ldw	r3,240(sp)
   23684:	1000bc26 	beq	r2,zero,23978 <___vfprintf_internal_r+0x137c>
   23688:	d9403317 	ldw	r5,204(sp)
   2368c:	84000044 	addi	r16,r16,1
   23690:	8c400044 	addi	r17,r17,1
   23694:	28bfffc4 	addi	r2,r5,-1
   23698:	1887883a 	add	r3,r3,r2
   2369c:	b0800115 	stw	r2,4(r22)
   236a0:	b4000015 	stw	r16,0(r22)
   236a4:	d8c02015 	stw	r3,128(sp)
   236a8:	dc401f15 	stw	r17,124(sp)
   236ac:	008001c4 	movi	r2,7
   236b0:	14414316 	blt	r2,r17,23bc0 <___vfprintf_internal_r+0x15c4>
   236b4:	b5800204 	addi	r22,r22,8
   236b8:	d9003a17 	ldw	r4,232(sp)
   236bc:	df0022c4 	addi	fp,sp,139
   236c0:	8c400044 	addi	r17,r17,1
   236c4:	20c7883a 	add	r3,r4,r3
   236c8:	b7000015 	stw	fp,0(r22)
   236cc:	b1000115 	stw	r4,4(r22)
   236d0:	d8c02015 	stw	r3,128(sp)
   236d4:	dc401f15 	stw	r17,124(sp)
   236d8:	008001c4 	movi	r2,7
   236dc:	14400e16 	blt	r2,r17,23718 <___vfprintf_internal_r+0x111c>
   236e0:	b2000204 	addi	r8,r22,8
   236e4:	003e3a06 	br	22fd0 <__alt_data_end+0xfffe2fd0>
   236e8:	010000f4 	movhi	r4,3
   236ec:	21036884 	addi	r4,r4,3490
   236f0:	d9002b15 	stw	r4,172(sp)
   236f4:	d9002b17 	ldw	r4,172(sp)
   236f8:	1c07883a 	add	r3,r3,r16
   236fc:	44000115 	stw	r16,4(r8)
   23700:	41000015 	stw	r4,0(r8)
   23704:	10800044 	addi	r2,r2,1
   23708:	d8c02015 	stw	r3,128(sp)
   2370c:	d8801f15 	stw	r2,124(sp)
   23710:	010001c4 	movi	r4,7
   23714:	20be2d0e 	bge	r4,r2,22fcc <__alt_data_end+0xfffe2fcc>
   23718:	d9002c17 	ldw	r4,176(sp)
   2371c:	d9801e04 	addi	r6,sp,120
   23720:	b80b883a 	mov	r5,r23
   23724:	0028b9c0 	call	28b9c <__sprint_r>
   23728:	103cb61e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   2372c:	d8c02017 	ldw	r3,128(sp)
   23730:	da000404 	addi	r8,sp,16
   23734:	003e2606 	br	22fd0 <__alt_data_end+0xfffe2fd0>
   23738:	d9002c17 	ldw	r4,176(sp)
   2373c:	d9801e04 	addi	r6,sp,120
   23740:	b80b883a 	mov	r5,r23
   23744:	0028b9c0 	call	28b9c <__sprint_r>
   23748:	103e5d26 	beq	r2,zero,230c0 <__alt_data_end+0xfffe30c0>
   2374c:	003cad06 	br	22a04 <__alt_data_end+0xfffe2a04>
   23750:	d9002c17 	ldw	r4,176(sp)
   23754:	d9801e04 	addi	r6,sp,120
   23758:	b80b883a 	mov	r5,r23
   2375c:	0028b9c0 	call	28b9c <__sprint_r>
   23760:	103ca81e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23764:	d8c02017 	ldw	r3,128(sp)
   23768:	da000404 	addi	r8,sp,16
   2376c:	003e0b06 	br	22f9c <__alt_data_end+0xfffe2f9c>
   23770:	d9002c17 	ldw	r4,176(sp)
   23774:	d9801e04 	addi	r6,sp,120
   23778:	b80b883a 	mov	r5,r23
   2377c:	0028b9c0 	call	28b9c <__sprint_r>
   23780:	103ca01e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23784:	d8c02017 	ldw	r3,128(sp)
   23788:	da000404 	addi	r8,sp,16
   2378c:	003dbd06 	br	22e84 <__alt_data_end+0xfffe2e84>
   23790:	d9002c17 	ldw	r4,176(sp)
   23794:	d9801e04 	addi	r6,sp,120
   23798:	b80b883a 	mov	r5,r23
   2379c:	0028b9c0 	call	28b9c <__sprint_r>
   237a0:	103c981e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   237a4:	d8c02017 	ldw	r3,128(sp)
   237a8:	da000404 	addi	r8,sp,16
   237ac:	003dc306 	br	22ebc <__alt_data_end+0xfffe2ebc>
   237b0:	d8802917 	ldw	r2,164(sp)
   237b4:	d8002785 	stb	zero,158(sp)
   237b8:	103f0616 	blt	r2,zero,233d4 <__alt_data_end+0xfffe33d4>
   237bc:	00ffdfc4 	movi	r3,-129
   237c0:	9d84b03a 	or	r2,r19,r22
   237c4:	90e4703a 	and	r18,r18,r3
   237c8:	103c6b26 	beq	r2,zero,22978 <__alt_data_end+0xfffe2978>
   237cc:	0039883a 	mov	fp,zero
   237d0:	003e7406 	br	231a4 <__alt_data_end+0xfffe31a4>
   237d4:	9080040c 	andi	r2,r18,16
   237d8:	1001b326 	beq	r2,zero,23ea8 <___vfprintf_internal_r+0x18ac>
   237dc:	d9002d17 	ldw	r4,180(sp)
   237e0:	d9402917 	ldw	r5,164(sp)
   237e4:	d8002785 	stb	zero,158(sp)
   237e8:	20800104 	addi	r2,r4,4
   237ec:	24c00017 	ldw	r19,0(r4)
   237f0:	002d883a 	mov	r22,zero
   237f4:	2801b516 	blt	r5,zero,23ecc <___vfprintf_internal_r+0x18d0>
   237f8:	00ffdfc4 	movi	r3,-129
   237fc:	d8802d15 	stw	r2,180(sp)
   23800:	90e4703a 	and	r18,r18,r3
   23804:	983d2726 	beq	r19,zero,22ca4 <__alt_data_end+0xfffe2ca4>
   23808:	0039883a 	mov	fp,zero
   2380c:	003d2a06 	br	22cb8 <__alt_data_end+0xfffe2cb8>
   23810:	dc402617 	ldw	r17,152(sp)
   23814:	0441d30e 	bge	zero,r17,23f64 <___vfprintf_internal_r+0x1968>
   23818:	dc403217 	ldw	r17,200(sp)
   2381c:	d8803317 	ldw	r2,204(sp)
   23820:	1440010e 	bge	r2,r17,23828 <___vfprintf_internal_r+0x122c>
   23824:	1023883a 	mov	r17,r2
   23828:	04400a0e 	bge	zero,r17,23854 <___vfprintf_internal_r+0x1258>
   2382c:	d8801f17 	ldw	r2,124(sp)
   23830:	1c47883a 	add	r3,r3,r17
   23834:	44000015 	stw	r16,0(r8)
   23838:	10800044 	addi	r2,r2,1
   2383c:	44400115 	stw	r17,4(r8)
   23840:	d8c02015 	stw	r3,128(sp)
   23844:	d8801f15 	stw	r2,124(sp)
   23848:	010001c4 	movi	r4,7
   2384c:	20826516 	blt	r4,r2,241e4 <___vfprintf_internal_r+0x1be8>
   23850:	42000204 	addi	r8,r8,8
   23854:	88026116 	blt	r17,zero,241dc <___vfprintf_internal_r+0x1be0>
   23858:	d9003217 	ldw	r4,200(sp)
   2385c:	2463c83a 	sub	r17,r4,r17
   23860:	04407b0e 	bge	zero,r17,23a50 <___vfprintf_internal_r+0x1454>
   23864:	05800404 	movi	r22,16
   23868:	d8801f17 	ldw	r2,124(sp)
   2386c:	b4419d0e 	bge	r22,r17,23ee4 <___vfprintf_internal_r+0x18e8>
   23870:	010000f4 	movhi	r4,3
   23874:	21036884 	addi	r4,r4,3490
   23878:	d9002b15 	stw	r4,172(sp)
   2387c:	070001c4 	movi	fp,7
   23880:	dcc02c17 	ldw	r19,176(sp)
   23884:	00000306 	br	23894 <___vfprintf_internal_r+0x1298>
   23888:	42000204 	addi	r8,r8,8
   2388c:	8c7ffc04 	addi	r17,r17,-16
   23890:	b441970e 	bge	r22,r17,23ef0 <___vfprintf_internal_r+0x18f4>
   23894:	18c00404 	addi	r3,r3,16
   23898:	10800044 	addi	r2,r2,1
   2389c:	45000015 	stw	r20,0(r8)
   238a0:	45800115 	stw	r22,4(r8)
   238a4:	d8c02015 	stw	r3,128(sp)
   238a8:	d8801f15 	stw	r2,124(sp)
   238ac:	e0bff60e 	bge	fp,r2,23888 <__alt_data_end+0xfffe3888>
   238b0:	d9801e04 	addi	r6,sp,120
   238b4:	b80b883a 	mov	r5,r23
   238b8:	9809883a 	mov	r4,r19
   238bc:	0028b9c0 	call	28b9c <__sprint_r>
   238c0:	103c501e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   238c4:	d8c02017 	ldw	r3,128(sp)
   238c8:	d8801f17 	ldw	r2,124(sp)
   238cc:	da000404 	addi	r8,sp,16
   238d0:	003fee06 	br	2388c <__alt_data_end+0xfffe388c>
   238d4:	d9002c17 	ldw	r4,176(sp)
   238d8:	d9801e04 	addi	r6,sp,120
   238dc:	b80b883a 	mov	r5,r23
   238e0:	0028b9c0 	call	28b9c <__sprint_r>
   238e4:	103c471e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   238e8:	d8c02017 	ldw	r3,128(sp)
   238ec:	df002787 	ldb	fp,158(sp)
   238f0:	da000404 	addi	r8,sp,16
   238f4:	003d5606 	br	22e50 <__alt_data_end+0xfffe2e50>
   238f8:	9080040c 	andi	r2,r18,16
   238fc:	10016126 	beq	r2,zero,23e84 <___vfprintf_internal_r+0x1888>
   23900:	d8802d17 	ldw	r2,180(sp)
   23904:	14c00017 	ldw	r19,0(r2)
   23908:	10800104 	addi	r2,r2,4
   2390c:	d8802d15 	stw	r2,180(sp)
   23910:	982dd7fa 	srai	r22,r19,31
   23914:	b005883a 	mov	r2,r22
   23918:	003c8206 	br	22b24 <__alt_data_end+0xfffe2b24>
   2391c:	9080040c 	andi	r2,r18,16
   23920:	10003526 	beq	r2,zero,239f8 <___vfprintf_internal_r+0x13fc>
   23924:	d9402d17 	ldw	r5,180(sp)
   23928:	d8c02917 	ldw	r3,164(sp)
   2392c:	d8002785 	stb	zero,158(sp)
   23930:	28800104 	addi	r2,r5,4
   23934:	2cc00017 	ldw	r19,0(r5)
   23938:	002d883a 	mov	r22,zero
   2393c:	18003716 	blt	r3,zero,23a1c <___vfprintf_internal_r+0x1420>
   23940:	00ffdfc4 	movi	r3,-129
   23944:	d8802d15 	stw	r2,180(sp)
   23948:	90e4703a 	and	r18,r18,r3
   2394c:	0039883a 	mov	fp,zero
   23950:	983df326 	beq	r19,zero,23120 <__alt_data_end+0xfffe3120>
   23954:	00800244 	movi	r2,9
   23958:	14fc7b36 	bltu	r2,r19,22b48 <__alt_data_end+0xfffe2b48>
   2395c:	d8c02817 	ldw	r3,160(sp)
   23960:	dc001dc4 	addi	r16,sp,119
   23964:	9cc00c04 	addi	r19,r19,48
   23968:	1c07c83a 	sub	r3,r3,r16
   2396c:	dcc01dc5 	stb	r19,119(sp)
   23970:	d8c02e15 	stw	r3,184(sp)
   23974:	003ce806 	br	22d18 <__alt_data_end+0xfffe2d18>
   23978:	d8803317 	ldw	r2,204(sp)
   2397c:	143fffc4 	addi	r16,r2,-1
   23980:	043f4d0e 	bge	zero,r16,236b8 <__alt_data_end+0xfffe36b8>
   23984:	07000404 	movi	fp,16
   23988:	e400810e 	bge	fp,r16,23b90 <___vfprintf_internal_r+0x1594>
   2398c:	014000f4 	movhi	r5,3
   23990:	29436884 	addi	r5,r5,3490
   23994:	d9402b15 	stw	r5,172(sp)
   23998:	01c001c4 	movi	r7,7
   2399c:	dcc02c17 	ldw	r19,176(sp)
   239a0:	00000306 	br	239b0 <___vfprintf_internal_r+0x13b4>
   239a4:	b5800204 	addi	r22,r22,8
   239a8:	843ffc04 	addi	r16,r16,-16
   239ac:	e4007b0e 	bge	fp,r16,23b9c <___vfprintf_internal_r+0x15a0>
   239b0:	18c00404 	addi	r3,r3,16
   239b4:	8c400044 	addi	r17,r17,1
   239b8:	b5000015 	stw	r20,0(r22)
   239bc:	b7000115 	stw	fp,4(r22)
   239c0:	d8c02015 	stw	r3,128(sp)
   239c4:	dc401f15 	stw	r17,124(sp)
   239c8:	3c7ff60e 	bge	r7,r17,239a4 <__alt_data_end+0xfffe39a4>
   239cc:	d9801e04 	addi	r6,sp,120
   239d0:	b80b883a 	mov	r5,r23
   239d4:	9809883a 	mov	r4,r19
   239d8:	d9c03c15 	stw	r7,240(sp)
   239dc:	0028b9c0 	call	28b9c <__sprint_r>
   239e0:	d9c03c17 	ldw	r7,240(sp)
   239e4:	103c071e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   239e8:	d8c02017 	ldw	r3,128(sp)
   239ec:	dc401f17 	ldw	r17,124(sp)
   239f0:	dd800404 	addi	r22,sp,16
   239f4:	003fec06 	br	239a8 <__alt_data_end+0xfffe39a8>
   239f8:	9080100c 	andi	r2,r18,64
   239fc:	d8002785 	stb	zero,158(sp)
   23a00:	10010e26 	beq	r2,zero,23e3c <___vfprintf_internal_r+0x1840>
   23a04:	d9002d17 	ldw	r4,180(sp)
   23a08:	d9402917 	ldw	r5,164(sp)
   23a0c:	002d883a 	mov	r22,zero
   23a10:	20800104 	addi	r2,r4,4
   23a14:	24c0000b 	ldhu	r19,0(r4)
   23a18:	283fc90e 	bge	r5,zero,23940 <__alt_data_end+0xfffe3940>
   23a1c:	d8802d15 	stw	r2,180(sp)
   23a20:	0039883a 	mov	fp,zero
   23a24:	9d84b03a 	or	r2,r19,r22
   23a28:	103c461e 	bne	r2,zero,22b44 <__alt_data_end+0xfffe2b44>
   23a2c:	00800044 	movi	r2,1
   23a30:	003e6c06 	br	233e4 <__alt_data_end+0xfffe33e4>
   23a34:	d9002c17 	ldw	r4,176(sp)
   23a38:	d9801e04 	addi	r6,sp,120
   23a3c:	b80b883a 	mov	r5,r23
   23a40:	0028b9c0 	call	28b9c <__sprint_r>
   23a44:	103bef1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23a48:	d8c02017 	ldw	r3,128(sp)
   23a4c:	da000404 	addi	r8,sp,16
   23a50:	d9003217 	ldw	r4,200(sp)
   23a54:	d8802617 	ldw	r2,152(sp)
   23a58:	d9403317 	ldw	r5,204(sp)
   23a5c:	8123883a 	add	r17,r16,r4
   23a60:	11400216 	blt	r2,r5,23a6c <___vfprintf_internal_r+0x1470>
   23a64:	9100004c 	andi	r4,r18,1
   23a68:	20000d26 	beq	r4,zero,23aa0 <___vfprintf_internal_r+0x14a4>
   23a6c:	d9003717 	ldw	r4,220(sp)
   23a70:	d9403417 	ldw	r5,208(sp)
   23a74:	1907883a 	add	r3,r3,r4
   23a78:	d9001f17 	ldw	r4,124(sp)
   23a7c:	41400015 	stw	r5,0(r8)
   23a80:	d9403717 	ldw	r5,220(sp)
   23a84:	21000044 	addi	r4,r4,1
   23a88:	d8c02015 	stw	r3,128(sp)
   23a8c:	41400115 	stw	r5,4(r8)
   23a90:	d9001f15 	stw	r4,124(sp)
   23a94:	014001c4 	movi	r5,7
   23a98:	2901e816 	blt	r5,r4,2423c <___vfprintf_internal_r+0x1c40>
   23a9c:	42000204 	addi	r8,r8,8
   23aa0:	d9003317 	ldw	r4,204(sp)
   23aa4:	8121883a 	add	r16,r16,r4
   23aa8:	2085c83a 	sub	r2,r4,r2
   23aac:	8461c83a 	sub	r16,r16,r17
   23ab0:	1400010e 	bge	r2,r16,23ab8 <___vfprintf_internal_r+0x14bc>
   23ab4:	1021883a 	mov	r16,r2
   23ab8:	04000a0e 	bge	zero,r16,23ae4 <___vfprintf_internal_r+0x14e8>
   23abc:	d9001f17 	ldw	r4,124(sp)
   23ac0:	1c07883a 	add	r3,r3,r16
   23ac4:	44400015 	stw	r17,0(r8)
   23ac8:	21000044 	addi	r4,r4,1
   23acc:	44000115 	stw	r16,4(r8)
   23ad0:	d8c02015 	stw	r3,128(sp)
   23ad4:	d9001f15 	stw	r4,124(sp)
   23ad8:	014001c4 	movi	r5,7
   23adc:	2901fb16 	blt	r5,r4,242cc <___vfprintf_internal_r+0x1cd0>
   23ae0:	42000204 	addi	r8,r8,8
   23ae4:	8001f716 	blt	r16,zero,242c4 <___vfprintf_internal_r+0x1cc8>
   23ae8:	1421c83a 	sub	r16,r2,r16
   23aec:	043d380e 	bge	zero,r16,22fd0 <__alt_data_end+0xfffe2fd0>
   23af0:	04400404 	movi	r17,16
   23af4:	d8801f17 	ldw	r2,124(sp)
   23af8:	8c3efb0e 	bge	r17,r16,236e8 <__alt_data_end+0xfffe36e8>
   23afc:	014000f4 	movhi	r5,3
   23b00:	29436884 	addi	r5,r5,3490
   23b04:	d9402b15 	stw	r5,172(sp)
   23b08:	058001c4 	movi	r22,7
   23b0c:	dcc02c17 	ldw	r19,176(sp)
   23b10:	00000306 	br	23b20 <___vfprintf_internal_r+0x1524>
   23b14:	42000204 	addi	r8,r8,8
   23b18:	843ffc04 	addi	r16,r16,-16
   23b1c:	8c3ef50e 	bge	r17,r16,236f4 <__alt_data_end+0xfffe36f4>
   23b20:	18c00404 	addi	r3,r3,16
   23b24:	10800044 	addi	r2,r2,1
   23b28:	45000015 	stw	r20,0(r8)
   23b2c:	44400115 	stw	r17,4(r8)
   23b30:	d8c02015 	stw	r3,128(sp)
   23b34:	d8801f15 	stw	r2,124(sp)
   23b38:	b0bff60e 	bge	r22,r2,23b14 <__alt_data_end+0xfffe3b14>
   23b3c:	d9801e04 	addi	r6,sp,120
   23b40:	b80b883a 	mov	r5,r23
   23b44:	9809883a 	mov	r4,r19
   23b48:	0028b9c0 	call	28b9c <__sprint_r>
   23b4c:	103bad1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23b50:	d8c02017 	ldw	r3,128(sp)
   23b54:	d8801f17 	ldw	r2,124(sp)
   23b58:	da000404 	addi	r8,sp,16
   23b5c:	003fee06 	br	23b18 <__alt_data_end+0xfffe3b18>
   23b60:	9088703a 	and	r4,r18,r2
   23b64:	203eab1e 	bne	r4,zero,23614 <__alt_data_end+0xfffe3614>
   23b68:	dc401f17 	ldw	r17,124(sp)
   23b6c:	40800115 	stw	r2,4(r8)
   23b70:	44000015 	stw	r16,0(r8)
   23b74:	8c400044 	addi	r17,r17,1
   23b78:	d8c02015 	stw	r3,128(sp)
   23b7c:	dc401f15 	stw	r17,124(sp)
   23b80:	008001c4 	movi	r2,7
   23b84:	14400e16 	blt	r2,r17,23bc0 <___vfprintf_internal_r+0x15c4>
   23b88:	45800204 	addi	r22,r8,8
   23b8c:	003eca06 	br	236b8 <__alt_data_end+0xfffe36b8>
   23b90:	010000f4 	movhi	r4,3
   23b94:	21036884 	addi	r4,r4,3490
   23b98:	d9002b15 	stw	r4,172(sp)
   23b9c:	d8802b17 	ldw	r2,172(sp)
   23ba0:	1c07883a 	add	r3,r3,r16
   23ba4:	8c400044 	addi	r17,r17,1
   23ba8:	b0800015 	stw	r2,0(r22)
   23bac:	b4000115 	stw	r16,4(r22)
   23bb0:	d8c02015 	stw	r3,128(sp)
   23bb4:	dc401f15 	stw	r17,124(sp)
   23bb8:	008001c4 	movi	r2,7
   23bbc:	147ebd0e 	bge	r2,r17,236b4 <__alt_data_end+0xfffe36b4>
   23bc0:	d9002c17 	ldw	r4,176(sp)
   23bc4:	d9801e04 	addi	r6,sp,120
   23bc8:	b80b883a 	mov	r5,r23
   23bcc:	0028b9c0 	call	28b9c <__sprint_r>
   23bd0:	103b8c1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23bd4:	d8c02017 	ldw	r3,128(sp)
   23bd8:	dc401f17 	ldw	r17,124(sp)
   23bdc:	dd800404 	addi	r22,sp,16
   23be0:	003eb506 	br	236b8 <__alt_data_end+0xfffe36b8>
   23be4:	d9002c17 	ldw	r4,176(sp)
   23be8:	d9801e04 	addi	r6,sp,120
   23bec:	b80b883a 	mov	r5,r23
   23bf0:	0028b9c0 	call	28b9c <__sprint_r>
   23bf4:	103b831e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23bf8:	d8c02017 	ldw	r3,128(sp)
   23bfc:	dc401f17 	ldw	r17,124(sp)
   23c00:	da000404 	addi	r8,sp,16
   23c04:	003e8d06 	br	2363c <__alt_data_end+0xfffe363c>
   23c08:	d9002c17 	ldw	r4,176(sp)
   23c0c:	d9801e04 	addi	r6,sp,120
   23c10:	b80b883a 	mov	r5,r23
   23c14:	0028b9c0 	call	28b9c <__sprint_r>
   23c18:	103b7a1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23c1c:	d8c02017 	ldw	r3,128(sp)
   23c20:	dc401f17 	ldw	r17,124(sp)
   23c24:	dd800404 	addi	r22,sp,16
   23c28:	003e8f06 	br	23668 <__alt_data_end+0xfffe3668>
   23c2c:	0027883a 	mov	r19,zero
   23c30:	003f4a06 	br	2395c <__alt_data_end+0xfffe395c>
   23c34:	d9002c17 	ldw	r4,176(sp)
   23c38:	d9801e04 	addi	r6,sp,120
   23c3c:	b80b883a 	mov	r5,r23
   23c40:	0028b9c0 	call	28b9c <__sprint_r>
   23c44:	103b6f1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23c48:	d8c02017 	ldw	r3,128(sp)
   23c4c:	da000404 	addi	r8,sp,16
   23c50:	003c9d06 	br	22ec8 <__alt_data_end+0xfffe2ec8>
   23c54:	04e7c83a 	sub	r19,zero,r19
   23c58:	9804c03a 	cmpne	r2,r19,zero
   23c5c:	05adc83a 	sub	r22,zero,r22
   23c60:	b0adc83a 	sub	r22,r22,r2
   23c64:	d8802917 	ldw	r2,164(sp)
   23c68:	07000b44 	movi	fp,45
   23c6c:	df002785 	stb	fp,158(sp)
   23c70:	10017b16 	blt	r2,zero,24260 <___vfprintf_internal_r+0x1c64>
   23c74:	00bfdfc4 	movi	r2,-129
   23c78:	90a4703a 	and	r18,r18,r2
   23c7c:	003bb106 	br	22b44 <__alt_data_end+0xfffe2b44>
   23c80:	d9003617 	ldw	r4,216(sp)
   23c84:	d9403817 	ldw	r5,224(sp)
   23c88:	da003d15 	stw	r8,244(sp)
   23c8c:	00289500 	call	28950 <__fpclassifyd>
   23c90:	da003d17 	ldw	r8,244(sp)
   23c94:	1000f026 	beq	r2,zero,24058 <___vfprintf_internal_r+0x1a5c>
   23c98:	d9002917 	ldw	r4,164(sp)
   23c9c:	05bff7c4 	movi	r22,-33
   23ca0:	00bfffc4 	movi	r2,-1
   23ca4:	8dac703a 	and	r22,r17,r22
   23ca8:	20820026 	beq	r4,r2,244ac <___vfprintf_internal_r+0x1eb0>
   23cac:	008011c4 	movi	r2,71
   23cb0:	b081f726 	beq	r22,r2,24490 <___vfprintf_internal_r+0x1e94>
   23cb4:	d9003817 	ldw	r4,224(sp)
   23cb8:	90c04014 	ori	r3,r18,256
   23cbc:	d8c02b15 	stw	r3,172(sp)
   23cc0:	20021516 	blt	r4,zero,24518 <___vfprintf_internal_r+0x1f1c>
   23cc4:	dcc03817 	ldw	r19,224(sp)
   23cc8:	d8002a05 	stb	zero,168(sp)
   23ccc:	00801984 	movi	r2,102
   23cd0:	8881f926 	beq	r17,r2,244b8 <___vfprintf_internal_r+0x1ebc>
   23cd4:	00801184 	movi	r2,70
   23cd8:	88821c26 	beq	r17,r2,2454c <___vfprintf_internal_r+0x1f50>
   23cdc:	00801144 	movi	r2,69
   23ce0:	b081ef26 	beq	r22,r2,244a0 <___vfprintf_internal_r+0x1ea4>
   23ce4:	d8c02917 	ldw	r3,164(sp)
   23ce8:	d8802104 	addi	r2,sp,132
   23cec:	d8800315 	stw	r2,12(sp)
   23cf0:	d9403617 	ldw	r5,216(sp)
   23cf4:	d8802504 	addi	r2,sp,148
   23cf8:	d9002c17 	ldw	r4,176(sp)
   23cfc:	d8800215 	stw	r2,8(sp)
   23d00:	d8802604 	addi	r2,sp,152
   23d04:	d8c00015 	stw	r3,0(sp)
   23d08:	d8800115 	stw	r2,4(sp)
   23d0c:	01c00084 	movi	r7,2
   23d10:	980d883a 	mov	r6,r19
   23d14:	d8c03c15 	stw	r3,240(sp)
   23d18:	da003d15 	stw	r8,244(sp)
   23d1c:	0024cd40 	call	24cd4 <_dtoa_r>
   23d20:	1021883a 	mov	r16,r2
   23d24:	008019c4 	movi	r2,103
   23d28:	d8c03c17 	ldw	r3,240(sp)
   23d2c:	da003d17 	ldw	r8,244(sp)
   23d30:	88817126 	beq	r17,r2,242f8 <___vfprintf_internal_r+0x1cfc>
   23d34:	008011c4 	movi	r2,71
   23d38:	88829226 	beq	r17,r2,24784 <___vfprintf_internal_r+0x2188>
   23d3c:	80f9883a 	add	fp,r16,r3
   23d40:	d9003617 	ldw	r4,216(sp)
   23d44:	000d883a 	mov	r6,zero
   23d48:	000f883a 	mov	r7,zero
   23d4c:	980b883a 	mov	r5,r19
   23d50:	da003d15 	stw	r8,244(sp)
   23d54:	002c4ec0 	call	2c4ec <__eqdf2>
   23d58:	da003d17 	ldw	r8,244(sp)
   23d5c:	10018d26 	beq	r2,zero,24394 <___vfprintf_internal_r+0x1d98>
   23d60:	d8802117 	ldw	r2,132(sp)
   23d64:	1700062e 	bgeu	r2,fp,23d80 <___vfprintf_internal_r+0x1784>
   23d68:	01000c04 	movi	r4,48
   23d6c:	10c00044 	addi	r3,r2,1
   23d70:	d8c02115 	stw	r3,132(sp)
   23d74:	11000005 	stb	r4,0(r2)
   23d78:	d8802117 	ldw	r2,132(sp)
   23d7c:	173ffb36 	bltu	r2,fp,23d6c <__alt_data_end+0xfffe3d6c>
   23d80:	1405c83a 	sub	r2,r2,r16
   23d84:	d8803315 	stw	r2,204(sp)
   23d88:	008011c4 	movi	r2,71
   23d8c:	b0817626 	beq	r22,r2,24368 <___vfprintf_internal_r+0x1d6c>
   23d90:	00801944 	movi	r2,101
   23d94:	1442810e 	bge	r2,r17,2479c <___vfprintf_internal_r+0x21a0>
   23d98:	d8c02617 	ldw	r3,152(sp)
   23d9c:	00801984 	movi	r2,102
   23da0:	d8c03215 	stw	r3,200(sp)
   23da4:	8881fe26 	beq	r17,r2,245a0 <___vfprintf_internal_r+0x1fa4>
   23da8:	d8c03217 	ldw	r3,200(sp)
   23dac:	d9003317 	ldw	r4,204(sp)
   23db0:	1901dd16 	blt	r3,r4,24528 <___vfprintf_internal_r+0x1f2c>
   23db4:	9480004c 	andi	r18,r18,1
   23db8:	90022b1e 	bne	r18,zero,24668 <___vfprintf_internal_r+0x206c>
   23dbc:	1805883a 	mov	r2,r3
   23dc0:	18028016 	blt	r3,zero,247c4 <___vfprintf_internal_r+0x21c8>
   23dc4:	d8c03217 	ldw	r3,200(sp)
   23dc8:	044019c4 	movi	r17,103
   23dcc:	d8c02e15 	stw	r3,184(sp)
   23dd0:	df002a07 	ldb	fp,168(sp)
   23dd4:	e001531e 	bne	fp,zero,24324 <___vfprintf_internal_r+0x1d28>
   23dd8:	df002783 	ldbu	fp,158(sp)
   23ddc:	d8802a15 	stw	r2,168(sp)
   23de0:	dc802b17 	ldw	r18,172(sp)
   23de4:	d8002915 	stw	zero,164(sp)
   23de8:	003bd106 	br	22d30 <__alt_data_end+0xfffe2d30>
   23dec:	d8802d17 	ldw	r2,180(sp)
   23df0:	d8c02d17 	ldw	r3,180(sp)
   23df4:	d9002d17 	ldw	r4,180(sp)
   23df8:	10800017 	ldw	r2,0(r2)
   23dfc:	18c00117 	ldw	r3,4(r3)
   23e00:	21000204 	addi	r4,r4,8
   23e04:	d8803615 	stw	r2,216(sp)
   23e08:	d8c03815 	stw	r3,224(sp)
   23e0c:	d9002d15 	stw	r4,180(sp)
   23e10:	003b7506 	br	22be8 <__alt_data_end+0xfffe2be8>
   23e14:	ac400007 	ldb	r17,0(r21)
   23e18:	003a5906 	br	22780 <__alt_data_end+0xfffe2780>
   23e1c:	9080100c 	andi	r2,r18,64
   23e20:	1000a826 	beq	r2,zero,240c4 <___vfprintf_internal_r+0x1ac8>
   23e24:	d9002d17 	ldw	r4,180(sp)
   23e28:	002d883a 	mov	r22,zero
   23e2c:	24c0000b 	ldhu	r19,0(r4)
   23e30:	21000104 	addi	r4,r4,4
   23e34:	d9002d15 	stw	r4,180(sp)
   23e38:	003ccb06 	br	23168 <__alt_data_end+0xfffe3168>
   23e3c:	d8c02d17 	ldw	r3,180(sp)
   23e40:	d9002917 	ldw	r4,164(sp)
   23e44:	002d883a 	mov	r22,zero
   23e48:	18800104 	addi	r2,r3,4
   23e4c:	1cc00017 	ldw	r19,0(r3)
   23e50:	203ebb0e 	bge	r4,zero,23940 <__alt_data_end+0xfffe3940>
   23e54:	003ef106 	br	23a1c <__alt_data_end+0xfffe3a1c>
   23e58:	9080040c 	andi	r2,r18,16
   23e5c:	1000921e 	bne	r2,zero,240a8 <___vfprintf_internal_r+0x1aac>
   23e60:	9480100c 	andi	r18,r18,64
   23e64:	90013926 	beq	r18,zero,2434c <___vfprintf_internal_r+0x1d50>
   23e68:	d9002d17 	ldw	r4,180(sp)
   23e6c:	d9402f17 	ldw	r5,188(sp)
   23e70:	20800017 	ldw	r2,0(r4)
   23e74:	21000104 	addi	r4,r4,4
   23e78:	d9002d15 	stw	r4,180(sp)
   23e7c:	1140000d 	sth	r5,0(r2)
   23e80:	003a1606 	br	226dc <__alt_data_end+0xfffe26dc>
   23e84:	9080100c 	andi	r2,r18,64
   23e88:	10008026 	beq	r2,zero,2408c <___vfprintf_internal_r+0x1a90>
   23e8c:	d8c02d17 	ldw	r3,180(sp)
   23e90:	1cc0000f 	ldh	r19,0(r3)
   23e94:	18c00104 	addi	r3,r3,4
   23e98:	d8c02d15 	stw	r3,180(sp)
   23e9c:	982dd7fa 	srai	r22,r19,31
   23ea0:	b005883a 	mov	r2,r22
   23ea4:	003b1f06 	br	22b24 <__alt_data_end+0xfffe2b24>
   23ea8:	9080100c 	andi	r2,r18,64
   23eac:	d8002785 	stb	zero,158(sp)
   23eb0:	10008a1e 	bne	r2,zero,240dc <___vfprintf_internal_r+0x1ae0>
   23eb4:	d9402d17 	ldw	r5,180(sp)
   23eb8:	d8c02917 	ldw	r3,164(sp)
   23ebc:	002d883a 	mov	r22,zero
   23ec0:	28800104 	addi	r2,r5,4
   23ec4:	2cc00017 	ldw	r19,0(r5)
   23ec8:	183e4b0e 	bge	r3,zero,237f8 <__alt_data_end+0xfffe37f8>
   23ecc:	9d86b03a 	or	r3,r19,r22
   23ed0:	d8802d15 	stw	r2,180(sp)
   23ed4:	183e4c1e 	bne	r3,zero,23808 <__alt_data_end+0xfffe3808>
   23ed8:	0039883a 	mov	fp,zero
   23edc:	0005883a 	mov	r2,zero
   23ee0:	003d4006 	br	233e4 <__alt_data_end+0xfffe33e4>
   23ee4:	014000f4 	movhi	r5,3
   23ee8:	29436884 	addi	r5,r5,3490
   23eec:	d9402b15 	stw	r5,172(sp)
   23ef0:	d9402b17 	ldw	r5,172(sp)
   23ef4:	1c47883a 	add	r3,r3,r17
   23ef8:	10800044 	addi	r2,r2,1
   23efc:	41400015 	stw	r5,0(r8)
   23f00:	44400115 	stw	r17,4(r8)
   23f04:	d8c02015 	stw	r3,128(sp)
   23f08:	d8801f15 	stw	r2,124(sp)
   23f0c:	010001c4 	movi	r4,7
   23f10:	20bec816 	blt	r4,r2,23a34 <__alt_data_end+0xfffe3a34>
   23f14:	42000204 	addi	r8,r8,8
   23f18:	003ecd06 	br	23a50 <__alt_data_end+0xfffe3a50>
   23f1c:	d9002917 	ldw	r4,164(sp)
   23f20:	d8002785 	stb	zero,158(sp)
   23f24:	203d2d16 	blt	r4,zero,233dc <__alt_data_end+0xfffe33dc>
   23f28:	00bfdfc4 	movi	r2,-129
   23f2c:	90a4703a 	and	r18,r18,r2
   23f30:	003a9106 	br	22978 <__alt_data_end+0xfffe2978>
   23f34:	010000f4 	movhi	r4,3
   23f38:	21036884 	addi	r4,r4,3490
   23f3c:	d9002b15 	stw	r4,172(sp)
   23f40:	003c0c06 	br	22f74 <__alt_data_end+0xfffe2f74>
   23f44:	d9002c17 	ldw	r4,176(sp)
   23f48:	d9801e04 	addi	r6,sp,120
   23f4c:	b80b883a 	mov	r5,r23
   23f50:	0028b9c0 	call	28b9c <__sprint_r>
   23f54:	103aab1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   23f58:	d8c02017 	ldw	r3,128(sp)
   23f5c:	da000404 	addi	r8,sp,16
   23f60:	003d4106 	br	23468 <__alt_data_end+0xfffe3468>
   23f64:	d8801f17 	ldw	r2,124(sp)
   23f68:	014000f4 	movhi	r5,3
   23f6c:	01000044 	movi	r4,1
   23f70:	18c00044 	addi	r3,r3,1
   23f74:	10800044 	addi	r2,r2,1
   23f78:	29436804 	addi	r5,r5,3488
   23f7c:	41000115 	stw	r4,4(r8)
   23f80:	41400015 	stw	r5,0(r8)
   23f84:	d8c02015 	stw	r3,128(sp)
   23f88:	d8801f15 	stw	r2,124(sp)
   23f8c:	010001c4 	movi	r4,7
   23f90:	20805c16 	blt	r4,r2,24104 <___vfprintf_internal_r+0x1b08>
   23f94:	42000204 	addi	r8,r8,8
   23f98:	8800041e 	bne	r17,zero,23fac <___vfprintf_internal_r+0x19b0>
   23f9c:	d8803317 	ldw	r2,204(sp)
   23fa0:	1000021e 	bne	r2,zero,23fac <___vfprintf_internal_r+0x19b0>
   23fa4:	9080004c 	andi	r2,r18,1
   23fa8:	103c0926 	beq	r2,zero,22fd0 <__alt_data_end+0xfffe2fd0>
   23fac:	d9003717 	ldw	r4,220(sp)
   23fb0:	d8801f17 	ldw	r2,124(sp)
   23fb4:	d9403417 	ldw	r5,208(sp)
   23fb8:	20c7883a 	add	r3,r4,r3
   23fbc:	10800044 	addi	r2,r2,1
   23fc0:	41000115 	stw	r4,4(r8)
   23fc4:	41400015 	stw	r5,0(r8)
   23fc8:	d8c02015 	stw	r3,128(sp)
   23fcc:	d8801f15 	stw	r2,124(sp)
   23fd0:	010001c4 	movi	r4,7
   23fd4:	20812116 	blt	r4,r2,2445c <___vfprintf_internal_r+0x1e60>
   23fd8:	42000204 	addi	r8,r8,8
   23fdc:	0463c83a 	sub	r17,zero,r17
   23fe0:	0440730e 	bge	zero,r17,241b0 <___vfprintf_internal_r+0x1bb4>
   23fe4:	05800404 	movi	r22,16
   23fe8:	b440860e 	bge	r22,r17,24204 <___vfprintf_internal_r+0x1c08>
   23fec:	014000f4 	movhi	r5,3
   23ff0:	29436884 	addi	r5,r5,3490
   23ff4:	d9402b15 	stw	r5,172(sp)
   23ff8:	070001c4 	movi	fp,7
   23ffc:	dcc02c17 	ldw	r19,176(sp)
   24000:	00000306 	br	24010 <___vfprintf_internal_r+0x1a14>
   24004:	42000204 	addi	r8,r8,8
   24008:	8c7ffc04 	addi	r17,r17,-16
   2400c:	b440800e 	bge	r22,r17,24210 <___vfprintf_internal_r+0x1c14>
   24010:	18c00404 	addi	r3,r3,16
   24014:	10800044 	addi	r2,r2,1
   24018:	45000015 	stw	r20,0(r8)
   2401c:	45800115 	stw	r22,4(r8)
   24020:	d8c02015 	stw	r3,128(sp)
   24024:	d8801f15 	stw	r2,124(sp)
   24028:	e0bff60e 	bge	fp,r2,24004 <__alt_data_end+0xfffe4004>
   2402c:	d9801e04 	addi	r6,sp,120
   24030:	b80b883a 	mov	r5,r23
   24034:	9809883a 	mov	r4,r19
   24038:	0028b9c0 	call	28b9c <__sprint_r>
   2403c:	103a711e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   24040:	d8c02017 	ldw	r3,128(sp)
   24044:	d8801f17 	ldw	r2,124(sp)
   24048:	da000404 	addi	r8,sp,16
   2404c:	003fee06 	br	24008 <__alt_data_end+0xfffe4008>
   24050:	00bfffc4 	movi	r2,-1
   24054:	003a6f06 	br	22a14 <__alt_data_end+0xfffe2a14>
   24058:	008011c4 	movi	r2,71
   2405c:	1440b816 	blt	r2,r17,24340 <___vfprintf_internal_r+0x1d44>
   24060:	040000f4 	movhi	r16,3
   24064:	84035a04 	addi	r16,r16,3432
   24068:	00c000c4 	movi	r3,3
   2406c:	00bfdfc4 	movi	r2,-129
   24070:	d8c02a15 	stw	r3,168(sp)
   24074:	90a4703a 	and	r18,r18,r2
   24078:	df002783 	ldbu	fp,158(sp)
   2407c:	d8c02e15 	stw	r3,184(sp)
   24080:	d8002915 	stw	zero,164(sp)
   24084:	d8003215 	stw	zero,200(sp)
   24088:	003b2906 	br	22d30 <__alt_data_end+0xfffe2d30>
   2408c:	d9002d17 	ldw	r4,180(sp)
   24090:	24c00017 	ldw	r19,0(r4)
   24094:	21000104 	addi	r4,r4,4
   24098:	d9002d15 	stw	r4,180(sp)
   2409c:	982dd7fa 	srai	r22,r19,31
   240a0:	b005883a 	mov	r2,r22
   240a4:	003a9f06 	br	22b24 <__alt_data_end+0xfffe2b24>
   240a8:	d9402d17 	ldw	r5,180(sp)
   240ac:	d8c02f17 	ldw	r3,188(sp)
   240b0:	28800017 	ldw	r2,0(r5)
   240b4:	29400104 	addi	r5,r5,4
   240b8:	d9402d15 	stw	r5,180(sp)
   240bc:	10c00015 	stw	r3,0(r2)
   240c0:	00398606 	br	226dc <__alt_data_end+0xfffe26dc>
   240c4:	d9402d17 	ldw	r5,180(sp)
   240c8:	002d883a 	mov	r22,zero
   240cc:	2cc00017 	ldw	r19,0(r5)
   240d0:	29400104 	addi	r5,r5,4
   240d4:	d9402d15 	stw	r5,180(sp)
   240d8:	003c2306 	br	23168 <__alt_data_end+0xfffe3168>
   240dc:	d8c02d17 	ldw	r3,180(sp)
   240e0:	d9002917 	ldw	r4,164(sp)
   240e4:	002d883a 	mov	r22,zero
   240e8:	18800104 	addi	r2,r3,4
   240ec:	1cc0000b 	ldhu	r19,0(r3)
   240f0:	203dc10e 	bge	r4,zero,237f8 <__alt_data_end+0xfffe37f8>
   240f4:	003f7506 	br	23ecc <__alt_data_end+0xfffe3ecc>
   240f8:	040000f4 	movhi	r16,3
   240fc:	84035804 	addi	r16,r16,3424
   24100:	003acc06 	br	22c34 <__alt_data_end+0xfffe2c34>
   24104:	d9002c17 	ldw	r4,176(sp)
   24108:	d9801e04 	addi	r6,sp,120
   2410c:	b80b883a 	mov	r5,r23
   24110:	0028b9c0 	call	28b9c <__sprint_r>
   24114:	103a3b1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   24118:	dc402617 	ldw	r17,152(sp)
   2411c:	d8c02017 	ldw	r3,128(sp)
   24120:	da000404 	addi	r8,sp,16
   24124:	003f9c06 	br	23f98 <__alt_data_end+0xfffe3f98>
   24128:	ac400043 	ldbu	r17,1(r21)
   2412c:	94800814 	ori	r18,r18,32
   24130:	ad400044 	addi	r21,r21,1
   24134:	8c403fcc 	andi	r17,r17,255
   24138:	8c40201c 	xori	r17,r17,128
   2413c:	8c7fe004 	addi	r17,r17,-128
   24140:	00398f06 	br	22780 <__alt_data_end+0xfffe2780>
   24144:	d8c02d15 	stw	r3,180(sp)
   24148:	0039883a 	mov	fp,zero
   2414c:	003e3506 	br	23a24 <__alt_data_end+0xfffe3a24>
   24150:	d9002c17 	ldw	r4,176(sp)
   24154:	d9801e04 	addi	r6,sp,120
   24158:	b80b883a 	mov	r5,r23
   2415c:	0028b9c0 	call	28b9c <__sprint_r>
   24160:	103a281e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   24164:	d8c02017 	ldw	r3,128(sp)
   24168:	da000404 	addi	r8,sp,16
   2416c:	003cd006 	br	234b0 <__alt_data_end+0xfffe34b0>
   24170:	8009883a 	mov	r4,r16
   24174:	da003d15 	stw	r8,244(sp)
   24178:	00223100 	call	22310 <strlen>
   2417c:	d8802e15 	stw	r2,184(sp)
   24180:	da003d17 	ldw	r8,244(sp)
   24184:	103c340e 	bge	r2,zero,23258 <__alt_data_end+0xfffe3258>
   24188:	0005883a 	mov	r2,zero
   2418c:	003c3206 	br	23258 <__alt_data_end+0xfffe3258>
   24190:	d9002c17 	ldw	r4,176(sp)
   24194:	d9801e04 	addi	r6,sp,120
   24198:	b80b883a 	mov	r5,r23
   2419c:	0028b9c0 	call	28b9c <__sprint_r>
   241a0:	103a181e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   241a4:	d8c02017 	ldw	r3,128(sp)
   241a8:	d8801f17 	ldw	r2,124(sp)
   241ac:	da000404 	addi	r8,sp,16
   241b0:	d9403317 	ldw	r5,204(sp)
   241b4:	10800044 	addi	r2,r2,1
   241b8:	44000015 	stw	r16,0(r8)
   241bc:	28c7883a 	add	r3,r5,r3
   241c0:	003b7d06 	br	22fb8 <__alt_data_end+0xfffe2fb8>
   241c4:	010000f4 	movhi	r4,3
   241c8:	21036c84 	addi	r4,r4,3506
   241cc:	d9003515 	stw	r4,212(sp)
   241d0:	003b1406 	br	22e24 <__alt_data_end+0xfffe2e24>
   241d4:	013fffc4 	movi	r4,-1
   241d8:	003a3506 	br	22ab0 <__alt_data_end+0xfffe2ab0>
   241dc:	0023883a 	mov	r17,zero
   241e0:	003d9d06 	br	23858 <__alt_data_end+0xfffe3858>
   241e4:	d9002c17 	ldw	r4,176(sp)
   241e8:	d9801e04 	addi	r6,sp,120
   241ec:	b80b883a 	mov	r5,r23
   241f0:	0028b9c0 	call	28b9c <__sprint_r>
   241f4:	103a031e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   241f8:	d8c02017 	ldw	r3,128(sp)
   241fc:	da000404 	addi	r8,sp,16
   24200:	003d9406 	br	23854 <__alt_data_end+0xfffe3854>
   24204:	010000f4 	movhi	r4,3
   24208:	21036884 	addi	r4,r4,3490
   2420c:	d9002b15 	stw	r4,172(sp)
   24210:	d9002b17 	ldw	r4,172(sp)
   24214:	1c47883a 	add	r3,r3,r17
   24218:	10800044 	addi	r2,r2,1
   2421c:	41000015 	stw	r4,0(r8)
   24220:	44400115 	stw	r17,4(r8)
   24224:	d8c02015 	stw	r3,128(sp)
   24228:	d8801f15 	stw	r2,124(sp)
   2422c:	010001c4 	movi	r4,7
   24230:	20bfd716 	blt	r4,r2,24190 <__alt_data_end+0xfffe4190>
   24234:	42000204 	addi	r8,r8,8
   24238:	003fdd06 	br	241b0 <__alt_data_end+0xfffe41b0>
   2423c:	d9002c17 	ldw	r4,176(sp)
   24240:	d9801e04 	addi	r6,sp,120
   24244:	b80b883a 	mov	r5,r23
   24248:	0028b9c0 	call	28b9c <__sprint_r>
   2424c:	1039ed1e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   24250:	d8802617 	ldw	r2,152(sp)
   24254:	d8c02017 	ldw	r3,128(sp)
   24258:	da000404 	addi	r8,sp,16
   2425c:	003e1006 	br	23aa0 <__alt_data_end+0xfffe3aa0>
   24260:	00800044 	movi	r2,1
   24264:	10803fcc 	andi	r2,r2,255
   24268:	00c00044 	movi	r3,1
   2426c:	10fa3526 	beq	r2,r3,22b44 <__alt_data_end+0xfffe2b44>
   24270:	00c00084 	movi	r3,2
   24274:	10fbcb26 	beq	r2,r3,231a4 <__alt_data_end+0xfffe31a4>
   24278:	003a8f06 	br	22cb8 <__alt_data_end+0xfffe2cb8>
   2427c:	010000f4 	movhi	r4,3
   24280:	21036c84 	addi	r4,r4,3506
   24284:	d9003515 	stw	r4,212(sp)
   24288:	003b7606 	br	23064 <__alt_data_end+0xfffe3064>
   2428c:	d8802917 	ldw	r2,164(sp)
   24290:	00c00184 	movi	r3,6
   24294:	1880012e 	bgeu	r3,r2,2429c <___vfprintf_internal_r+0x1ca0>
   24298:	1805883a 	mov	r2,r3
   2429c:	d8802e15 	stw	r2,184(sp)
   242a0:	1000ef16 	blt	r2,zero,24660 <___vfprintf_internal_r+0x2064>
   242a4:	040000f4 	movhi	r16,3
   242a8:	d8802a15 	stw	r2,168(sp)
   242ac:	dcc02d15 	stw	r19,180(sp)
   242b0:	d8002915 	stw	zero,164(sp)
   242b4:	d8003215 	stw	zero,200(sp)
   242b8:	84036604 	addi	r16,r16,3480
   242bc:	0039883a 	mov	fp,zero
   242c0:	003aa206 	br	22d4c <__alt_data_end+0xfffe2d4c>
   242c4:	0021883a 	mov	r16,zero
   242c8:	003e0706 	br	23ae8 <__alt_data_end+0xfffe3ae8>
   242cc:	d9002c17 	ldw	r4,176(sp)
   242d0:	d9801e04 	addi	r6,sp,120
   242d4:	b80b883a 	mov	r5,r23
   242d8:	0028b9c0 	call	28b9c <__sprint_r>
   242dc:	1039c91e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   242e0:	d8802617 	ldw	r2,152(sp)
   242e4:	d9403317 	ldw	r5,204(sp)
   242e8:	d8c02017 	ldw	r3,128(sp)
   242ec:	da000404 	addi	r8,sp,16
   242f0:	2885c83a 	sub	r2,r5,r2
   242f4:	003dfb06 	br	23ae4 <__alt_data_end+0xfffe3ae4>
   242f8:	9080004c 	andi	r2,r18,1
   242fc:	103e8f1e 	bne	r2,zero,23d3c <__alt_data_end+0xfffe3d3c>
   24300:	d8802117 	ldw	r2,132(sp)
   24304:	003e9e06 	br	23d80 <__alt_data_end+0xfffe3d80>
   24308:	1025883a 	mov	r18,r2
   2430c:	0039883a 	mov	fp,zero
   24310:	00800084 	movi	r2,2
   24314:	003fd306 	br	24264 <__alt_data_end+0xfffe4264>
   24318:	07000b44 	movi	fp,45
   2431c:	df002785 	stb	fp,158(sp)
   24320:	003a4006 	br	22c24 <__alt_data_end+0xfffe2c24>
   24324:	00c00b44 	movi	r3,45
   24328:	d8c02785 	stb	r3,158(sp)
   2432c:	d8802a15 	stw	r2,168(sp)
   24330:	dc802b17 	ldw	r18,172(sp)
   24334:	d8002915 	stw	zero,164(sp)
   24338:	07000b44 	movi	fp,45
   2433c:	003a8006 	br	22d40 <__alt_data_end+0xfffe2d40>
   24340:	040000f4 	movhi	r16,3
   24344:	84035b04 	addi	r16,r16,3436
   24348:	003f4706 	br	24068 <__alt_data_end+0xfffe4068>
   2434c:	d8c02d17 	ldw	r3,180(sp)
   24350:	d9002f17 	ldw	r4,188(sp)
   24354:	18800017 	ldw	r2,0(r3)
   24358:	18c00104 	addi	r3,r3,4
   2435c:	d8c02d15 	stw	r3,180(sp)
   24360:	11000015 	stw	r4,0(r2)
   24364:	0038dd06 	br	226dc <__alt_data_end+0xfffe26dc>
   24368:	dd802617 	ldw	r22,152(sp)
   2436c:	00bfff44 	movi	r2,-3
   24370:	b0801c16 	blt	r22,r2,243e4 <___vfprintf_internal_r+0x1de8>
   24374:	d9402917 	ldw	r5,164(sp)
   24378:	2d801a16 	blt	r5,r22,243e4 <___vfprintf_internal_r+0x1de8>
   2437c:	dd803215 	stw	r22,200(sp)
   24380:	003e8906 	br	23da8 <__alt_data_end+0xfffe3da8>
   24384:	010000f4 	movhi	r4,3
   24388:	21036884 	addi	r4,r4,3490
   2438c:	d9002b15 	stw	r4,172(sp)
   24390:	003c9106 	br	235d8 <__alt_data_end+0xfffe35d8>
   24394:	e005883a 	mov	r2,fp
   24398:	003e7906 	br	23d80 <__alt_data_end+0xfffe3d80>
   2439c:	d9402917 	ldw	r5,164(sp)
   243a0:	df002783 	ldbu	fp,158(sp)
   243a4:	dcc02d15 	stw	r19,180(sp)
   243a8:	d9402a15 	stw	r5,168(sp)
   243ac:	d9402e15 	stw	r5,184(sp)
   243b0:	d8002915 	stw	zero,164(sp)
   243b4:	d8003215 	stw	zero,200(sp)
   243b8:	003a5d06 	br	22d30 <__alt_data_end+0xfffe2d30>
   243bc:	9080004c 	andi	r2,r18,1
   243c0:	0039883a 	mov	fp,zero
   243c4:	10000426 	beq	r2,zero,243d8 <___vfprintf_internal_r+0x1ddc>
   243c8:	00800c04 	movi	r2,48
   243cc:	dc001dc4 	addi	r16,sp,119
   243d0:	d8801dc5 	stb	r2,119(sp)
   243d4:	003b8006 	br	231d8 <__alt_data_end+0xfffe31d8>
   243d8:	d8002e15 	stw	zero,184(sp)
   243dc:	dc001e04 	addi	r16,sp,120
   243e0:	003a4d06 	br	22d18 <__alt_data_end+0xfffe2d18>
   243e4:	8c7fff84 	addi	r17,r17,-2
   243e8:	b5bfffc4 	addi	r22,r22,-1
   243ec:	dd802615 	stw	r22,152(sp)
   243f0:	dc4022c5 	stb	r17,139(sp)
   243f4:	b000bf16 	blt	r22,zero,246f4 <___vfprintf_internal_r+0x20f8>
   243f8:	00800ac4 	movi	r2,43
   243fc:	d8802305 	stb	r2,140(sp)
   24400:	00800244 	movi	r2,9
   24404:	15807016 	blt	r2,r22,245c8 <___vfprintf_internal_r+0x1fcc>
   24408:	00800c04 	movi	r2,48
   2440c:	b5800c04 	addi	r22,r22,48
   24410:	d8802345 	stb	r2,141(sp)
   24414:	dd802385 	stb	r22,142(sp)
   24418:	d88023c4 	addi	r2,sp,143
   2441c:	df0022c4 	addi	fp,sp,139
   24420:	d8c03317 	ldw	r3,204(sp)
   24424:	1739c83a 	sub	fp,r2,fp
   24428:	d9003317 	ldw	r4,204(sp)
   2442c:	e0c7883a 	add	r3,fp,r3
   24430:	df003a15 	stw	fp,232(sp)
   24434:	d8c02e15 	stw	r3,184(sp)
   24438:	00800044 	movi	r2,1
   2443c:	1100b30e 	bge	r2,r4,2470c <___vfprintf_internal_r+0x2110>
   24440:	d8c02e17 	ldw	r3,184(sp)
   24444:	18c00044 	addi	r3,r3,1
   24448:	d8c02e15 	stw	r3,184(sp)
   2444c:	1805883a 	mov	r2,r3
   24450:	1800ac16 	blt	r3,zero,24704 <___vfprintf_internal_r+0x2108>
   24454:	d8003215 	stw	zero,200(sp)
   24458:	003e5d06 	br	23dd0 <__alt_data_end+0xfffe3dd0>
   2445c:	d9002c17 	ldw	r4,176(sp)
   24460:	d9801e04 	addi	r6,sp,120
   24464:	b80b883a 	mov	r5,r23
   24468:	0028b9c0 	call	28b9c <__sprint_r>
   2446c:	1039651e 	bne	r2,zero,22a04 <__alt_data_end+0xfffe2a04>
   24470:	dc402617 	ldw	r17,152(sp)
   24474:	d8c02017 	ldw	r3,128(sp)
   24478:	d8801f17 	ldw	r2,124(sp)
   2447c:	da000404 	addi	r8,sp,16
   24480:	003ed606 	br	23fdc <__alt_data_end+0xfffe3fdc>
   24484:	582b883a 	mov	r21,r11
   24488:	d8002915 	stw	zero,164(sp)
   2448c:	0038bd06 	br	22784 <__alt_data_end+0xfffe2784>
   24490:	d8802917 	ldw	r2,164(sp)
   24494:	103e071e 	bne	r2,zero,23cb4 <__alt_data_end+0xfffe3cb4>
   24498:	dc002915 	stw	r16,164(sp)
   2449c:	003e0506 	br	23cb4 <__alt_data_end+0xfffe3cb4>
   244a0:	d9002917 	ldw	r4,164(sp)
   244a4:	20c00044 	addi	r3,r4,1
   244a8:	003e0f06 	br	23ce8 <__alt_data_end+0xfffe3ce8>
   244ac:	01400184 	movi	r5,6
   244b0:	d9402915 	stw	r5,164(sp)
   244b4:	003dff06 	br	23cb4 <__alt_data_end+0xfffe3cb4>
   244b8:	d8802104 	addi	r2,sp,132
   244bc:	d8800315 	stw	r2,12(sp)
   244c0:	d8802504 	addi	r2,sp,148
   244c4:	d8800215 	stw	r2,8(sp)
   244c8:	d8802604 	addi	r2,sp,152
   244cc:	d8800115 	stw	r2,4(sp)
   244d0:	d8802917 	ldw	r2,164(sp)
   244d4:	d9403617 	ldw	r5,216(sp)
   244d8:	d9002c17 	ldw	r4,176(sp)
   244dc:	d8800015 	stw	r2,0(sp)
   244e0:	01c000c4 	movi	r7,3
   244e4:	980d883a 	mov	r6,r19
   244e8:	da003d15 	stw	r8,244(sp)
   244ec:	0024cd40 	call	24cd4 <_dtoa_r>
   244f0:	d8c02917 	ldw	r3,164(sp)
   244f4:	da003d17 	ldw	r8,244(sp)
   244f8:	1021883a 	mov	r16,r2
   244fc:	10f9883a 	add	fp,r2,r3
   24500:	81000007 	ldb	r4,0(r16)
   24504:	00800c04 	movi	r2,48
   24508:	20805e26 	beq	r4,r2,24684 <___vfprintf_internal_r+0x2088>
   2450c:	d8c02617 	ldw	r3,152(sp)
   24510:	e0f9883a 	add	fp,fp,r3
   24514:	003e0a06 	br	23d40 <__alt_data_end+0xfffe3d40>
   24518:	00c00b44 	movi	r3,45
   2451c:	24e0003c 	xorhi	r19,r4,32768
   24520:	d8c02a05 	stb	r3,168(sp)
   24524:	003de906 	br	23ccc <__alt_data_end+0xfffe3ccc>
   24528:	d8c03217 	ldw	r3,200(sp)
   2452c:	00c07a0e 	bge	zero,r3,24718 <___vfprintf_internal_r+0x211c>
   24530:	00800044 	movi	r2,1
   24534:	d9003317 	ldw	r4,204(sp)
   24538:	1105883a 	add	r2,r2,r4
   2453c:	d8802e15 	stw	r2,184(sp)
   24540:	10004e16 	blt	r2,zero,2467c <___vfprintf_internal_r+0x2080>
   24544:	044019c4 	movi	r17,103
   24548:	003e2106 	br	23dd0 <__alt_data_end+0xfffe3dd0>
   2454c:	d9002917 	ldw	r4,164(sp)
   24550:	d8802104 	addi	r2,sp,132
   24554:	d8800315 	stw	r2,12(sp)
   24558:	d9000015 	stw	r4,0(sp)
   2455c:	d8802504 	addi	r2,sp,148
   24560:	d9403617 	ldw	r5,216(sp)
   24564:	d9002c17 	ldw	r4,176(sp)
   24568:	d8800215 	stw	r2,8(sp)
   2456c:	d8802604 	addi	r2,sp,152
   24570:	d8800115 	stw	r2,4(sp)
   24574:	01c000c4 	movi	r7,3
   24578:	980d883a 	mov	r6,r19
   2457c:	da003d15 	stw	r8,244(sp)
   24580:	0024cd40 	call	24cd4 <_dtoa_r>
   24584:	d8c02917 	ldw	r3,164(sp)
   24588:	da003d17 	ldw	r8,244(sp)
   2458c:	1021883a 	mov	r16,r2
   24590:	00801184 	movi	r2,70
   24594:	80f9883a 	add	fp,r16,r3
   24598:	88bfd926 	beq	r17,r2,24500 <__alt_data_end+0xfffe4500>
   2459c:	003de806 	br	23d40 <__alt_data_end+0xfffe3d40>
   245a0:	d9002917 	ldw	r4,164(sp)
   245a4:	00c04d0e 	bge	zero,r3,246dc <___vfprintf_internal_r+0x20e0>
   245a8:	2000441e 	bne	r4,zero,246bc <___vfprintf_internal_r+0x20c0>
   245ac:	9480004c 	andi	r18,r18,1
   245b0:	9000421e 	bne	r18,zero,246bc <___vfprintf_internal_r+0x20c0>
   245b4:	1805883a 	mov	r2,r3
   245b8:	18007016 	blt	r3,zero,2477c <___vfprintf_internal_r+0x2180>
   245bc:	d8c03217 	ldw	r3,200(sp)
   245c0:	d8c02e15 	stw	r3,184(sp)
   245c4:	003e0206 	br	23dd0 <__alt_data_end+0xfffe3dd0>
   245c8:	df0022c4 	addi	fp,sp,139
   245cc:	dc002915 	stw	r16,164(sp)
   245d0:	4027883a 	mov	r19,r8
   245d4:	e021883a 	mov	r16,fp
   245d8:	b009883a 	mov	r4,r22
   245dc:	01400284 	movi	r5,10
   245e0:	002b2280 	call	2b228 <__modsi3>
   245e4:	10800c04 	addi	r2,r2,48
   245e8:	843fffc4 	addi	r16,r16,-1
   245ec:	b009883a 	mov	r4,r22
   245f0:	01400284 	movi	r5,10
   245f4:	80800005 	stb	r2,0(r16)
   245f8:	002b1a40 	call	2b1a4 <__divsi3>
   245fc:	102d883a 	mov	r22,r2
   24600:	00800244 	movi	r2,9
   24604:	15bff416 	blt	r2,r22,245d8 <__alt_data_end+0xfffe45d8>
   24608:	9811883a 	mov	r8,r19
   2460c:	b0800c04 	addi	r2,r22,48
   24610:	8027883a 	mov	r19,r16
   24614:	997fffc4 	addi	r5,r19,-1
   24618:	98bfffc5 	stb	r2,-1(r19)
   2461c:	dc002917 	ldw	r16,164(sp)
   24620:	2f006a2e 	bgeu	r5,fp,247cc <___vfprintf_internal_r+0x21d0>
   24624:	d9c02384 	addi	r7,sp,142
   24628:	3ccfc83a 	sub	r7,r7,r19
   2462c:	d9002344 	addi	r4,sp,141
   24630:	e1cf883a 	add	r7,fp,r7
   24634:	00000106 	br	2463c <___vfprintf_internal_r+0x2040>
   24638:	28800003 	ldbu	r2,0(r5)
   2463c:	20800005 	stb	r2,0(r4)
   24640:	21000044 	addi	r4,r4,1
   24644:	29400044 	addi	r5,r5,1
   24648:	393ffb1e 	bne	r7,r4,24638 <__alt_data_end+0xfffe4638>
   2464c:	d8802304 	addi	r2,sp,140
   24650:	14c5c83a 	sub	r2,r2,r19
   24654:	d8c02344 	addi	r3,sp,141
   24658:	1885883a 	add	r2,r3,r2
   2465c:	003f7006 	br	24420 <__alt_data_end+0xfffe4420>
   24660:	0005883a 	mov	r2,zero
   24664:	003f0f06 	br	242a4 <__alt_data_end+0xfffe42a4>
   24668:	d8c03217 	ldw	r3,200(sp)
   2466c:	18c00044 	addi	r3,r3,1
   24670:	d8c02e15 	stw	r3,184(sp)
   24674:	1805883a 	mov	r2,r3
   24678:	183fb20e 	bge	r3,zero,24544 <__alt_data_end+0xfffe4544>
   2467c:	0005883a 	mov	r2,zero
   24680:	003fb006 	br	24544 <__alt_data_end+0xfffe4544>
   24684:	d9003617 	ldw	r4,216(sp)
   24688:	000d883a 	mov	r6,zero
   2468c:	000f883a 	mov	r7,zero
   24690:	980b883a 	mov	r5,r19
   24694:	d8c03c15 	stw	r3,240(sp)
   24698:	da003d15 	stw	r8,244(sp)
   2469c:	002c4ec0 	call	2c4ec <__eqdf2>
   246a0:	d8c03c17 	ldw	r3,240(sp)
   246a4:	da003d17 	ldw	r8,244(sp)
   246a8:	103f9826 	beq	r2,zero,2450c <__alt_data_end+0xfffe450c>
   246ac:	00800044 	movi	r2,1
   246b0:	10c7c83a 	sub	r3,r2,r3
   246b4:	d8c02615 	stw	r3,152(sp)
   246b8:	003f9506 	br	24510 <__alt_data_end+0xfffe4510>
   246bc:	d9002917 	ldw	r4,164(sp)
   246c0:	d8c03217 	ldw	r3,200(sp)
   246c4:	20800044 	addi	r2,r4,1
   246c8:	1885883a 	add	r2,r3,r2
   246cc:	d8802e15 	stw	r2,184(sp)
   246d0:	103dbf0e 	bge	r2,zero,23dd0 <__alt_data_end+0xfffe3dd0>
   246d4:	0005883a 	mov	r2,zero
   246d8:	003dbd06 	br	23dd0 <__alt_data_end+0xfffe3dd0>
   246dc:	2000211e 	bne	r4,zero,24764 <___vfprintf_internal_r+0x2168>
   246e0:	9480004c 	andi	r18,r18,1
   246e4:	90001f1e 	bne	r18,zero,24764 <___vfprintf_internal_r+0x2168>
   246e8:	00800044 	movi	r2,1
   246ec:	d8802e15 	stw	r2,184(sp)
   246f0:	003db706 	br	23dd0 <__alt_data_end+0xfffe3dd0>
   246f4:	00800b44 	movi	r2,45
   246f8:	05adc83a 	sub	r22,zero,r22
   246fc:	d8802305 	stb	r2,140(sp)
   24700:	003f3f06 	br	24400 <__alt_data_end+0xfffe4400>
   24704:	0005883a 	mov	r2,zero
   24708:	003f5206 	br	24454 <__alt_data_end+0xfffe4454>
   2470c:	90a4703a 	and	r18,r18,r2
   24710:	903f4e26 	beq	r18,zero,2444c <__alt_data_end+0xfffe444c>
   24714:	003f4a06 	br	24440 <__alt_data_end+0xfffe4440>
   24718:	00800084 	movi	r2,2
   2471c:	10c5c83a 	sub	r2,r2,r3
   24720:	003f8406 	br	24534 <__alt_data_end+0xfffe4534>
   24724:	d8802d17 	ldw	r2,180(sp)
   24728:	d9002d17 	ldw	r4,180(sp)
   2472c:	ac400043 	ldbu	r17,1(r21)
   24730:	10800017 	ldw	r2,0(r2)
   24734:	582b883a 	mov	r21,r11
   24738:	d8802915 	stw	r2,164(sp)
   2473c:	20800104 	addi	r2,r4,4
   24740:	d9002917 	ldw	r4,164(sp)
   24744:	d8802d15 	stw	r2,180(sp)
   24748:	203e7a0e 	bge	r4,zero,24134 <__alt_data_end+0xfffe4134>
   2474c:	8c403fcc 	andi	r17,r17,255
   24750:	00bfffc4 	movi	r2,-1
   24754:	8c40201c 	xori	r17,r17,128
   24758:	d8802915 	stw	r2,164(sp)
   2475c:	8c7fe004 	addi	r17,r17,-128
   24760:	00380706 	br	22780 <__alt_data_end+0xfffe2780>
   24764:	d8c02917 	ldw	r3,164(sp)
   24768:	18c00084 	addi	r3,r3,2
   2476c:	d8c02e15 	stw	r3,184(sp)
   24770:	1805883a 	mov	r2,r3
   24774:	183d960e 	bge	r3,zero,23dd0 <__alt_data_end+0xfffe3dd0>
   24778:	003fd606 	br	246d4 <__alt_data_end+0xfffe46d4>
   2477c:	0005883a 	mov	r2,zero
   24780:	003f8e06 	br	245bc <__alt_data_end+0xfffe45bc>
   24784:	9080004c 	andi	r2,r18,1
   24788:	103f811e 	bne	r2,zero,24590 <__alt_data_end+0xfffe4590>
   2478c:	d8802117 	ldw	r2,132(sp)
   24790:	1405c83a 	sub	r2,r2,r16
   24794:	d8803315 	stw	r2,204(sp)
   24798:	b47ef326 	beq	r22,r17,24368 <__alt_data_end+0xfffe4368>
   2479c:	dd802617 	ldw	r22,152(sp)
   247a0:	003f1106 	br	243e8 <__alt_data_end+0xfffe43e8>
   247a4:	d9c02785 	stb	r7,158(sp)
   247a8:	00390406 	br	22bbc <__alt_data_end+0xfffe2bbc>
   247ac:	d9c02785 	stb	r7,158(sp)
   247b0:	0038d306 	br	22b00 <__alt_data_end+0xfffe2b00>
   247b4:	d9c02785 	stb	r7,158(sp)
   247b8:	003a6106 	br	23140 <__alt_data_end+0xfffe3140>
   247bc:	d9c02785 	stb	r7,158(sp)
   247c0:	003af806 	br	233a4 <__alt_data_end+0xfffe33a4>
   247c4:	0005883a 	mov	r2,zero
   247c8:	003d7e06 	br	23dc4 <__alt_data_end+0xfffe3dc4>
   247cc:	d8802344 	addi	r2,sp,141
   247d0:	003f1306 	br	24420 <__alt_data_end+0xfffe4420>
   247d4:	d9c02785 	stb	r7,158(sp)
   247d8:	00392306 	br	22c68 <__alt_data_end+0xfffe2c68>
   247dc:	d9c02785 	stb	r7,158(sp)
   247e0:	003aa906 	br	23288 <__alt_data_end+0xfffe3288>
   247e4:	d9c02785 	stb	r7,158(sp)
   247e8:	003a3d06 	br	230e0 <__alt_data_end+0xfffe30e0>
   247ec:	d9c02785 	stb	r7,158(sp)
   247f0:	003aca06 	br	2331c <__alt_data_end+0xfffe331c>

000247f4 <__vfprintf_internal>:
   247f4:	008000f4 	movhi	r2,3
   247f8:	108af504 	addi	r2,r2,11220
   247fc:	300f883a 	mov	r7,r6
   24800:	280d883a 	mov	r6,r5
   24804:	200b883a 	mov	r5,r4
   24808:	11000017 	ldw	r4,0(r2)
   2480c:	00225fc1 	jmpi	225fc <___vfprintf_internal_r>

00024810 <__sbprintf>:
   24810:	2880030b 	ldhu	r2,12(r5)
   24814:	2ac01917 	ldw	r11,100(r5)
   24818:	2a80038b 	ldhu	r10,14(r5)
   2481c:	2a400717 	ldw	r9,28(r5)
   24820:	2a000917 	ldw	r8,36(r5)
   24824:	defee204 	addi	sp,sp,-1144
   24828:	00c10004 	movi	r3,1024
   2482c:	dc011a15 	stw	r16,1128(sp)
   24830:	10bfff4c 	andi	r2,r2,65533
   24834:	2821883a 	mov	r16,r5
   24838:	d8cb883a 	add	r5,sp,r3
   2483c:	dc811c15 	stw	r18,1136(sp)
   24840:	dc411b15 	stw	r17,1132(sp)
   24844:	dfc11d15 	stw	ra,1140(sp)
   24848:	2025883a 	mov	r18,r4
   2484c:	d881030d 	sth	r2,1036(sp)
   24850:	dac11915 	stw	r11,1124(sp)
   24854:	da81038d 	sth	r10,1038(sp)
   24858:	da410715 	stw	r9,1052(sp)
   2485c:	da010915 	stw	r8,1060(sp)
   24860:	dec10015 	stw	sp,1024(sp)
   24864:	dec10415 	stw	sp,1040(sp)
   24868:	d8c10215 	stw	r3,1032(sp)
   2486c:	d8c10515 	stw	r3,1044(sp)
   24870:	d8010615 	stw	zero,1048(sp)
   24874:	00225fc0 	call	225fc <___vfprintf_internal_r>
   24878:	1023883a 	mov	r17,r2
   2487c:	10000416 	blt	r2,zero,24890 <__sbprintf+0x80>
   24880:	d9410004 	addi	r5,sp,1024
   24884:	9009883a 	mov	r4,r18
   24888:	002667c0 	call	2667c <_fflush_r>
   2488c:	10000d1e 	bne	r2,zero,248c4 <__sbprintf+0xb4>
   24890:	d881030b 	ldhu	r2,1036(sp)
   24894:	1080100c 	andi	r2,r2,64
   24898:	10000326 	beq	r2,zero,248a8 <__sbprintf+0x98>
   2489c:	8080030b 	ldhu	r2,12(r16)
   248a0:	10801014 	ori	r2,r2,64
   248a4:	8080030d 	sth	r2,12(r16)
   248a8:	8805883a 	mov	r2,r17
   248ac:	dfc11d17 	ldw	ra,1140(sp)
   248b0:	dc811c17 	ldw	r18,1136(sp)
   248b4:	dc411b17 	ldw	r17,1132(sp)
   248b8:	dc011a17 	ldw	r16,1128(sp)
   248bc:	dec11e04 	addi	sp,sp,1144
   248c0:	f800283a 	ret
   248c4:	047fffc4 	movi	r17,-1
   248c8:	003ff106 	br	24890 <__alt_data_end+0xfffe4890>

000248cc <_write_r>:
   248cc:	defffd04 	addi	sp,sp,-12
   248d0:	2805883a 	mov	r2,r5
   248d4:	dc000015 	stw	r16,0(sp)
   248d8:	040000f4 	movhi	r16,3
   248dc:	dc400115 	stw	r17,4(sp)
   248e0:	300b883a 	mov	r5,r6
   248e4:	8411f104 	addi	r16,r16,18372
   248e8:	2023883a 	mov	r17,r4
   248ec:	380d883a 	mov	r6,r7
   248f0:	1009883a 	mov	r4,r2
   248f4:	dfc00215 	stw	ra,8(sp)
   248f8:	80000015 	stw	zero,0(r16)
   248fc:	002e4600 	call	2e460 <write>
   24900:	00ffffc4 	movi	r3,-1
   24904:	10c00526 	beq	r2,r3,2491c <_write_r+0x50>
   24908:	dfc00217 	ldw	ra,8(sp)
   2490c:	dc400117 	ldw	r17,4(sp)
   24910:	dc000017 	ldw	r16,0(sp)
   24914:	dec00304 	addi	sp,sp,12
   24918:	f800283a 	ret
   2491c:	80c00017 	ldw	r3,0(r16)
   24920:	183ff926 	beq	r3,zero,24908 <__alt_data_end+0xfffe4908>
   24924:	88c00015 	stw	r3,0(r17)
   24928:	003ff706 	br	24908 <__alt_data_end+0xfffe4908>

0002492c <__swsetup_r>:
   2492c:	008000f4 	movhi	r2,3
   24930:	defffd04 	addi	sp,sp,-12
   24934:	108af504 	addi	r2,r2,11220
   24938:	dc400115 	stw	r17,4(sp)
   2493c:	2023883a 	mov	r17,r4
   24940:	11000017 	ldw	r4,0(r2)
   24944:	dc000015 	stw	r16,0(sp)
   24948:	dfc00215 	stw	ra,8(sp)
   2494c:	2821883a 	mov	r16,r5
   24950:	20000226 	beq	r4,zero,2495c <__swsetup_r+0x30>
   24954:	20800e17 	ldw	r2,56(r4)
   24958:	10003126 	beq	r2,zero,24a20 <__swsetup_r+0xf4>
   2495c:	8080030b 	ldhu	r2,12(r16)
   24960:	10c0020c 	andi	r3,r2,8
   24964:	1009883a 	mov	r4,r2
   24968:	18000f26 	beq	r3,zero,249a8 <__swsetup_r+0x7c>
   2496c:	80c00417 	ldw	r3,16(r16)
   24970:	18001526 	beq	r3,zero,249c8 <__swsetup_r+0x9c>
   24974:	1100004c 	andi	r4,r2,1
   24978:	20001c1e 	bne	r4,zero,249ec <__swsetup_r+0xc0>
   2497c:	1080008c 	andi	r2,r2,2
   24980:	1000291e 	bne	r2,zero,24a28 <__swsetup_r+0xfc>
   24984:	80800517 	ldw	r2,20(r16)
   24988:	80800215 	stw	r2,8(r16)
   2498c:	18001c26 	beq	r3,zero,24a00 <__swsetup_r+0xd4>
   24990:	0005883a 	mov	r2,zero
   24994:	dfc00217 	ldw	ra,8(sp)
   24998:	dc400117 	ldw	r17,4(sp)
   2499c:	dc000017 	ldw	r16,0(sp)
   249a0:	dec00304 	addi	sp,sp,12
   249a4:	f800283a 	ret
   249a8:	2080040c 	andi	r2,r4,16
   249ac:	10002e26 	beq	r2,zero,24a68 <__swsetup_r+0x13c>
   249b0:	2080010c 	andi	r2,r4,4
   249b4:	10001e1e 	bne	r2,zero,24a30 <__swsetup_r+0x104>
   249b8:	80c00417 	ldw	r3,16(r16)
   249bc:	20800214 	ori	r2,r4,8
   249c0:	8080030d 	sth	r2,12(r16)
   249c4:	183feb1e 	bne	r3,zero,24974 <__alt_data_end+0xfffe4974>
   249c8:	1100a00c 	andi	r4,r2,640
   249cc:	01408004 	movi	r5,512
   249d0:	217fe826 	beq	r4,r5,24974 <__alt_data_end+0xfffe4974>
   249d4:	800b883a 	mov	r5,r16
   249d8:	8809883a 	mov	r4,r17
   249dc:	00210d40 	call	210d4 <__smakebuf_r>
   249e0:	8080030b 	ldhu	r2,12(r16)
   249e4:	80c00417 	ldw	r3,16(r16)
   249e8:	003fe206 	br	24974 <__alt_data_end+0xfffe4974>
   249ec:	80800517 	ldw	r2,20(r16)
   249f0:	80000215 	stw	zero,8(r16)
   249f4:	0085c83a 	sub	r2,zero,r2
   249f8:	80800615 	stw	r2,24(r16)
   249fc:	183fe41e 	bne	r3,zero,24990 <__alt_data_end+0xfffe4990>
   24a00:	80c0030b 	ldhu	r3,12(r16)
   24a04:	0005883a 	mov	r2,zero
   24a08:	1900200c 	andi	r4,r3,128
   24a0c:	203fe126 	beq	r4,zero,24994 <__alt_data_end+0xfffe4994>
   24a10:	18c01014 	ori	r3,r3,64
   24a14:	80c0030d 	sth	r3,12(r16)
   24a18:	00bfffc4 	movi	r2,-1
   24a1c:	003fdd06 	br	24994 <__alt_data_end+0xfffe4994>
   24a20:	00208c80 	call	208c8 <__sinit>
   24a24:	003fcd06 	br	2495c <__alt_data_end+0xfffe495c>
   24a28:	0005883a 	mov	r2,zero
   24a2c:	003fd606 	br	24988 <__alt_data_end+0xfffe4988>
   24a30:	81400c17 	ldw	r5,48(r16)
   24a34:	28000626 	beq	r5,zero,24a50 <__swsetup_r+0x124>
   24a38:	80801004 	addi	r2,r16,64
   24a3c:	28800326 	beq	r5,r2,24a4c <__swsetup_r+0x120>
   24a40:	8809883a 	mov	r4,r17
   24a44:	00268d80 	call	268d8 <_free_r>
   24a48:	8100030b 	ldhu	r4,12(r16)
   24a4c:	80000c15 	stw	zero,48(r16)
   24a50:	80c00417 	ldw	r3,16(r16)
   24a54:	00bff6c4 	movi	r2,-37
   24a58:	1108703a 	and	r4,r2,r4
   24a5c:	80000115 	stw	zero,4(r16)
   24a60:	80c00015 	stw	r3,0(r16)
   24a64:	003fd506 	br	249bc <__alt_data_end+0xfffe49bc>
   24a68:	00800244 	movi	r2,9
   24a6c:	88800015 	stw	r2,0(r17)
   24a70:	20801014 	ori	r2,r4,64
   24a74:	8080030d 	sth	r2,12(r16)
   24a78:	00bfffc4 	movi	r2,-1
   24a7c:	003fc506 	br	24994 <__alt_data_end+0xfffe4994>

00024a80 <_close_r>:
   24a80:	defffd04 	addi	sp,sp,-12
   24a84:	dc000015 	stw	r16,0(sp)
   24a88:	040000f4 	movhi	r16,3
   24a8c:	dc400115 	stw	r17,4(sp)
   24a90:	8411f104 	addi	r16,r16,18372
   24a94:	2023883a 	mov	r17,r4
   24a98:	2809883a 	mov	r4,r5
   24a9c:	dfc00215 	stw	ra,8(sp)
   24aa0:	80000015 	stw	zero,0(r16)
   24aa4:	002d9fc0 	call	2d9fc <close>
   24aa8:	00ffffc4 	movi	r3,-1
   24aac:	10c00526 	beq	r2,r3,24ac4 <_close_r+0x44>
   24ab0:	dfc00217 	ldw	ra,8(sp)
   24ab4:	dc400117 	ldw	r17,4(sp)
   24ab8:	dc000017 	ldw	r16,0(sp)
   24abc:	dec00304 	addi	sp,sp,12
   24ac0:	f800283a 	ret
   24ac4:	80c00017 	ldw	r3,0(r16)
   24ac8:	183ff926 	beq	r3,zero,24ab0 <__alt_data_end+0xfffe4ab0>
   24acc:	88c00015 	stw	r3,0(r17)
   24ad0:	003ff706 	br	24ab0 <__alt_data_end+0xfffe4ab0>

00024ad4 <quorem>:
   24ad4:	defff704 	addi	sp,sp,-36
   24ad8:	dc800215 	stw	r18,8(sp)
   24adc:	20800417 	ldw	r2,16(r4)
   24ae0:	2c800417 	ldw	r18,16(r5)
   24ae4:	dfc00815 	stw	ra,32(sp)
   24ae8:	ddc00715 	stw	r23,28(sp)
   24aec:	dd800615 	stw	r22,24(sp)
   24af0:	dd400515 	stw	r21,20(sp)
   24af4:	dd000415 	stw	r20,16(sp)
   24af8:	dcc00315 	stw	r19,12(sp)
   24afc:	dc400115 	stw	r17,4(sp)
   24b00:	dc000015 	stw	r16,0(sp)
   24b04:	14807116 	blt	r2,r18,24ccc <quorem+0x1f8>
   24b08:	94bfffc4 	addi	r18,r18,-1
   24b0c:	94ad883a 	add	r22,r18,r18
   24b10:	b5ad883a 	add	r22,r22,r22
   24b14:	2c400504 	addi	r17,r5,20
   24b18:	8da9883a 	add	r20,r17,r22
   24b1c:	25400504 	addi	r21,r4,20
   24b20:	282f883a 	mov	r23,r5
   24b24:	adad883a 	add	r22,r21,r22
   24b28:	a1400017 	ldw	r5,0(r20)
   24b2c:	2021883a 	mov	r16,r4
   24b30:	b1000017 	ldw	r4,0(r22)
   24b34:	29400044 	addi	r5,r5,1
   24b38:	002b29c0 	call	2b29c <__udivsi3>
   24b3c:	1027883a 	mov	r19,r2
   24b40:	10002c26 	beq	r2,zero,24bf4 <quorem+0x120>
   24b44:	a813883a 	mov	r9,r21
   24b48:	880b883a 	mov	r5,r17
   24b4c:	0009883a 	mov	r4,zero
   24b50:	000d883a 	mov	r6,zero
   24b54:	2a000017 	ldw	r8,0(r5)
   24b58:	49c00017 	ldw	r7,0(r9)
   24b5c:	29400104 	addi	r5,r5,4
   24b60:	40bfffcc 	andi	r2,r8,65535
   24b64:	14c5383a 	mul	r2,r2,r19
   24b68:	4010d43a 	srli	r8,r8,16
   24b6c:	38ffffcc 	andi	r3,r7,65535
   24b70:	1105883a 	add	r2,r2,r4
   24b74:	1008d43a 	srli	r4,r2,16
   24b78:	44d1383a 	mul	r8,r8,r19
   24b7c:	198d883a 	add	r6,r3,r6
   24b80:	10ffffcc 	andi	r3,r2,65535
   24b84:	30c7c83a 	sub	r3,r6,r3
   24b88:	380ed43a 	srli	r7,r7,16
   24b8c:	4105883a 	add	r2,r8,r4
   24b90:	180dd43a 	srai	r6,r3,16
   24b94:	113fffcc 	andi	r4,r2,65535
   24b98:	390fc83a 	sub	r7,r7,r4
   24b9c:	398d883a 	add	r6,r7,r6
   24ba0:	300e943a 	slli	r7,r6,16
   24ba4:	18ffffcc 	andi	r3,r3,65535
   24ba8:	1008d43a 	srli	r4,r2,16
   24bac:	38ceb03a 	or	r7,r7,r3
   24bb0:	49c00015 	stw	r7,0(r9)
   24bb4:	300dd43a 	srai	r6,r6,16
   24bb8:	4a400104 	addi	r9,r9,4
   24bbc:	a17fe52e 	bgeu	r20,r5,24b54 <__alt_data_end+0xfffe4b54>
   24bc0:	b0800017 	ldw	r2,0(r22)
   24bc4:	10000b1e 	bne	r2,zero,24bf4 <quorem+0x120>
   24bc8:	b0bfff04 	addi	r2,r22,-4
   24bcc:	a880082e 	bgeu	r21,r2,24bf0 <quorem+0x11c>
   24bd0:	b0ffff17 	ldw	r3,-4(r22)
   24bd4:	18000326 	beq	r3,zero,24be4 <quorem+0x110>
   24bd8:	00000506 	br	24bf0 <quorem+0x11c>
   24bdc:	10c00017 	ldw	r3,0(r2)
   24be0:	1800031e 	bne	r3,zero,24bf0 <quorem+0x11c>
   24be4:	10bfff04 	addi	r2,r2,-4
   24be8:	94bfffc4 	addi	r18,r18,-1
   24bec:	a8bffb36 	bltu	r21,r2,24bdc <__alt_data_end+0xfffe4bdc>
   24bf0:	84800415 	stw	r18,16(r16)
   24bf4:	b80b883a 	mov	r5,r23
   24bf8:	8009883a 	mov	r4,r16
   24bfc:	0027c580 	call	27c58 <__mcmp>
   24c00:	10002616 	blt	r2,zero,24c9c <quorem+0x1c8>
   24c04:	9cc00044 	addi	r19,r19,1
   24c08:	a805883a 	mov	r2,r21
   24c0c:	000b883a 	mov	r5,zero
   24c10:	11000017 	ldw	r4,0(r2)
   24c14:	89800017 	ldw	r6,0(r17)
   24c18:	10800104 	addi	r2,r2,4
   24c1c:	20ffffcc 	andi	r3,r4,65535
   24c20:	194b883a 	add	r5,r3,r5
   24c24:	30ffffcc 	andi	r3,r6,65535
   24c28:	28c7c83a 	sub	r3,r5,r3
   24c2c:	300cd43a 	srli	r6,r6,16
   24c30:	2008d43a 	srli	r4,r4,16
   24c34:	180bd43a 	srai	r5,r3,16
   24c38:	18ffffcc 	andi	r3,r3,65535
   24c3c:	2189c83a 	sub	r4,r4,r6
   24c40:	2149883a 	add	r4,r4,r5
   24c44:	200c943a 	slli	r6,r4,16
   24c48:	8c400104 	addi	r17,r17,4
   24c4c:	200bd43a 	srai	r5,r4,16
   24c50:	30c6b03a 	or	r3,r6,r3
   24c54:	10ffff15 	stw	r3,-4(r2)
   24c58:	a47fed2e 	bgeu	r20,r17,24c10 <__alt_data_end+0xfffe4c10>
   24c5c:	9485883a 	add	r2,r18,r18
   24c60:	1085883a 	add	r2,r2,r2
   24c64:	a887883a 	add	r3,r21,r2
   24c68:	18800017 	ldw	r2,0(r3)
   24c6c:	10000b1e 	bne	r2,zero,24c9c <quorem+0x1c8>
   24c70:	18bfff04 	addi	r2,r3,-4
   24c74:	a880082e 	bgeu	r21,r2,24c98 <quorem+0x1c4>
   24c78:	18ffff17 	ldw	r3,-4(r3)
   24c7c:	18000326 	beq	r3,zero,24c8c <quorem+0x1b8>
   24c80:	00000506 	br	24c98 <quorem+0x1c4>
   24c84:	10c00017 	ldw	r3,0(r2)
   24c88:	1800031e 	bne	r3,zero,24c98 <quorem+0x1c4>
   24c8c:	10bfff04 	addi	r2,r2,-4
   24c90:	94bfffc4 	addi	r18,r18,-1
   24c94:	a8bffb36 	bltu	r21,r2,24c84 <__alt_data_end+0xfffe4c84>
   24c98:	84800415 	stw	r18,16(r16)
   24c9c:	9805883a 	mov	r2,r19
   24ca0:	dfc00817 	ldw	ra,32(sp)
   24ca4:	ddc00717 	ldw	r23,28(sp)
   24ca8:	dd800617 	ldw	r22,24(sp)
   24cac:	dd400517 	ldw	r21,20(sp)
   24cb0:	dd000417 	ldw	r20,16(sp)
   24cb4:	dcc00317 	ldw	r19,12(sp)
   24cb8:	dc800217 	ldw	r18,8(sp)
   24cbc:	dc400117 	ldw	r17,4(sp)
   24cc0:	dc000017 	ldw	r16,0(sp)
   24cc4:	dec00904 	addi	sp,sp,36
   24cc8:	f800283a 	ret
   24ccc:	0005883a 	mov	r2,zero
   24cd0:	003ff306 	br	24ca0 <__alt_data_end+0xfffe4ca0>

00024cd4 <_dtoa_r>:
   24cd4:	20801017 	ldw	r2,64(r4)
   24cd8:	deffde04 	addi	sp,sp,-136
   24cdc:	df002015 	stw	fp,128(sp)
   24ce0:	dcc01b15 	stw	r19,108(sp)
   24ce4:	dc801a15 	stw	r18,104(sp)
   24ce8:	dc401915 	stw	r17,100(sp)
   24cec:	dc001815 	stw	r16,96(sp)
   24cf0:	dfc02115 	stw	ra,132(sp)
   24cf4:	ddc01f15 	stw	r23,124(sp)
   24cf8:	dd801e15 	stw	r22,120(sp)
   24cfc:	dd401d15 	stw	r21,116(sp)
   24d00:	dd001c15 	stw	r20,112(sp)
   24d04:	d9c00315 	stw	r7,12(sp)
   24d08:	2039883a 	mov	fp,r4
   24d0c:	3023883a 	mov	r17,r6
   24d10:	2825883a 	mov	r18,r5
   24d14:	dc002417 	ldw	r16,144(sp)
   24d18:	3027883a 	mov	r19,r6
   24d1c:	10000826 	beq	r2,zero,24d40 <_dtoa_r+0x6c>
   24d20:	21801117 	ldw	r6,68(r4)
   24d24:	00c00044 	movi	r3,1
   24d28:	100b883a 	mov	r5,r2
   24d2c:	1986983a 	sll	r3,r3,r6
   24d30:	11800115 	stw	r6,4(r2)
   24d34:	10c00215 	stw	r3,8(r2)
   24d38:	00274380 	call	27438 <_Bfree>
   24d3c:	e0001015 	stw	zero,64(fp)
   24d40:	88002e16 	blt	r17,zero,24dfc <_dtoa_r+0x128>
   24d44:	80000015 	stw	zero,0(r16)
   24d48:	889ffc2c 	andhi	r2,r17,32752
   24d4c:	00dffc34 	movhi	r3,32752
   24d50:	10c01c26 	beq	r2,r3,24dc4 <_dtoa_r+0xf0>
   24d54:	000d883a 	mov	r6,zero
   24d58:	000f883a 	mov	r7,zero
   24d5c:	9009883a 	mov	r4,r18
   24d60:	980b883a 	mov	r5,r19
   24d64:	002c4ec0 	call	2c4ec <__eqdf2>
   24d68:	10002b1e 	bne	r2,zero,24e18 <_dtoa_r+0x144>
   24d6c:	d9c02317 	ldw	r7,140(sp)
   24d70:	00800044 	movi	r2,1
   24d74:	38800015 	stw	r2,0(r7)
   24d78:	d8802517 	ldw	r2,148(sp)
   24d7c:	10019e26 	beq	r2,zero,253f8 <_dtoa_r+0x724>
   24d80:	d8c02517 	ldw	r3,148(sp)
   24d84:	008000f4 	movhi	r2,3
   24d88:	10836844 	addi	r2,r2,3489
   24d8c:	18800015 	stw	r2,0(r3)
   24d90:	10bfffc4 	addi	r2,r2,-1
   24d94:	dfc02117 	ldw	ra,132(sp)
   24d98:	df002017 	ldw	fp,128(sp)
   24d9c:	ddc01f17 	ldw	r23,124(sp)
   24da0:	dd801e17 	ldw	r22,120(sp)
   24da4:	dd401d17 	ldw	r21,116(sp)
   24da8:	dd001c17 	ldw	r20,112(sp)
   24dac:	dcc01b17 	ldw	r19,108(sp)
   24db0:	dc801a17 	ldw	r18,104(sp)
   24db4:	dc401917 	ldw	r17,100(sp)
   24db8:	dc001817 	ldw	r16,96(sp)
   24dbc:	dec02204 	addi	sp,sp,136
   24dc0:	f800283a 	ret
   24dc4:	d8c02317 	ldw	r3,140(sp)
   24dc8:	0089c3c4 	movi	r2,9999
   24dcc:	18800015 	stw	r2,0(r3)
   24dd0:	90017726 	beq	r18,zero,253b0 <_dtoa_r+0x6dc>
   24dd4:	008000f4 	movhi	r2,3
   24dd8:	10837404 	addi	r2,r2,3536
   24ddc:	d9002517 	ldw	r4,148(sp)
   24de0:	203fec26 	beq	r4,zero,24d94 <__alt_data_end+0xfffe4d94>
   24de4:	10c000c7 	ldb	r3,3(r2)
   24de8:	1801781e 	bne	r3,zero,253cc <_dtoa_r+0x6f8>
   24dec:	10c000c4 	addi	r3,r2,3
   24df0:	d9802517 	ldw	r6,148(sp)
   24df4:	30c00015 	stw	r3,0(r6)
   24df8:	003fe606 	br	24d94 <__alt_data_end+0xfffe4d94>
   24dfc:	04e00034 	movhi	r19,32768
   24e00:	9cffffc4 	addi	r19,r19,-1
   24e04:	00800044 	movi	r2,1
   24e08:	8ce6703a 	and	r19,r17,r19
   24e0c:	80800015 	stw	r2,0(r16)
   24e10:	9823883a 	mov	r17,r19
   24e14:	003fcc06 	br	24d48 <__alt_data_end+0xfffe4d48>
   24e18:	d8800204 	addi	r2,sp,8
   24e1c:	d8800015 	stw	r2,0(sp)
   24e20:	d9c00104 	addi	r7,sp,4
   24e24:	900b883a 	mov	r5,r18
   24e28:	980d883a 	mov	r6,r19
   24e2c:	e009883a 	mov	r4,fp
   24e30:	8820d53a 	srli	r16,r17,20
   24e34:	00280240 	call	28024 <__d2b>
   24e38:	d8800915 	stw	r2,36(sp)
   24e3c:	8001651e 	bne	r16,zero,253d4 <_dtoa_r+0x700>
   24e40:	dd800217 	ldw	r22,8(sp)
   24e44:	dc000117 	ldw	r16,4(sp)
   24e48:	00800804 	movi	r2,32
   24e4c:	b421883a 	add	r16,r22,r16
   24e50:	80c10c84 	addi	r3,r16,1074
   24e54:	10c2d10e 	bge	r2,r3,2599c <_dtoa_r+0xcc8>
   24e58:	00801004 	movi	r2,64
   24e5c:	81010484 	addi	r4,r16,1042
   24e60:	10c7c83a 	sub	r3,r2,r3
   24e64:	9108d83a 	srl	r4,r18,r4
   24e68:	88e2983a 	sll	r17,r17,r3
   24e6c:	2448b03a 	or	r4,r4,r17
   24e70:	002d8b40 	call	2d8b4 <__floatunsidf>
   24e74:	017f8434 	movhi	r5,65040
   24e78:	01800044 	movi	r6,1
   24e7c:	1009883a 	mov	r4,r2
   24e80:	194b883a 	add	r5,r3,r5
   24e84:	843fffc4 	addi	r16,r16,-1
   24e88:	d9801115 	stw	r6,68(sp)
   24e8c:	000d883a 	mov	r6,zero
   24e90:	01cffe34 	movhi	r7,16376
   24e94:	002ce5c0 	call	2ce5c <__subdf3>
   24e98:	0198dbf4 	movhi	r6,25455
   24e9c:	01cff4f4 	movhi	r7,16339
   24ea0:	3190d844 	addi	r6,r6,17249
   24ea4:	39e1e9c4 	addi	r7,r7,-30809
   24ea8:	1009883a 	mov	r4,r2
   24eac:	180b883a 	mov	r5,r3
   24eb0:	002c7440 	call	2c744 <__muldf3>
   24eb4:	01a2d874 	movhi	r6,35681
   24eb8:	01cff1f4 	movhi	r7,16327
   24ebc:	31b22cc4 	addi	r6,r6,-14157
   24ec0:	39e28a04 	addi	r7,r7,-30168
   24ec4:	180b883a 	mov	r5,r3
   24ec8:	1009883a 	mov	r4,r2
   24ecc:	002b3580 	call	2b358 <__adddf3>
   24ed0:	8009883a 	mov	r4,r16
   24ed4:	1029883a 	mov	r20,r2
   24ed8:	1823883a 	mov	r17,r3
   24edc:	002d7d80 	call	2d7d8 <__floatsidf>
   24ee0:	019427f4 	movhi	r6,20639
   24ee4:	01cff4f4 	movhi	r7,16339
   24ee8:	319e7ec4 	addi	r6,r6,31227
   24eec:	39d104c4 	addi	r7,r7,17427
   24ef0:	1009883a 	mov	r4,r2
   24ef4:	180b883a 	mov	r5,r3
   24ef8:	002c7440 	call	2c744 <__muldf3>
   24efc:	100d883a 	mov	r6,r2
   24f00:	180f883a 	mov	r7,r3
   24f04:	a009883a 	mov	r4,r20
   24f08:	880b883a 	mov	r5,r17
   24f0c:	002b3580 	call	2b358 <__adddf3>
   24f10:	1009883a 	mov	r4,r2
   24f14:	180b883a 	mov	r5,r3
   24f18:	1029883a 	mov	r20,r2
   24f1c:	1823883a 	mov	r17,r3
   24f20:	002d7580 	call	2d758 <__fixdfsi>
   24f24:	000d883a 	mov	r6,zero
   24f28:	000f883a 	mov	r7,zero
   24f2c:	a009883a 	mov	r4,r20
   24f30:	880b883a 	mov	r5,r17
   24f34:	d8800515 	stw	r2,20(sp)
   24f38:	002c6500 	call	2c650 <__ledf2>
   24f3c:	10028716 	blt	r2,zero,2595c <_dtoa_r+0xc88>
   24f40:	d8c00517 	ldw	r3,20(sp)
   24f44:	00800584 	movi	r2,22
   24f48:	10c27536 	bltu	r2,r3,25920 <_dtoa_r+0xc4c>
   24f4c:	180490fa 	slli	r2,r3,3
   24f50:	00c000f4 	movhi	r3,3
   24f54:	18c38f04 	addi	r3,r3,3644
   24f58:	1885883a 	add	r2,r3,r2
   24f5c:	11000017 	ldw	r4,0(r2)
   24f60:	11400117 	ldw	r5,4(r2)
   24f64:	900d883a 	mov	r6,r18
   24f68:	980f883a 	mov	r7,r19
   24f6c:	002c5740 	call	2c574 <__gedf2>
   24f70:	00828d0e 	bge	zero,r2,259a8 <_dtoa_r+0xcd4>
   24f74:	d9000517 	ldw	r4,20(sp)
   24f78:	d8000e15 	stw	zero,56(sp)
   24f7c:	213fffc4 	addi	r4,r4,-1
   24f80:	d9000515 	stw	r4,20(sp)
   24f84:	b42dc83a 	sub	r22,r22,r16
   24f88:	b5bfffc4 	addi	r22,r22,-1
   24f8c:	b0026f16 	blt	r22,zero,2594c <_dtoa_r+0xc78>
   24f90:	d8000815 	stw	zero,32(sp)
   24f94:	d9c00517 	ldw	r7,20(sp)
   24f98:	38026416 	blt	r7,zero,2592c <_dtoa_r+0xc58>
   24f9c:	b1ed883a 	add	r22,r22,r7
   24fa0:	d9c00d15 	stw	r7,52(sp)
   24fa4:	d8000a15 	stw	zero,40(sp)
   24fa8:	d9800317 	ldw	r6,12(sp)
   24fac:	00800244 	movi	r2,9
   24fb0:	11811436 	bltu	r2,r6,25404 <_dtoa_r+0x730>
   24fb4:	00800144 	movi	r2,5
   24fb8:	1184e10e 	bge	r2,r6,26340 <_dtoa_r+0x166c>
   24fbc:	31bfff04 	addi	r6,r6,-4
   24fc0:	d9800315 	stw	r6,12(sp)
   24fc4:	0023883a 	mov	r17,zero
   24fc8:	d9800317 	ldw	r6,12(sp)
   24fcc:	008000c4 	movi	r2,3
   24fd0:	30836726 	beq	r6,r2,25d70 <_dtoa_r+0x109c>
   24fd4:	1183410e 	bge	r2,r6,25cdc <_dtoa_r+0x1008>
   24fd8:	d9c00317 	ldw	r7,12(sp)
   24fdc:	00800104 	movi	r2,4
   24fe0:	38827c26 	beq	r7,r2,259d4 <_dtoa_r+0xd00>
   24fe4:	00800144 	movi	r2,5
   24fe8:	3884c41e 	bne	r7,r2,262fc <_dtoa_r+0x1628>
   24fec:	00800044 	movi	r2,1
   24ff0:	d8800b15 	stw	r2,44(sp)
   24ff4:	d8c00517 	ldw	r3,20(sp)
   24ff8:	d9002217 	ldw	r4,136(sp)
   24ffc:	1907883a 	add	r3,r3,r4
   25000:	19800044 	addi	r6,r3,1
   25004:	d8c00c15 	stw	r3,48(sp)
   25008:	d9800615 	stw	r6,24(sp)
   2500c:	0183a40e 	bge	zero,r6,25ea0 <_dtoa_r+0x11cc>
   25010:	d9800617 	ldw	r6,24(sp)
   25014:	3021883a 	mov	r16,r6
   25018:	e0001115 	stw	zero,68(fp)
   2501c:	008005c4 	movi	r2,23
   25020:	1184c92e 	bgeu	r2,r6,26348 <_dtoa_r+0x1674>
   25024:	00c00044 	movi	r3,1
   25028:	00800104 	movi	r2,4
   2502c:	1085883a 	add	r2,r2,r2
   25030:	11000504 	addi	r4,r2,20
   25034:	180b883a 	mov	r5,r3
   25038:	18c00044 	addi	r3,r3,1
   2503c:	313ffb2e 	bgeu	r6,r4,2502c <__alt_data_end+0xfffe502c>
   25040:	e1401115 	stw	r5,68(fp)
   25044:	e009883a 	mov	r4,fp
   25048:	00273900 	call	27390 <_Balloc>
   2504c:	d8800715 	stw	r2,28(sp)
   25050:	e0801015 	stw	r2,64(fp)
   25054:	00800384 	movi	r2,14
   25058:	1400f736 	bltu	r2,r16,25438 <_dtoa_r+0x764>
   2505c:	8800f626 	beq	r17,zero,25438 <_dtoa_r+0x764>
   25060:	d9c00517 	ldw	r7,20(sp)
   25064:	01c39a0e 	bge	zero,r7,25ed0 <_dtoa_r+0x11fc>
   25068:	388003cc 	andi	r2,r7,15
   2506c:	100490fa 	slli	r2,r2,3
   25070:	382bd13a 	srai	r21,r7,4
   25074:	00c000f4 	movhi	r3,3
   25078:	18c38f04 	addi	r3,r3,3644
   2507c:	1885883a 	add	r2,r3,r2
   25080:	a8c0040c 	andi	r3,r21,16
   25084:	12400017 	ldw	r9,0(r2)
   25088:	12000117 	ldw	r8,4(r2)
   2508c:	18037926 	beq	r3,zero,25e74 <_dtoa_r+0x11a0>
   25090:	008000f4 	movhi	r2,3
   25094:	10838504 	addi	r2,r2,3604
   25098:	11800817 	ldw	r6,32(r2)
   2509c:	11c00917 	ldw	r7,36(r2)
   250a0:	9009883a 	mov	r4,r18
   250a4:	980b883a 	mov	r5,r19
   250a8:	da001715 	stw	r8,92(sp)
   250ac:	da401615 	stw	r9,88(sp)
   250b0:	002bc040 	call	2bc04 <__divdf3>
   250b4:	da001717 	ldw	r8,92(sp)
   250b8:	da401617 	ldw	r9,88(sp)
   250bc:	ad4003cc 	andi	r21,r21,15
   250c0:	040000c4 	movi	r16,3
   250c4:	1023883a 	mov	r17,r2
   250c8:	1829883a 	mov	r20,r3
   250cc:	a8001126 	beq	r21,zero,25114 <_dtoa_r+0x440>
   250d0:	05c000f4 	movhi	r23,3
   250d4:	bdc38504 	addi	r23,r23,3604
   250d8:	4805883a 	mov	r2,r9
   250dc:	4007883a 	mov	r3,r8
   250e0:	a980004c 	andi	r6,r21,1
   250e4:	1009883a 	mov	r4,r2
   250e8:	a82bd07a 	srai	r21,r21,1
   250ec:	180b883a 	mov	r5,r3
   250f0:	30000426 	beq	r6,zero,25104 <_dtoa_r+0x430>
   250f4:	b9800017 	ldw	r6,0(r23)
   250f8:	b9c00117 	ldw	r7,4(r23)
   250fc:	84000044 	addi	r16,r16,1
   25100:	002c7440 	call	2c744 <__muldf3>
   25104:	bdc00204 	addi	r23,r23,8
   25108:	a83ff51e 	bne	r21,zero,250e0 <__alt_data_end+0xfffe50e0>
   2510c:	1013883a 	mov	r9,r2
   25110:	1811883a 	mov	r8,r3
   25114:	480d883a 	mov	r6,r9
   25118:	400f883a 	mov	r7,r8
   2511c:	8809883a 	mov	r4,r17
   25120:	a00b883a 	mov	r5,r20
   25124:	002bc040 	call	2bc04 <__divdf3>
   25128:	d8800f15 	stw	r2,60(sp)
   2512c:	d8c01015 	stw	r3,64(sp)
   25130:	d8c00e17 	ldw	r3,56(sp)
   25134:	18000626 	beq	r3,zero,25150 <_dtoa_r+0x47c>
   25138:	d9000f17 	ldw	r4,60(sp)
   2513c:	d9401017 	ldw	r5,64(sp)
   25140:	000d883a 	mov	r6,zero
   25144:	01cffc34 	movhi	r7,16368
   25148:	002c6500 	call	2c650 <__ledf2>
   2514c:	10040b16 	blt	r2,zero,2617c <_dtoa_r+0x14a8>
   25150:	8009883a 	mov	r4,r16
   25154:	002d7d80 	call	2d7d8 <__floatsidf>
   25158:	d9800f17 	ldw	r6,60(sp)
   2515c:	d9c01017 	ldw	r7,64(sp)
   25160:	1009883a 	mov	r4,r2
   25164:	180b883a 	mov	r5,r3
   25168:	002c7440 	call	2c744 <__muldf3>
   2516c:	000d883a 	mov	r6,zero
   25170:	01d00734 	movhi	r7,16412
   25174:	1009883a 	mov	r4,r2
   25178:	180b883a 	mov	r5,r3
   2517c:	002b3580 	call	2b358 <__adddf3>
   25180:	1021883a 	mov	r16,r2
   25184:	d8800617 	ldw	r2,24(sp)
   25188:	047f3034 	movhi	r17,64704
   2518c:	1c63883a 	add	r17,r3,r17
   25190:	10031826 	beq	r2,zero,25df4 <_dtoa_r+0x1120>
   25194:	d8c00517 	ldw	r3,20(sp)
   25198:	db000617 	ldw	r12,24(sp)
   2519c:	d8c01315 	stw	r3,76(sp)
   251a0:	d9000b17 	ldw	r4,44(sp)
   251a4:	20038f26 	beq	r4,zero,25fe4 <_dtoa_r+0x1310>
   251a8:	60bfffc4 	addi	r2,r12,-1
   251ac:	100490fa 	slli	r2,r2,3
   251b0:	00c000f4 	movhi	r3,3
   251b4:	18c38f04 	addi	r3,r3,3644
   251b8:	1885883a 	add	r2,r3,r2
   251bc:	11800017 	ldw	r6,0(r2)
   251c0:	11c00117 	ldw	r7,4(r2)
   251c4:	d8800717 	ldw	r2,28(sp)
   251c8:	0009883a 	mov	r4,zero
   251cc:	014ff834 	movhi	r5,16352
   251d0:	db001615 	stw	r12,88(sp)
   251d4:	15c00044 	addi	r23,r2,1
   251d8:	002bc040 	call	2bc04 <__divdf3>
   251dc:	800d883a 	mov	r6,r16
   251e0:	880f883a 	mov	r7,r17
   251e4:	1009883a 	mov	r4,r2
   251e8:	180b883a 	mov	r5,r3
   251ec:	002ce5c0 	call	2ce5c <__subdf3>
   251f0:	d9401017 	ldw	r5,64(sp)
   251f4:	d9000f17 	ldw	r4,60(sp)
   251f8:	102b883a 	mov	r21,r2
   251fc:	d8c01215 	stw	r3,72(sp)
   25200:	002d7580 	call	2d758 <__fixdfsi>
   25204:	1009883a 	mov	r4,r2
   25208:	1029883a 	mov	r20,r2
   2520c:	002d7d80 	call	2d7d8 <__floatsidf>
   25210:	d9000f17 	ldw	r4,60(sp)
   25214:	d9401017 	ldw	r5,64(sp)
   25218:	100d883a 	mov	r6,r2
   2521c:	180f883a 	mov	r7,r3
   25220:	002ce5c0 	call	2ce5c <__subdf3>
   25224:	1823883a 	mov	r17,r3
   25228:	d8c00717 	ldw	r3,28(sp)
   2522c:	d9401217 	ldw	r5,72(sp)
   25230:	a2000c04 	addi	r8,r20,48
   25234:	1021883a 	mov	r16,r2
   25238:	1a000005 	stb	r8,0(r3)
   2523c:	800d883a 	mov	r6,r16
   25240:	880f883a 	mov	r7,r17
   25244:	a809883a 	mov	r4,r21
   25248:	4029883a 	mov	r20,r8
   2524c:	002c5740 	call	2c574 <__gedf2>
   25250:	00841d16 	blt	zero,r2,262c8 <_dtoa_r+0x15f4>
   25254:	800d883a 	mov	r6,r16
   25258:	880f883a 	mov	r7,r17
   2525c:	0009883a 	mov	r4,zero
   25260:	014ffc34 	movhi	r5,16368
   25264:	002ce5c0 	call	2ce5c <__subdf3>
   25268:	d9401217 	ldw	r5,72(sp)
   2526c:	100d883a 	mov	r6,r2
   25270:	180f883a 	mov	r7,r3
   25274:	a809883a 	mov	r4,r21
   25278:	002c5740 	call	2c574 <__gedf2>
   2527c:	db001617 	ldw	r12,88(sp)
   25280:	00840e16 	blt	zero,r2,262bc <_dtoa_r+0x15e8>
   25284:	00800044 	movi	r2,1
   25288:	13006b0e 	bge	r2,r12,25438 <_dtoa_r+0x764>
   2528c:	d9000717 	ldw	r4,28(sp)
   25290:	dd800f15 	stw	r22,60(sp)
   25294:	dcc01015 	stw	r19,64(sp)
   25298:	2319883a 	add	r12,r4,r12
   2529c:	dcc01217 	ldw	r19,72(sp)
   252a0:	602d883a 	mov	r22,r12
   252a4:	dc801215 	stw	r18,72(sp)
   252a8:	b825883a 	mov	r18,r23
   252ac:	00000906 	br	252d4 <_dtoa_r+0x600>
   252b0:	002ce5c0 	call	2ce5c <__subdf3>
   252b4:	a80d883a 	mov	r6,r21
   252b8:	980f883a 	mov	r7,r19
   252bc:	1009883a 	mov	r4,r2
   252c0:	180b883a 	mov	r5,r3
   252c4:	002c6500 	call	2c650 <__ledf2>
   252c8:	1003e816 	blt	r2,zero,2626c <_dtoa_r+0x1598>
   252cc:	b825883a 	mov	r18,r23
   252d0:	bd83e926 	beq	r23,r22,26278 <_dtoa_r+0x15a4>
   252d4:	a809883a 	mov	r4,r21
   252d8:	980b883a 	mov	r5,r19
   252dc:	000d883a 	mov	r6,zero
   252e0:	01d00934 	movhi	r7,16420
   252e4:	002c7440 	call	2c744 <__muldf3>
   252e8:	000d883a 	mov	r6,zero
   252ec:	01d00934 	movhi	r7,16420
   252f0:	8009883a 	mov	r4,r16
   252f4:	880b883a 	mov	r5,r17
   252f8:	102b883a 	mov	r21,r2
   252fc:	1827883a 	mov	r19,r3
   25300:	002c7440 	call	2c744 <__muldf3>
   25304:	180b883a 	mov	r5,r3
   25308:	1009883a 	mov	r4,r2
   2530c:	1821883a 	mov	r16,r3
   25310:	1023883a 	mov	r17,r2
   25314:	002d7580 	call	2d758 <__fixdfsi>
   25318:	1009883a 	mov	r4,r2
   2531c:	1029883a 	mov	r20,r2
   25320:	002d7d80 	call	2d7d8 <__floatsidf>
   25324:	8809883a 	mov	r4,r17
   25328:	800b883a 	mov	r5,r16
   2532c:	100d883a 	mov	r6,r2
   25330:	180f883a 	mov	r7,r3
   25334:	002ce5c0 	call	2ce5c <__subdf3>
   25338:	a5000c04 	addi	r20,r20,48
   2533c:	a80d883a 	mov	r6,r21
   25340:	980f883a 	mov	r7,r19
   25344:	1009883a 	mov	r4,r2
   25348:	180b883a 	mov	r5,r3
   2534c:	95000005 	stb	r20,0(r18)
   25350:	1021883a 	mov	r16,r2
   25354:	1823883a 	mov	r17,r3
   25358:	002c6500 	call	2c650 <__ledf2>
   2535c:	bdc00044 	addi	r23,r23,1
   25360:	800d883a 	mov	r6,r16
   25364:	880f883a 	mov	r7,r17
   25368:	0009883a 	mov	r4,zero
   2536c:	014ffc34 	movhi	r5,16368
   25370:	103fcf0e 	bge	r2,zero,252b0 <__alt_data_end+0xfffe52b0>
   25374:	d8c01317 	ldw	r3,76(sp)
   25378:	d8c00515 	stw	r3,20(sp)
   2537c:	d9400917 	ldw	r5,36(sp)
   25380:	e009883a 	mov	r4,fp
   25384:	00274380 	call	27438 <_Bfree>
   25388:	d9000517 	ldw	r4,20(sp)
   2538c:	d9802317 	ldw	r6,140(sp)
   25390:	d9c02517 	ldw	r7,148(sp)
   25394:	b8000005 	stb	zero,0(r23)
   25398:	20800044 	addi	r2,r4,1
   2539c:	30800015 	stw	r2,0(r6)
   253a0:	3802aa26 	beq	r7,zero,25e4c <_dtoa_r+0x1178>
   253a4:	3dc00015 	stw	r23,0(r7)
   253a8:	d8800717 	ldw	r2,28(sp)
   253ac:	003e7906 	br	24d94 <__alt_data_end+0xfffe4d94>
   253b0:	00800434 	movhi	r2,16
   253b4:	10bfffc4 	addi	r2,r2,-1
   253b8:	88a2703a 	and	r17,r17,r2
   253bc:	883e851e 	bne	r17,zero,24dd4 <__alt_data_end+0xfffe4dd4>
   253c0:	008000f4 	movhi	r2,3
   253c4:	10837104 	addi	r2,r2,3524
   253c8:	003e8406 	br	24ddc <__alt_data_end+0xfffe4ddc>
   253cc:	10c00204 	addi	r3,r2,8
   253d0:	003e8706 	br	24df0 <__alt_data_end+0xfffe4df0>
   253d4:	01400434 	movhi	r5,16
   253d8:	297fffc4 	addi	r5,r5,-1
   253dc:	994a703a 	and	r5,r19,r5
   253e0:	9009883a 	mov	r4,r18
   253e4:	843f0044 	addi	r16,r16,-1023
   253e8:	294ffc34 	orhi	r5,r5,16368
   253ec:	dd800217 	ldw	r22,8(sp)
   253f0:	d8001115 	stw	zero,68(sp)
   253f4:	003ea506 	br	24e8c <__alt_data_end+0xfffe4e8c>
   253f8:	008000f4 	movhi	r2,3
   253fc:	10836804 	addi	r2,r2,3488
   25400:	003e6406 	br	24d94 <__alt_data_end+0xfffe4d94>
   25404:	e0001115 	stw	zero,68(fp)
   25408:	000b883a 	mov	r5,zero
   2540c:	e009883a 	mov	r4,fp
   25410:	00273900 	call	27390 <_Balloc>
   25414:	01bfffc4 	movi	r6,-1
   25418:	01c00044 	movi	r7,1
   2541c:	d8800715 	stw	r2,28(sp)
   25420:	d9800c15 	stw	r6,48(sp)
   25424:	e0801015 	stw	r2,64(fp)
   25428:	d8000315 	stw	zero,12(sp)
   2542c:	d9c00b15 	stw	r7,44(sp)
   25430:	d9800615 	stw	r6,24(sp)
   25434:	d8002215 	stw	zero,136(sp)
   25438:	d8800117 	ldw	r2,4(sp)
   2543c:	10008916 	blt	r2,zero,25664 <_dtoa_r+0x990>
   25440:	d9000517 	ldw	r4,20(sp)
   25444:	00c00384 	movi	r3,14
   25448:	19008616 	blt	r3,r4,25664 <_dtoa_r+0x990>
   2544c:	200490fa 	slli	r2,r4,3
   25450:	00c000f4 	movhi	r3,3
   25454:	d9802217 	ldw	r6,136(sp)
   25458:	18c38f04 	addi	r3,r3,3644
   2545c:	1885883a 	add	r2,r3,r2
   25460:	14000017 	ldw	r16,0(r2)
   25464:	14400117 	ldw	r17,4(r2)
   25468:	30016316 	blt	r6,zero,259f8 <_dtoa_r+0xd24>
   2546c:	800d883a 	mov	r6,r16
   25470:	880f883a 	mov	r7,r17
   25474:	9009883a 	mov	r4,r18
   25478:	980b883a 	mov	r5,r19
   2547c:	002bc040 	call	2bc04 <__divdf3>
   25480:	180b883a 	mov	r5,r3
   25484:	1009883a 	mov	r4,r2
   25488:	002d7580 	call	2d758 <__fixdfsi>
   2548c:	1009883a 	mov	r4,r2
   25490:	102b883a 	mov	r21,r2
   25494:	002d7d80 	call	2d7d8 <__floatsidf>
   25498:	800d883a 	mov	r6,r16
   2549c:	880f883a 	mov	r7,r17
   254a0:	1009883a 	mov	r4,r2
   254a4:	180b883a 	mov	r5,r3
   254a8:	002c7440 	call	2c744 <__muldf3>
   254ac:	100d883a 	mov	r6,r2
   254b0:	180f883a 	mov	r7,r3
   254b4:	9009883a 	mov	r4,r18
   254b8:	980b883a 	mov	r5,r19
   254bc:	002ce5c0 	call	2ce5c <__subdf3>
   254c0:	d9c00717 	ldw	r7,28(sp)
   254c4:	1009883a 	mov	r4,r2
   254c8:	a8800c04 	addi	r2,r21,48
   254cc:	38800005 	stb	r2,0(r7)
   254d0:	3dc00044 	addi	r23,r7,1
   254d4:	d9c00617 	ldw	r7,24(sp)
   254d8:	01800044 	movi	r6,1
   254dc:	180b883a 	mov	r5,r3
   254e0:	2005883a 	mov	r2,r4
   254e4:	39803826 	beq	r7,r6,255c8 <_dtoa_r+0x8f4>
   254e8:	000d883a 	mov	r6,zero
   254ec:	01d00934 	movhi	r7,16420
   254f0:	002c7440 	call	2c744 <__muldf3>
   254f4:	000d883a 	mov	r6,zero
   254f8:	000f883a 	mov	r7,zero
   254fc:	1009883a 	mov	r4,r2
   25500:	180b883a 	mov	r5,r3
   25504:	1025883a 	mov	r18,r2
   25508:	1827883a 	mov	r19,r3
   2550c:	002c4ec0 	call	2c4ec <__eqdf2>
   25510:	103f9a26 	beq	r2,zero,2537c <__alt_data_end+0xfffe537c>
   25514:	d9c00617 	ldw	r7,24(sp)
   25518:	d8c00717 	ldw	r3,28(sp)
   2551c:	b829883a 	mov	r20,r23
   25520:	38bfffc4 	addi	r2,r7,-1
   25524:	18ad883a 	add	r22,r3,r2
   25528:	00000a06 	br	25554 <_dtoa_r+0x880>
   2552c:	002c7440 	call	2c744 <__muldf3>
   25530:	000d883a 	mov	r6,zero
   25534:	000f883a 	mov	r7,zero
   25538:	1009883a 	mov	r4,r2
   2553c:	180b883a 	mov	r5,r3
   25540:	1025883a 	mov	r18,r2
   25544:	1827883a 	mov	r19,r3
   25548:	b829883a 	mov	r20,r23
   2554c:	002c4ec0 	call	2c4ec <__eqdf2>
   25550:	103f8a26 	beq	r2,zero,2537c <__alt_data_end+0xfffe537c>
   25554:	800d883a 	mov	r6,r16
   25558:	880f883a 	mov	r7,r17
   2555c:	9009883a 	mov	r4,r18
   25560:	980b883a 	mov	r5,r19
   25564:	002bc040 	call	2bc04 <__divdf3>
   25568:	180b883a 	mov	r5,r3
   2556c:	1009883a 	mov	r4,r2
   25570:	002d7580 	call	2d758 <__fixdfsi>
   25574:	1009883a 	mov	r4,r2
   25578:	102b883a 	mov	r21,r2
   2557c:	002d7d80 	call	2d7d8 <__floatsidf>
   25580:	800d883a 	mov	r6,r16
   25584:	880f883a 	mov	r7,r17
   25588:	1009883a 	mov	r4,r2
   2558c:	180b883a 	mov	r5,r3
   25590:	002c7440 	call	2c744 <__muldf3>
   25594:	100d883a 	mov	r6,r2
   25598:	180f883a 	mov	r7,r3
   2559c:	9009883a 	mov	r4,r18
   255a0:	980b883a 	mov	r5,r19
   255a4:	002ce5c0 	call	2ce5c <__subdf3>
   255a8:	aa000c04 	addi	r8,r21,48
   255ac:	a2000005 	stb	r8,0(r20)
   255b0:	000d883a 	mov	r6,zero
   255b4:	01d00934 	movhi	r7,16420
   255b8:	1009883a 	mov	r4,r2
   255bc:	180b883a 	mov	r5,r3
   255c0:	a5c00044 	addi	r23,r20,1
   255c4:	b53fd91e 	bne	r22,r20,2552c <__alt_data_end+0xfffe552c>
   255c8:	100d883a 	mov	r6,r2
   255cc:	180f883a 	mov	r7,r3
   255d0:	1009883a 	mov	r4,r2
   255d4:	180b883a 	mov	r5,r3
   255d8:	002b3580 	call	2b358 <__adddf3>
   255dc:	100d883a 	mov	r6,r2
   255e0:	180f883a 	mov	r7,r3
   255e4:	8009883a 	mov	r4,r16
   255e8:	880b883a 	mov	r5,r17
   255ec:	1027883a 	mov	r19,r2
   255f0:	1825883a 	mov	r18,r3
   255f4:	002c6500 	call	2c650 <__ledf2>
   255f8:	10000816 	blt	r2,zero,2561c <_dtoa_r+0x948>
   255fc:	980d883a 	mov	r6,r19
   25600:	900f883a 	mov	r7,r18
   25604:	8009883a 	mov	r4,r16
   25608:	880b883a 	mov	r5,r17
   2560c:	002c4ec0 	call	2c4ec <__eqdf2>
   25610:	103f5a1e 	bne	r2,zero,2537c <__alt_data_end+0xfffe537c>
   25614:	ad40004c 	andi	r21,r21,1
   25618:	a83f5826 	beq	r21,zero,2537c <__alt_data_end+0xfffe537c>
   2561c:	bd3fffc3 	ldbu	r20,-1(r23)
   25620:	b8bfffc4 	addi	r2,r23,-1
   25624:	1007883a 	mov	r3,r2
   25628:	01400e44 	movi	r5,57
   2562c:	d9800717 	ldw	r6,28(sp)
   25630:	00000506 	br	25648 <_dtoa_r+0x974>
   25634:	18ffffc4 	addi	r3,r3,-1
   25638:	11824726 	beq	r2,r6,25f58 <_dtoa_r+0x1284>
   2563c:	1d000003 	ldbu	r20,0(r3)
   25640:	102f883a 	mov	r23,r2
   25644:	10bfffc4 	addi	r2,r2,-1
   25648:	a1003fcc 	andi	r4,r20,255
   2564c:	2100201c 	xori	r4,r4,128
   25650:	213fe004 	addi	r4,r4,-128
   25654:	217ff726 	beq	r4,r5,25634 <__alt_data_end+0xfffe5634>
   25658:	a2000044 	addi	r8,r20,1
   2565c:	12000005 	stb	r8,0(r2)
   25660:	003f4606 	br	2537c <__alt_data_end+0xfffe537c>
   25664:	d9000b17 	ldw	r4,44(sp)
   25668:	2000c826 	beq	r4,zero,2598c <_dtoa_r+0xcb8>
   2566c:	d9800317 	ldw	r6,12(sp)
   25670:	00c00044 	movi	r3,1
   25674:	1980f90e 	bge	r3,r6,25a5c <_dtoa_r+0xd88>
   25678:	d8800617 	ldw	r2,24(sp)
   2567c:	d8c00a17 	ldw	r3,40(sp)
   25680:	157fffc4 	addi	r21,r2,-1
   25684:	1d41f316 	blt	r3,r21,25e54 <_dtoa_r+0x1180>
   25688:	1d6bc83a 	sub	r21,r3,r21
   2568c:	d9c00617 	ldw	r7,24(sp)
   25690:	3802aa16 	blt	r7,zero,2613c <_dtoa_r+0x1468>
   25694:	dd000817 	ldw	r20,32(sp)
   25698:	d8800617 	ldw	r2,24(sp)
   2569c:	d8c00817 	ldw	r3,32(sp)
   256a0:	01400044 	movi	r5,1
   256a4:	e009883a 	mov	r4,fp
   256a8:	1887883a 	add	r3,r3,r2
   256ac:	d8c00815 	stw	r3,32(sp)
   256b0:	b0ad883a 	add	r22,r22,r2
   256b4:	002779c0 	call	2779c <__i2b>
   256b8:	1023883a 	mov	r17,r2
   256bc:	a0000826 	beq	r20,zero,256e0 <_dtoa_r+0xa0c>
   256c0:	0580070e 	bge	zero,r22,256e0 <_dtoa_r+0xa0c>
   256c4:	a005883a 	mov	r2,r20
   256c8:	b500b916 	blt	r22,r20,259b0 <_dtoa_r+0xcdc>
   256cc:	d9000817 	ldw	r4,32(sp)
   256d0:	a0a9c83a 	sub	r20,r20,r2
   256d4:	b0adc83a 	sub	r22,r22,r2
   256d8:	2089c83a 	sub	r4,r4,r2
   256dc:	d9000815 	stw	r4,32(sp)
   256e0:	d9800a17 	ldw	r6,40(sp)
   256e4:	0181810e 	bge	zero,r6,25cec <_dtoa_r+0x1018>
   256e8:	d9c00b17 	ldw	r7,44(sp)
   256ec:	3800b326 	beq	r7,zero,259bc <_dtoa_r+0xce8>
   256f0:	a800b226 	beq	r21,zero,259bc <_dtoa_r+0xce8>
   256f4:	880b883a 	mov	r5,r17
   256f8:	a80d883a 	mov	r6,r21
   256fc:	e009883a 	mov	r4,fp
   25700:	00279d00 	call	279d0 <__pow5mult>
   25704:	d9800917 	ldw	r6,36(sp)
   25708:	100b883a 	mov	r5,r2
   2570c:	e009883a 	mov	r4,fp
   25710:	1023883a 	mov	r17,r2
   25714:	00277d80 	call	277d8 <__multiply>
   25718:	1021883a 	mov	r16,r2
   2571c:	d8800a17 	ldw	r2,40(sp)
   25720:	d9400917 	ldw	r5,36(sp)
   25724:	e009883a 	mov	r4,fp
   25728:	1545c83a 	sub	r2,r2,r21
   2572c:	d8800a15 	stw	r2,40(sp)
   25730:	00274380 	call	27438 <_Bfree>
   25734:	d8c00a17 	ldw	r3,40(sp)
   25738:	18009f1e 	bne	r3,zero,259b8 <_dtoa_r+0xce4>
   2573c:	05c00044 	movi	r23,1
   25740:	e009883a 	mov	r4,fp
   25744:	b80b883a 	mov	r5,r23
   25748:	002779c0 	call	2779c <__i2b>
   2574c:	d9000d17 	ldw	r4,52(sp)
   25750:	102b883a 	mov	r21,r2
   25754:	2000ce26 	beq	r4,zero,25a90 <_dtoa_r+0xdbc>
   25758:	200d883a 	mov	r6,r4
   2575c:	100b883a 	mov	r5,r2
   25760:	e009883a 	mov	r4,fp
   25764:	00279d00 	call	279d0 <__pow5mult>
   25768:	d9800317 	ldw	r6,12(sp)
   2576c:	102b883a 	mov	r21,r2
   25770:	b981810e 	bge	r23,r6,25d78 <_dtoa_r+0x10a4>
   25774:	0027883a 	mov	r19,zero
   25778:	a8800417 	ldw	r2,16(r21)
   2577c:	05c00804 	movi	r23,32
   25780:	10800104 	addi	r2,r2,4
   25784:	1085883a 	add	r2,r2,r2
   25788:	1085883a 	add	r2,r2,r2
   2578c:	a885883a 	add	r2,r21,r2
   25790:	11000017 	ldw	r4,0(r2)
   25794:	00276840 	call	27684 <__hi0bits>
   25798:	b885c83a 	sub	r2,r23,r2
   2579c:	1585883a 	add	r2,r2,r22
   257a0:	108007cc 	andi	r2,r2,31
   257a4:	1000b326 	beq	r2,zero,25a74 <_dtoa_r+0xda0>
   257a8:	00c00804 	movi	r3,32
   257ac:	1887c83a 	sub	r3,r3,r2
   257b0:	01000104 	movi	r4,4
   257b4:	20c2cd0e 	bge	r4,r3,262ec <_dtoa_r+0x1618>
   257b8:	00c00704 	movi	r3,28
   257bc:	1885c83a 	sub	r2,r3,r2
   257c0:	d8c00817 	ldw	r3,32(sp)
   257c4:	a0a9883a 	add	r20,r20,r2
   257c8:	b0ad883a 	add	r22,r22,r2
   257cc:	1887883a 	add	r3,r3,r2
   257d0:	d8c00815 	stw	r3,32(sp)
   257d4:	d9800817 	ldw	r6,32(sp)
   257d8:	0180040e 	bge	zero,r6,257ec <_dtoa_r+0xb18>
   257dc:	800b883a 	mov	r5,r16
   257e0:	e009883a 	mov	r4,fp
   257e4:	0027b100 	call	27b10 <__lshift>
   257e8:	1021883a 	mov	r16,r2
   257ec:	0580050e 	bge	zero,r22,25804 <_dtoa_r+0xb30>
   257f0:	a80b883a 	mov	r5,r21
   257f4:	b00d883a 	mov	r6,r22
   257f8:	e009883a 	mov	r4,fp
   257fc:	0027b100 	call	27b10 <__lshift>
   25800:	102b883a 	mov	r21,r2
   25804:	d9c00e17 	ldw	r7,56(sp)
   25808:	3801211e 	bne	r7,zero,25c90 <_dtoa_r+0xfbc>
   2580c:	d9800617 	ldw	r6,24(sp)
   25810:	0181380e 	bge	zero,r6,25cf4 <_dtoa_r+0x1020>
   25814:	d8c00b17 	ldw	r3,44(sp)
   25818:	1800ab1e 	bne	r3,zero,25ac8 <_dtoa_r+0xdf4>
   2581c:	dc800717 	ldw	r18,28(sp)
   25820:	dcc00617 	ldw	r19,24(sp)
   25824:	9029883a 	mov	r20,r18
   25828:	00000206 	br	25834 <_dtoa_r+0xb60>
   2582c:	00274600 	call	27460 <__multadd>
   25830:	1021883a 	mov	r16,r2
   25834:	a80b883a 	mov	r5,r21
   25838:	8009883a 	mov	r4,r16
   2583c:	0024ad40 	call	24ad4 <quorem>
   25840:	10800c04 	addi	r2,r2,48
   25844:	90800005 	stb	r2,0(r18)
   25848:	94800044 	addi	r18,r18,1
   2584c:	9507c83a 	sub	r3,r18,r20
   25850:	000f883a 	mov	r7,zero
   25854:	01800284 	movi	r6,10
   25858:	800b883a 	mov	r5,r16
   2585c:	e009883a 	mov	r4,fp
   25860:	1cfff216 	blt	r3,r19,2582c <__alt_data_end+0xfffe582c>
   25864:	1011883a 	mov	r8,r2
   25868:	d8800617 	ldw	r2,24(sp)
   2586c:	0082370e 	bge	zero,r2,2614c <_dtoa_r+0x1478>
   25870:	d9000717 	ldw	r4,28(sp)
   25874:	0025883a 	mov	r18,zero
   25878:	20af883a 	add	r23,r4,r2
   2587c:	01800044 	movi	r6,1
   25880:	800b883a 	mov	r5,r16
   25884:	e009883a 	mov	r4,fp
   25888:	da001715 	stw	r8,92(sp)
   2588c:	0027b100 	call	27b10 <__lshift>
   25890:	a80b883a 	mov	r5,r21
   25894:	1009883a 	mov	r4,r2
   25898:	d8800915 	stw	r2,36(sp)
   2589c:	0027c580 	call	27c58 <__mcmp>
   258a0:	da001717 	ldw	r8,92(sp)
   258a4:	0081800e 	bge	zero,r2,25ea8 <_dtoa_r+0x11d4>
   258a8:	b93fffc3 	ldbu	r4,-1(r23)
   258ac:	b8bfffc4 	addi	r2,r23,-1
   258b0:	1007883a 	mov	r3,r2
   258b4:	01800e44 	movi	r6,57
   258b8:	d9c00717 	ldw	r7,28(sp)
   258bc:	00000506 	br	258d4 <_dtoa_r+0xc00>
   258c0:	18ffffc4 	addi	r3,r3,-1
   258c4:	11c12326 	beq	r2,r7,25d54 <_dtoa_r+0x1080>
   258c8:	19000003 	ldbu	r4,0(r3)
   258cc:	102f883a 	mov	r23,r2
   258d0:	10bfffc4 	addi	r2,r2,-1
   258d4:	21403fcc 	andi	r5,r4,255
   258d8:	2940201c 	xori	r5,r5,128
   258dc:	297fe004 	addi	r5,r5,-128
   258e0:	29bff726 	beq	r5,r6,258c0 <__alt_data_end+0xfffe58c0>
   258e4:	21000044 	addi	r4,r4,1
   258e8:	11000005 	stb	r4,0(r2)
   258ec:	a80b883a 	mov	r5,r21
   258f0:	e009883a 	mov	r4,fp
   258f4:	00274380 	call	27438 <_Bfree>
   258f8:	883ea026 	beq	r17,zero,2537c <__alt_data_end+0xfffe537c>
   258fc:	90000426 	beq	r18,zero,25910 <_dtoa_r+0xc3c>
   25900:	94400326 	beq	r18,r17,25910 <_dtoa_r+0xc3c>
   25904:	900b883a 	mov	r5,r18
   25908:	e009883a 	mov	r4,fp
   2590c:	00274380 	call	27438 <_Bfree>
   25910:	880b883a 	mov	r5,r17
   25914:	e009883a 	mov	r4,fp
   25918:	00274380 	call	27438 <_Bfree>
   2591c:	003e9706 	br	2537c <__alt_data_end+0xfffe537c>
   25920:	01800044 	movi	r6,1
   25924:	d9800e15 	stw	r6,56(sp)
   25928:	003d9606 	br	24f84 <__alt_data_end+0xfffe4f84>
   2592c:	d8800817 	ldw	r2,32(sp)
   25930:	d8c00517 	ldw	r3,20(sp)
   25934:	d8000d15 	stw	zero,52(sp)
   25938:	10c5c83a 	sub	r2,r2,r3
   2593c:	00c9c83a 	sub	r4,zero,r3
   25940:	d8800815 	stw	r2,32(sp)
   25944:	d9000a15 	stw	r4,40(sp)
   25948:	003d9706 	br	24fa8 <__alt_data_end+0xfffe4fa8>
   2594c:	05adc83a 	sub	r22,zero,r22
   25950:	dd800815 	stw	r22,32(sp)
   25954:	002d883a 	mov	r22,zero
   25958:	003d8e06 	br	24f94 <__alt_data_end+0xfffe4f94>
   2595c:	d9000517 	ldw	r4,20(sp)
   25960:	002d7d80 	call	2d7d8 <__floatsidf>
   25964:	100d883a 	mov	r6,r2
   25968:	180f883a 	mov	r7,r3
   2596c:	a009883a 	mov	r4,r20
   25970:	880b883a 	mov	r5,r17
   25974:	002c4ec0 	call	2c4ec <__eqdf2>
   25978:	103d7126 	beq	r2,zero,24f40 <__alt_data_end+0xfffe4f40>
   2597c:	d9c00517 	ldw	r7,20(sp)
   25980:	39ffffc4 	addi	r7,r7,-1
   25984:	d9c00515 	stw	r7,20(sp)
   25988:	003d6d06 	br	24f40 <__alt_data_end+0xfffe4f40>
   2598c:	dd400a17 	ldw	r21,40(sp)
   25990:	dd000817 	ldw	r20,32(sp)
   25994:	0023883a 	mov	r17,zero
   25998:	003f4806 	br	256bc <__alt_data_end+0xfffe56bc>
   2599c:	10e3c83a 	sub	r17,r2,r3
   259a0:	9448983a 	sll	r4,r18,r17
   259a4:	003d3206 	br	24e70 <__alt_data_end+0xfffe4e70>
   259a8:	d8000e15 	stw	zero,56(sp)
   259ac:	003d7506 	br	24f84 <__alt_data_end+0xfffe4f84>
   259b0:	b005883a 	mov	r2,r22
   259b4:	003f4506 	br	256cc <__alt_data_end+0xfffe56cc>
   259b8:	dc000915 	stw	r16,36(sp)
   259bc:	d9800a17 	ldw	r6,40(sp)
   259c0:	d9400917 	ldw	r5,36(sp)
   259c4:	e009883a 	mov	r4,fp
   259c8:	00279d00 	call	279d0 <__pow5mult>
   259cc:	1021883a 	mov	r16,r2
   259d0:	003f5a06 	br	2573c <__alt_data_end+0xfffe573c>
   259d4:	01c00044 	movi	r7,1
   259d8:	d9c00b15 	stw	r7,44(sp)
   259dc:	d8802217 	ldw	r2,136(sp)
   259e0:	0081280e 	bge	zero,r2,25e84 <_dtoa_r+0x11b0>
   259e4:	100d883a 	mov	r6,r2
   259e8:	1021883a 	mov	r16,r2
   259ec:	d8800c15 	stw	r2,48(sp)
   259f0:	d8800615 	stw	r2,24(sp)
   259f4:	003d8806 	br	25018 <__alt_data_end+0xfffe5018>
   259f8:	d8800617 	ldw	r2,24(sp)
   259fc:	00be9b16 	blt	zero,r2,2546c <__alt_data_end+0xfffe546c>
   25a00:	10010f1e 	bne	r2,zero,25e40 <_dtoa_r+0x116c>
   25a04:	880b883a 	mov	r5,r17
   25a08:	000d883a 	mov	r6,zero
   25a0c:	01d00534 	movhi	r7,16404
   25a10:	8009883a 	mov	r4,r16
   25a14:	002c7440 	call	2c744 <__muldf3>
   25a18:	900d883a 	mov	r6,r18
   25a1c:	980f883a 	mov	r7,r19
   25a20:	1009883a 	mov	r4,r2
   25a24:	180b883a 	mov	r5,r3
   25a28:	002c5740 	call	2c574 <__gedf2>
   25a2c:	002b883a 	mov	r21,zero
   25a30:	0023883a 	mov	r17,zero
   25a34:	1000bf16 	blt	r2,zero,25d34 <_dtoa_r+0x1060>
   25a38:	d9802217 	ldw	r6,136(sp)
   25a3c:	ddc00717 	ldw	r23,28(sp)
   25a40:	018c303a 	nor	r6,zero,r6
   25a44:	d9800515 	stw	r6,20(sp)
   25a48:	a80b883a 	mov	r5,r21
   25a4c:	e009883a 	mov	r4,fp
   25a50:	00274380 	call	27438 <_Bfree>
   25a54:	883e4926 	beq	r17,zero,2537c <__alt_data_end+0xfffe537c>
   25a58:	003fad06 	br	25910 <__alt_data_end+0xfffe5910>
   25a5c:	d9c01117 	ldw	r7,68(sp)
   25a60:	3801bc26 	beq	r7,zero,26154 <_dtoa_r+0x1480>
   25a64:	10810cc4 	addi	r2,r2,1075
   25a68:	dd400a17 	ldw	r21,40(sp)
   25a6c:	dd000817 	ldw	r20,32(sp)
   25a70:	003f0a06 	br	2569c <__alt_data_end+0xfffe569c>
   25a74:	00800704 	movi	r2,28
   25a78:	d9000817 	ldw	r4,32(sp)
   25a7c:	a0a9883a 	add	r20,r20,r2
   25a80:	b0ad883a 	add	r22,r22,r2
   25a84:	2089883a 	add	r4,r4,r2
   25a88:	d9000815 	stw	r4,32(sp)
   25a8c:	003f5106 	br	257d4 <__alt_data_end+0xfffe57d4>
   25a90:	d8c00317 	ldw	r3,12(sp)
   25a94:	b8c1fc0e 	bge	r23,r3,26288 <_dtoa_r+0x15b4>
   25a98:	0027883a 	mov	r19,zero
   25a9c:	b805883a 	mov	r2,r23
   25aa0:	003f3e06 	br	2579c <__alt_data_end+0xfffe579c>
   25aa4:	880b883a 	mov	r5,r17
   25aa8:	e009883a 	mov	r4,fp
   25aac:	000f883a 	mov	r7,zero
   25ab0:	01800284 	movi	r6,10
   25ab4:	00274600 	call	27460 <__multadd>
   25ab8:	d9000c17 	ldw	r4,48(sp)
   25abc:	1023883a 	mov	r17,r2
   25ac0:	0102040e 	bge	zero,r4,262d4 <_dtoa_r+0x1600>
   25ac4:	d9000615 	stw	r4,24(sp)
   25ac8:	0500050e 	bge	zero,r20,25ae0 <_dtoa_r+0xe0c>
   25acc:	880b883a 	mov	r5,r17
   25ad0:	a00d883a 	mov	r6,r20
   25ad4:	e009883a 	mov	r4,fp
   25ad8:	0027b100 	call	27b10 <__lshift>
   25adc:	1023883a 	mov	r17,r2
   25ae0:	9801241e 	bne	r19,zero,25f74 <_dtoa_r+0x12a0>
   25ae4:	8829883a 	mov	r20,r17
   25ae8:	d9000617 	ldw	r4,24(sp)
   25aec:	dcc00717 	ldw	r19,28(sp)
   25af0:	9480004c 	andi	r18,r18,1
   25af4:	20bfffc4 	addi	r2,r4,-1
   25af8:	9885883a 	add	r2,r19,r2
   25afc:	d8800415 	stw	r2,16(sp)
   25b00:	dc800615 	stw	r18,24(sp)
   25b04:	a80b883a 	mov	r5,r21
   25b08:	8009883a 	mov	r4,r16
   25b0c:	0024ad40 	call	24ad4 <quorem>
   25b10:	880b883a 	mov	r5,r17
   25b14:	8009883a 	mov	r4,r16
   25b18:	102f883a 	mov	r23,r2
   25b1c:	0027c580 	call	27c58 <__mcmp>
   25b20:	a80b883a 	mov	r5,r21
   25b24:	a00d883a 	mov	r6,r20
   25b28:	e009883a 	mov	r4,fp
   25b2c:	102d883a 	mov	r22,r2
   25b30:	0027cb80 	call	27cb8 <__mdiff>
   25b34:	1007883a 	mov	r3,r2
   25b38:	10800317 	ldw	r2,12(r2)
   25b3c:	bc800c04 	addi	r18,r23,48
   25b40:	180b883a 	mov	r5,r3
   25b44:	10004e1e 	bne	r2,zero,25c80 <_dtoa_r+0xfac>
   25b48:	8009883a 	mov	r4,r16
   25b4c:	d8c01615 	stw	r3,88(sp)
   25b50:	0027c580 	call	27c58 <__mcmp>
   25b54:	d8c01617 	ldw	r3,88(sp)
   25b58:	e009883a 	mov	r4,fp
   25b5c:	d8801615 	stw	r2,88(sp)
   25b60:	180b883a 	mov	r5,r3
   25b64:	00274380 	call	27438 <_Bfree>
   25b68:	d8801617 	ldw	r2,88(sp)
   25b6c:	1000041e 	bne	r2,zero,25b80 <_dtoa_r+0xeac>
   25b70:	d9800317 	ldw	r6,12(sp)
   25b74:	3000021e 	bne	r6,zero,25b80 <_dtoa_r+0xeac>
   25b78:	d8c00617 	ldw	r3,24(sp)
   25b7c:	18003726 	beq	r3,zero,25c5c <_dtoa_r+0xf88>
   25b80:	b0002016 	blt	r22,zero,25c04 <_dtoa_r+0xf30>
   25b84:	b000041e 	bne	r22,zero,25b98 <_dtoa_r+0xec4>
   25b88:	d9000317 	ldw	r4,12(sp)
   25b8c:	2000021e 	bne	r4,zero,25b98 <_dtoa_r+0xec4>
   25b90:	d8c00617 	ldw	r3,24(sp)
   25b94:	18001b26 	beq	r3,zero,25c04 <_dtoa_r+0xf30>
   25b98:	00810716 	blt	zero,r2,25fb8 <_dtoa_r+0x12e4>
   25b9c:	d8c00417 	ldw	r3,16(sp)
   25ba0:	9d800044 	addi	r22,r19,1
   25ba4:	9c800005 	stb	r18,0(r19)
   25ba8:	b02f883a 	mov	r23,r22
   25bac:	98c10626 	beq	r19,r3,25fc8 <_dtoa_r+0x12f4>
   25bb0:	800b883a 	mov	r5,r16
   25bb4:	000f883a 	mov	r7,zero
   25bb8:	01800284 	movi	r6,10
   25bbc:	e009883a 	mov	r4,fp
   25bc0:	00274600 	call	27460 <__multadd>
   25bc4:	1021883a 	mov	r16,r2
   25bc8:	000f883a 	mov	r7,zero
   25bcc:	01800284 	movi	r6,10
   25bd0:	880b883a 	mov	r5,r17
   25bd4:	e009883a 	mov	r4,fp
   25bd8:	8d002526 	beq	r17,r20,25c70 <_dtoa_r+0xf9c>
   25bdc:	00274600 	call	27460 <__multadd>
   25be0:	a00b883a 	mov	r5,r20
   25be4:	000f883a 	mov	r7,zero
   25be8:	01800284 	movi	r6,10
   25bec:	e009883a 	mov	r4,fp
   25bf0:	1023883a 	mov	r17,r2
   25bf4:	00274600 	call	27460 <__multadd>
   25bf8:	1029883a 	mov	r20,r2
   25bfc:	b027883a 	mov	r19,r22
   25c00:	003fc006 	br	25b04 <__alt_data_end+0xfffe5b04>
   25c04:	9011883a 	mov	r8,r18
   25c08:	00800e0e 	bge	zero,r2,25c44 <_dtoa_r+0xf70>
   25c0c:	800b883a 	mov	r5,r16
   25c10:	01800044 	movi	r6,1
   25c14:	e009883a 	mov	r4,fp
   25c18:	da001715 	stw	r8,92(sp)
   25c1c:	0027b100 	call	27b10 <__lshift>
   25c20:	a80b883a 	mov	r5,r21
   25c24:	1009883a 	mov	r4,r2
   25c28:	1021883a 	mov	r16,r2
   25c2c:	0027c580 	call	27c58 <__mcmp>
   25c30:	da001717 	ldw	r8,92(sp)
   25c34:	0081960e 	bge	zero,r2,26290 <_dtoa_r+0x15bc>
   25c38:	00800e44 	movi	r2,57
   25c3c:	40817026 	beq	r8,r2,26200 <_dtoa_r+0x152c>
   25c40:	ba000c44 	addi	r8,r23,49
   25c44:	8825883a 	mov	r18,r17
   25c48:	9dc00044 	addi	r23,r19,1
   25c4c:	9a000005 	stb	r8,0(r19)
   25c50:	a023883a 	mov	r17,r20
   25c54:	dc000915 	stw	r16,36(sp)
   25c58:	003f2406 	br	258ec <__alt_data_end+0xfffe58ec>
   25c5c:	00800e44 	movi	r2,57
   25c60:	9011883a 	mov	r8,r18
   25c64:	90816626 	beq	r18,r2,26200 <_dtoa_r+0x152c>
   25c68:	05bff516 	blt	zero,r22,25c40 <__alt_data_end+0xfffe5c40>
   25c6c:	003ff506 	br	25c44 <__alt_data_end+0xfffe5c44>
   25c70:	00274600 	call	27460 <__multadd>
   25c74:	1023883a 	mov	r17,r2
   25c78:	1029883a 	mov	r20,r2
   25c7c:	003fdf06 	br	25bfc <__alt_data_end+0xfffe5bfc>
   25c80:	e009883a 	mov	r4,fp
   25c84:	00274380 	call	27438 <_Bfree>
   25c88:	00800044 	movi	r2,1
   25c8c:	003fbc06 	br	25b80 <__alt_data_end+0xfffe5b80>
   25c90:	a80b883a 	mov	r5,r21
   25c94:	8009883a 	mov	r4,r16
   25c98:	0027c580 	call	27c58 <__mcmp>
   25c9c:	103edb0e 	bge	r2,zero,2580c <__alt_data_end+0xfffe580c>
   25ca0:	800b883a 	mov	r5,r16
   25ca4:	000f883a 	mov	r7,zero
   25ca8:	01800284 	movi	r6,10
   25cac:	e009883a 	mov	r4,fp
   25cb0:	00274600 	call	27460 <__multadd>
   25cb4:	1021883a 	mov	r16,r2
   25cb8:	d8800517 	ldw	r2,20(sp)
   25cbc:	d8c00b17 	ldw	r3,44(sp)
   25cc0:	10bfffc4 	addi	r2,r2,-1
   25cc4:	d8800515 	stw	r2,20(sp)
   25cc8:	183f761e 	bne	r3,zero,25aa4 <__alt_data_end+0xfffe5aa4>
   25ccc:	d9000c17 	ldw	r4,48(sp)
   25cd0:	0101730e 	bge	zero,r4,262a0 <_dtoa_r+0x15cc>
   25cd4:	d9000615 	stw	r4,24(sp)
   25cd8:	003ed006 	br	2581c <__alt_data_end+0xfffe581c>
   25cdc:	00800084 	movi	r2,2
   25ce0:	3081861e 	bne	r6,r2,262fc <_dtoa_r+0x1628>
   25ce4:	d8000b15 	stw	zero,44(sp)
   25ce8:	003f3c06 	br	259dc <__alt_data_end+0xfffe59dc>
   25cec:	dc000917 	ldw	r16,36(sp)
   25cf0:	003e9206 	br	2573c <__alt_data_end+0xfffe573c>
   25cf4:	d9c00317 	ldw	r7,12(sp)
   25cf8:	00800084 	movi	r2,2
   25cfc:	11fec50e 	bge	r2,r7,25814 <__alt_data_end+0xfffe5814>
   25d00:	d9000617 	ldw	r4,24(sp)
   25d04:	20013c1e 	bne	r4,zero,261f8 <_dtoa_r+0x1524>
   25d08:	a80b883a 	mov	r5,r21
   25d0c:	000f883a 	mov	r7,zero
   25d10:	01800144 	movi	r6,5
   25d14:	e009883a 	mov	r4,fp
   25d18:	00274600 	call	27460 <__multadd>
   25d1c:	100b883a 	mov	r5,r2
   25d20:	8009883a 	mov	r4,r16
   25d24:	102b883a 	mov	r21,r2
   25d28:	0027c580 	call	27c58 <__mcmp>
   25d2c:	dc000915 	stw	r16,36(sp)
   25d30:	00bf410e 	bge	zero,r2,25a38 <__alt_data_end+0xfffe5a38>
   25d34:	d9c00717 	ldw	r7,28(sp)
   25d38:	00800c44 	movi	r2,49
   25d3c:	38800005 	stb	r2,0(r7)
   25d40:	d8800517 	ldw	r2,20(sp)
   25d44:	3dc00044 	addi	r23,r7,1
   25d48:	10800044 	addi	r2,r2,1
   25d4c:	d8800515 	stw	r2,20(sp)
   25d50:	003f3d06 	br	25a48 <__alt_data_end+0xfffe5a48>
   25d54:	d9800517 	ldw	r6,20(sp)
   25d58:	d9c00717 	ldw	r7,28(sp)
   25d5c:	00800c44 	movi	r2,49
   25d60:	31800044 	addi	r6,r6,1
   25d64:	d9800515 	stw	r6,20(sp)
   25d68:	38800005 	stb	r2,0(r7)
   25d6c:	003edf06 	br	258ec <__alt_data_end+0xfffe58ec>
   25d70:	d8000b15 	stw	zero,44(sp)
   25d74:	003c9f06 	br	24ff4 <__alt_data_end+0xfffe4ff4>
   25d78:	903e7e1e 	bne	r18,zero,25774 <__alt_data_end+0xfffe5774>
   25d7c:	00800434 	movhi	r2,16
   25d80:	10bfffc4 	addi	r2,r2,-1
   25d84:	9884703a 	and	r2,r19,r2
   25d88:	1000ea1e 	bne	r2,zero,26134 <_dtoa_r+0x1460>
   25d8c:	9cdffc2c 	andhi	r19,r19,32752
   25d90:	9800e826 	beq	r19,zero,26134 <_dtoa_r+0x1460>
   25d94:	d9c00817 	ldw	r7,32(sp)
   25d98:	b5800044 	addi	r22,r22,1
   25d9c:	04c00044 	movi	r19,1
   25da0:	39c00044 	addi	r7,r7,1
   25da4:	d9c00815 	stw	r7,32(sp)
   25da8:	d8800d17 	ldw	r2,52(sp)
   25dac:	103e721e 	bne	r2,zero,25778 <__alt_data_end+0xfffe5778>
   25db0:	00800044 	movi	r2,1
   25db4:	003e7906 	br	2579c <__alt_data_end+0xfffe579c>
   25db8:	8009883a 	mov	r4,r16
   25dbc:	002d7d80 	call	2d7d8 <__floatsidf>
   25dc0:	d9800f17 	ldw	r6,60(sp)
   25dc4:	d9c01017 	ldw	r7,64(sp)
   25dc8:	1009883a 	mov	r4,r2
   25dcc:	180b883a 	mov	r5,r3
   25dd0:	002c7440 	call	2c744 <__muldf3>
   25dd4:	000d883a 	mov	r6,zero
   25dd8:	01d00734 	movhi	r7,16412
   25ddc:	1009883a 	mov	r4,r2
   25de0:	180b883a 	mov	r5,r3
   25de4:	002b3580 	call	2b358 <__adddf3>
   25de8:	047f3034 	movhi	r17,64704
   25dec:	1021883a 	mov	r16,r2
   25df0:	1c63883a 	add	r17,r3,r17
   25df4:	d9000f17 	ldw	r4,60(sp)
   25df8:	d9401017 	ldw	r5,64(sp)
   25dfc:	000d883a 	mov	r6,zero
   25e00:	01d00534 	movhi	r7,16404
   25e04:	002ce5c0 	call	2ce5c <__subdf3>
   25e08:	800d883a 	mov	r6,r16
   25e0c:	880f883a 	mov	r7,r17
   25e10:	1009883a 	mov	r4,r2
   25e14:	180b883a 	mov	r5,r3
   25e18:	102b883a 	mov	r21,r2
   25e1c:	1829883a 	mov	r20,r3
   25e20:	002c5740 	call	2c574 <__gedf2>
   25e24:	00806c16 	blt	zero,r2,25fd8 <_dtoa_r+0x1304>
   25e28:	89e0003c 	xorhi	r7,r17,32768
   25e2c:	800d883a 	mov	r6,r16
   25e30:	a809883a 	mov	r4,r21
   25e34:	a00b883a 	mov	r5,r20
   25e38:	002c6500 	call	2c650 <__ledf2>
   25e3c:	103d7e0e 	bge	r2,zero,25438 <__alt_data_end+0xfffe5438>
   25e40:	002b883a 	mov	r21,zero
   25e44:	0023883a 	mov	r17,zero
   25e48:	003efb06 	br	25a38 <__alt_data_end+0xfffe5a38>
   25e4c:	d8800717 	ldw	r2,28(sp)
   25e50:	003bd006 	br	24d94 <__alt_data_end+0xfffe4d94>
   25e54:	d9000a17 	ldw	r4,40(sp)
   25e58:	d9800d17 	ldw	r6,52(sp)
   25e5c:	dd400a15 	stw	r21,40(sp)
   25e60:	a905c83a 	sub	r2,r21,r4
   25e64:	308d883a 	add	r6,r6,r2
   25e68:	d9800d15 	stw	r6,52(sp)
   25e6c:	002b883a 	mov	r21,zero
   25e70:	003e0606 	br	2568c <__alt_data_end+0xfffe568c>
   25e74:	9023883a 	mov	r17,r18
   25e78:	9829883a 	mov	r20,r19
   25e7c:	04000084 	movi	r16,2
   25e80:	003c9206 	br	250cc <__alt_data_end+0xfffe50cc>
   25e84:	04000044 	movi	r16,1
   25e88:	dc000c15 	stw	r16,48(sp)
   25e8c:	dc000615 	stw	r16,24(sp)
   25e90:	dc002215 	stw	r16,136(sp)
   25e94:	e0001115 	stw	zero,68(fp)
   25e98:	000b883a 	mov	r5,zero
   25e9c:	003c6906 	br	25044 <__alt_data_end+0xfffe5044>
   25ea0:	3021883a 	mov	r16,r6
   25ea4:	003ffb06 	br	25e94 <__alt_data_end+0xfffe5e94>
   25ea8:	1000021e 	bne	r2,zero,25eb4 <_dtoa_r+0x11e0>
   25eac:	4200004c 	andi	r8,r8,1
   25eb0:	403e7d1e 	bne	r8,zero,258a8 <__alt_data_end+0xfffe58a8>
   25eb4:	01000c04 	movi	r4,48
   25eb8:	00000106 	br	25ec0 <_dtoa_r+0x11ec>
   25ebc:	102f883a 	mov	r23,r2
   25ec0:	b8bfffc4 	addi	r2,r23,-1
   25ec4:	10c00007 	ldb	r3,0(r2)
   25ec8:	193ffc26 	beq	r3,r4,25ebc <__alt_data_end+0xfffe5ebc>
   25ecc:	003e8706 	br	258ec <__alt_data_end+0xfffe58ec>
   25ed0:	d8800517 	ldw	r2,20(sp)
   25ed4:	00a3c83a 	sub	r17,zero,r2
   25ed8:	8800a426 	beq	r17,zero,2616c <_dtoa_r+0x1498>
   25edc:	888003cc 	andi	r2,r17,15
   25ee0:	100490fa 	slli	r2,r2,3
   25ee4:	00c000f4 	movhi	r3,3
   25ee8:	18c38f04 	addi	r3,r3,3644
   25eec:	1885883a 	add	r2,r3,r2
   25ef0:	11800017 	ldw	r6,0(r2)
   25ef4:	11c00117 	ldw	r7,4(r2)
   25ef8:	9009883a 	mov	r4,r18
   25efc:	980b883a 	mov	r5,r19
   25f00:	8823d13a 	srai	r17,r17,4
   25f04:	002c7440 	call	2c744 <__muldf3>
   25f08:	d8800f15 	stw	r2,60(sp)
   25f0c:	d8c01015 	stw	r3,64(sp)
   25f10:	8800e826 	beq	r17,zero,262b4 <_dtoa_r+0x15e0>
   25f14:	050000f4 	movhi	r20,3
   25f18:	a5038504 	addi	r20,r20,3604
   25f1c:	04000084 	movi	r16,2
   25f20:	8980004c 	andi	r6,r17,1
   25f24:	1009883a 	mov	r4,r2
   25f28:	8823d07a 	srai	r17,r17,1
   25f2c:	180b883a 	mov	r5,r3
   25f30:	30000426 	beq	r6,zero,25f44 <_dtoa_r+0x1270>
   25f34:	a1800017 	ldw	r6,0(r20)
   25f38:	a1c00117 	ldw	r7,4(r20)
   25f3c:	84000044 	addi	r16,r16,1
   25f40:	002c7440 	call	2c744 <__muldf3>
   25f44:	a5000204 	addi	r20,r20,8
   25f48:	883ff51e 	bne	r17,zero,25f20 <__alt_data_end+0xfffe5f20>
   25f4c:	d8800f15 	stw	r2,60(sp)
   25f50:	d8c01015 	stw	r3,64(sp)
   25f54:	003c7606 	br	25130 <__alt_data_end+0xfffe5130>
   25f58:	00c00c04 	movi	r3,48
   25f5c:	10c00005 	stb	r3,0(r2)
   25f60:	d8c00517 	ldw	r3,20(sp)
   25f64:	bd3fffc3 	ldbu	r20,-1(r23)
   25f68:	18c00044 	addi	r3,r3,1
   25f6c:	d8c00515 	stw	r3,20(sp)
   25f70:	003db906 	br	25658 <__alt_data_end+0xfffe5658>
   25f74:	89400117 	ldw	r5,4(r17)
   25f78:	e009883a 	mov	r4,fp
   25f7c:	00273900 	call	27390 <_Balloc>
   25f80:	89800417 	ldw	r6,16(r17)
   25f84:	89400304 	addi	r5,r17,12
   25f88:	11000304 	addi	r4,r2,12
   25f8c:	31800084 	addi	r6,r6,2
   25f90:	318d883a 	add	r6,r6,r6
   25f94:	318d883a 	add	r6,r6,r6
   25f98:	1027883a 	mov	r19,r2
   25f9c:	0021b800 	call	21b80 <memcpy>
   25fa0:	01800044 	movi	r6,1
   25fa4:	980b883a 	mov	r5,r19
   25fa8:	e009883a 	mov	r4,fp
   25fac:	0027b100 	call	27b10 <__lshift>
   25fb0:	1029883a 	mov	r20,r2
   25fb4:	003ecc06 	br	25ae8 <__alt_data_end+0xfffe5ae8>
   25fb8:	00800e44 	movi	r2,57
   25fbc:	90809026 	beq	r18,r2,26200 <_dtoa_r+0x152c>
   25fc0:	92000044 	addi	r8,r18,1
   25fc4:	003f1f06 	br	25c44 <__alt_data_end+0xfffe5c44>
   25fc8:	9011883a 	mov	r8,r18
   25fcc:	8825883a 	mov	r18,r17
   25fd0:	a023883a 	mov	r17,r20
   25fd4:	003e2906 	br	2587c <__alt_data_end+0xfffe587c>
   25fd8:	002b883a 	mov	r21,zero
   25fdc:	0023883a 	mov	r17,zero
   25fe0:	003f5406 	br	25d34 <__alt_data_end+0xfffe5d34>
   25fe4:	61bfffc4 	addi	r6,r12,-1
   25fe8:	300490fa 	slli	r2,r6,3
   25fec:	00c000f4 	movhi	r3,3
   25ff0:	18c38f04 	addi	r3,r3,3644
   25ff4:	1885883a 	add	r2,r3,r2
   25ff8:	11000017 	ldw	r4,0(r2)
   25ffc:	11400117 	ldw	r5,4(r2)
   26000:	d8800717 	ldw	r2,28(sp)
   26004:	880f883a 	mov	r7,r17
   26008:	d9801215 	stw	r6,72(sp)
   2600c:	800d883a 	mov	r6,r16
   26010:	db001615 	stw	r12,88(sp)
   26014:	15c00044 	addi	r23,r2,1
   26018:	002c7440 	call	2c744 <__muldf3>
   2601c:	d9401017 	ldw	r5,64(sp)
   26020:	d9000f17 	ldw	r4,60(sp)
   26024:	d8c01515 	stw	r3,84(sp)
   26028:	d8801415 	stw	r2,80(sp)
   2602c:	002d7580 	call	2d758 <__fixdfsi>
   26030:	1009883a 	mov	r4,r2
   26034:	1021883a 	mov	r16,r2
   26038:	002d7d80 	call	2d7d8 <__floatsidf>
   2603c:	d9000f17 	ldw	r4,60(sp)
   26040:	d9401017 	ldw	r5,64(sp)
   26044:	100d883a 	mov	r6,r2
   26048:	180f883a 	mov	r7,r3
   2604c:	002ce5c0 	call	2ce5c <__subdf3>
   26050:	1829883a 	mov	r20,r3
   26054:	d8c00717 	ldw	r3,28(sp)
   26058:	84000c04 	addi	r16,r16,48
   2605c:	1023883a 	mov	r17,r2
   26060:	1c000005 	stb	r16,0(r3)
   26064:	db001617 	ldw	r12,88(sp)
   26068:	00800044 	movi	r2,1
   2606c:	60802226 	beq	r12,r2,260f8 <_dtoa_r+0x1424>
   26070:	d9c00717 	ldw	r7,28(sp)
   26074:	8805883a 	mov	r2,r17
   26078:	b82b883a 	mov	r21,r23
   2607c:	3b19883a 	add	r12,r7,r12
   26080:	6023883a 	mov	r17,r12
   26084:	a007883a 	mov	r3,r20
   26088:	dc800f15 	stw	r18,60(sp)
   2608c:	000d883a 	mov	r6,zero
   26090:	01d00934 	movhi	r7,16420
   26094:	1009883a 	mov	r4,r2
   26098:	180b883a 	mov	r5,r3
   2609c:	002c7440 	call	2c744 <__muldf3>
   260a0:	180b883a 	mov	r5,r3
   260a4:	1009883a 	mov	r4,r2
   260a8:	1829883a 	mov	r20,r3
   260ac:	1025883a 	mov	r18,r2
   260b0:	002d7580 	call	2d758 <__fixdfsi>
   260b4:	1009883a 	mov	r4,r2
   260b8:	1021883a 	mov	r16,r2
   260bc:	002d7d80 	call	2d7d8 <__floatsidf>
   260c0:	100d883a 	mov	r6,r2
   260c4:	180f883a 	mov	r7,r3
   260c8:	9009883a 	mov	r4,r18
   260cc:	a00b883a 	mov	r5,r20
   260d0:	84000c04 	addi	r16,r16,48
   260d4:	002ce5c0 	call	2ce5c <__subdf3>
   260d8:	ad400044 	addi	r21,r21,1
   260dc:	ac3fffc5 	stb	r16,-1(r21)
   260e0:	ac7fea1e 	bne	r21,r17,2608c <__alt_data_end+0xfffe608c>
   260e4:	1023883a 	mov	r17,r2
   260e8:	d8801217 	ldw	r2,72(sp)
   260ec:	dc800f17 	ldw	r18,60(sp)
   260f0:	1829883a 	mov	r20,r3
   260f4:	b8af883a 	add	r23,r23,r2
   260f8:	d9001417 	ldw	r4,80(sp)
   260fc:	d9401517 	ldw	r5,84(sp)
   26100:	000d883a 	mov	r6,zero
   26104:	01cff834 	movhi	r7,16352
   26108:	002b3580 	call	2b358 <__adddf3>
   2610c:	880d883a 	mov	r6,r17
   26110:	a00f883a 	mov	r7,r20
   26114:	1009883a 	mov	r4,r2
   26118:	180b883a 	mov	r5,r3
   2611c:	002c6500 	call	2c650 <__ledf2>
   26120:	10003e0e 	bge	r2,zero,2621c <_dtoa_r+0x1548>
   26124:	d9001317 	ldw	r4,76(sp)
   26128:	bd3fffc3 	ldbu	r20,-1(r23)
   2612c:	d9000515 	stw	r4,20(sp)
   26130:	003d3b06 	br	25620 <__alt_data_end+0xfffe5620>
   26134:	0027883a 	mov	r19,zero
   26138:	003f1b06 	br	25da8 <__alt_data_end+0xfffe5da8>
   2613c:	d8800817 	ldw	r2,32(sp)
   26140:	11e9c83a 	sub	r20,r2,r7
   26144:	0005883a 	mov	r2,zero
   26148:	003d5406 	br	2569c <__alt_data_end+0xfffe569c>
   2614c:	00800044 	movi	r2,1
   26150:	003dc706 	br	25870 <__alt_data_end+0xfffe5870>
   26154:	d8c00217 	ldw	r3,8(sp)
   26158:	00800d84 	movi	r2,54
   2615c:	dd400a17 	ldw	r21,40(sp)
   26160:	10c5c83a 	sub	r2,r2,r3
   26164:	dd000817 	ldw	r20,32(sp)
   26168:	003d4c06 	br	2569c <__alt_data_end+0xfffe569c>
   2616c:	dc800f15 	stw	r18,60(sp)
   26170:	dcc01015 	stw	r19,64(sp)
   26174:	04000084 	movi	r16,2
   26178:	003bed06 	br	25130 <__alt_data_end+0xfffe5130>
   2617c:	d9000617 	ldw	r4,24(sp)
   26180:	203f0d26 	beq	r4,zero,25db8 <__alt_data_end+0xfffe5db8>
   26184:	d9800c17 	ldw	r6,48(sp)
   26188:	01bcab0e 	bge	zero,r6,25438 <__alt_data_end+0xfffe5438>
   2618c:	d9401017 	ldw	r5,64(sp)
   26190:	d9000f17 	ldw	r4,60(sp)
   26194:	000d883a 	mov	r6,zero
   26198:	01d00934 	movhi	r7,16420
   2619c:	002c7440 	call	2c744 <__muldf3>
   261a0:	81000044 	addi	r4,r16,1
   261a4:	d8800f15 	stw	r2,60(sp)
   261a8:	d8c01015 	stw	r3,64(sp)
   261ac:	002d7d80 	call	2d7d8 <__floatsidf>
   261b0:	d9800f17 	ldw	r6,60(sp)
   261b4:	d9c01017 	ldw	r7,64(sp)
   261b8:	1009883a 	mov	r4,r2
   261bc:	180b883a 	mov	r5,r3
   261c0:	002c7440 	call	2c744 <__muldf3>
   261c4:	01d00734 	movhi	r7,16412
   261c8:	000d883a 	mov	r6,zero
   261cc:	1009883a 	mov	r4,r2
   261d0:	180b883a 	mov	r5,r3
   261d4:	002b3580 	call	2b358 <__adddf3>
   261d8:	d9c00517 	ldw	r7,20(sp)
   261dc:	047f3034 	movhi	r17,64704
   261e0:	1021883a 	mov	r16,r2
   261e4:	39ffffc4 	addi	r7,r7,-1
   261e8:	d9c01315 	stw	r7,76(sp)
   261ec:	1c63883a 	add	r17,r3,r17
   261f0:	db000c17 	ldw	r12,48(sp)
   261f4:	003bea06 	br	251a0 <__alt_data_end+0xfffe51a0>
   261f8:	dc000915 	stw	r16,36(sp)
   261fc:	003e0e06 	br	25a38 <__alt_data_end+0xfffe5a38>
   26200:	01000e44 	movi	r4,57
   26204:	8825883a 	mov	r18,r17
   26208:	9dc00044 	addi	r23,r19,1
   2620c:	99000005 	stb	r4,0(r19)
   26210:	a023883a 	mov	r17,r20
   26214:	dc000915 	stw	r16,36(sp)
   26218:	003da406 	br	258ac <__alt_data_end+0xfffe58ac>
   2621c:	d9801417 	ldw	r6,80(sp)
   26220:	d9c01517 	ldw	r7,84(sp)
   26224:	0009883a 	mov	r4,zero
   26228:	014ff834 	movhi	r5,16352
   2622c:	002ce5c0 	call	2ce5c <__subdf3>
   26230:	880d883a 	mov	r6,r17
   26234:	a00f883a 	mov	r7,r20
   26238:	1009883a 	mov	r4,r2
   2623c:	180b883a 	mov	r5,r3
   26240:	002c5740 	call	2c574 <__gedf2>
   26244:	00bc7c0e 	bge	zero,r2,25438 <__alt_data_end+0xfffe5438>
   26248:	01000c04 	movi	r4,48
   2624c:	00000106 	br	26254 <_dtoa_r+0x1580>
   26250:	102f883a 	mov	r23,r2
   26254:	b8bfffc4 	addi	r2,r23,-1
   26258:	10c00007 	ldb	r3,0(r2)
   2625c:	193ffc26 	beq	r3,r4,26250 <__alt_data_end+0xfffe6250>
   26260:	d9801317 	ldw	r6,76(sp)
   26264:	d9800515 	stw	r6,20(sp)
   26268:	003c4406 	br	2537c <__alt_data_end+0xfffe537c>
   2626c:	d9801317 	ldw	r6,76(sp)
   26270:	d9800515 	stw	r6,20(sp)
   26274:	003cea06 	br	25620 <__alt_data_end+0xfffe5620>
   26278:	dd800f17 	ldw	r22,60(sp)
   2627c:	dcc01017 	ldw	r19,64(sp)
   26280:	dc801217 	ldw	r18,72(sp)
   26284:	003c6c06 	br	25438 <__alt_data_end+0xfffe5438>
   26288:	903e031e 	bne	r18,zero,25a98 <__alt_data_end+0xfffe5a98>
   2628c:	003ebb06 	br	25d7c <__alt_data_end+0xfffe5d7c>
   26290:	103e6c1e 	bne	r2,zero,25c44 <__alt_data_end+0xfffe5c44>
   26294:	4080004c 	andi	r2,r8,1
   26298:	103e6a26 	beq	r2,zero,25c44 <__alt_data_end+0xfffe5c44>
   2629c:	003e6606 	br	25c38 <__alt_data_end+0xfffe5c38>
   262a0:	d8c00317 	ldw	r3,12(sp)
   262a4:	00800084 	movi	r2,2
   262a8:	10c02916 	blt	r2,r3,26350 <_dtoa_r+0x167c>
   262ac:	d9000c17 	ldw	r4,48(sp)
   262b0:	003e8806 	br	25cd4 <__alt_data_end+0xfffe5cd4>
   262b4:	04000084 	movi	r16,2
   262b8:	003b9d06 	br	25130 <__alt_data_end+0xfffe5130>
   262bc:	d9001317 	ldw	r4,76(sp)
   262c0:	d9000515 	stw	r4,20(sp)
   262c4:	003cd606 	br	25620 <__alt_data_end+0xfffe5620>
   262c8:	d8801317 	ldw	r2,76(sp)
   262cc:	d8800515 	stw	r2,20(sp)
   262d0:	003c2a06 	br	2537c <__alt_data_end+0xfffe537c>
   262d4:	d9800317 	ldw	r6,12(sp)
   262d8:	00800084 	movi	r2,2
   262dc:	11801516 	blt	r2,r6,26334 <_dtoa_r+0x1660>
   262e0:	d9c00c17 	ldw	r7,48(sp)
   262e4:	d9c00615 	stw	r7,24(sp)
   262e8:	003df706 	br	25ac8 <__alt_data_end+0xfffe5ac8>
   262ec:	193d3926 	beq	r3,r4,257d4 <__alt_data_end+0xfffe57d4>
   262f0:	00c00f04 	movi	r3,60
   262f4:	1885c83a 	sub	r2,r3,r2
   262f8:	003ddf06 	br	25a78 <__alt_data_end+0xfffe5a78>
   262fc:	e009883a 	mov	r4,fp
   26300:	e0001115 	stw	zero,68(fp)
   26304:	000b883a 	mov	r5,zero
   26308:	00273900 	call	27390 <_Balloc>
   2630c:	d8800715 	stw	r2,28(sp)
   26310:	d8c00717 	ldw	r3,28(sp)
   26314:	00bfffc4 	movi	r2,-1
   26318:	01000044 	movi	r4,1
   2631c:	d8800c15 	stw	r2,48(sp)
   26320:	e0c01015 	stw	r3,64(fp)
   26324:	d9000b15 	stw	r4,44(sp)
   26328:	d8800615 	stw	r2,24(sp)
   2632c:	d8002215 	stw	zero,136(sp)
   26330:	003c4106 	br	25438 <__alt_data_end+0xfffe5438>
   26334:	d8c00c17 	ldw	r3,48(sp)
   26338:	d8c00615 	stw	r3,24(sp)
   2633c:	003e7006 	br	25d00 <__alt_data_end+0xfffe5d00>
   26340:	04400044 	movi	r17,1
   26344:	003b2006 	br	24fc8 <__alt_data_end+0xfffe4fc8>
   26348:	000b883a 	mov	r5,zero
   2634c:	003b3d06 	br	25044 <__alt_data_end+0xfffe5044>
   26350:	d8800c17 	ldw	r2,48(sp)
   26354:	d8800615 	stw	r2,24(sp)
   26358:	003e6906 	br	25d00 <__alt_data_end+0xfffe5d00>

0002635c <_fclose_r>:
   2635c:	28003926 	beq	r5,zero,26444 <_fclose_r+0xe8>
   26360:	defffc04 	addi	sp,sp,-16
   26364:	dc400115 	stw	r17,4(sp)
   26368:	dc000015 	stw	r16,0(sp)
   2636c:	dfc00315 	stw	ra,12(sp)
   26370:	dc800215 	stw	r18,8(sp)
   26374:	2023883a 	mov	r17,r4
   26378:	2821883a 	mov	r16,r5
   2637c:	20000226 	beq	r4,zero,26388 <_fclose_r+0x2c>
   26380:	20800e17 	ldw	r2,56(r4)
   26384:	10002726 	beq	r2,zero,26424 <_fclose_r+0xc8>
   26388:	8080030f 	ldh	r2,12(r16)
   2638c:	1000071e 	bne	r2,zero,263ac <_fclose_r+0x50>
   26390:	0005883a 	mov	r2,zero
   26394:	dfc00317 	ldw	ra,12(sp)
   26398:	dc800217 	ldw	r18,8(sp)
   2639c:	dc400117 	ldw	r17,4(sp)
   263a0:	dc000017 	ldw	r16,0(sp)
   263a4:	dec00404 	addi	sp,sp,16
   263a8:	f800283a 	ret
   263ac:	800b883a 	mov	r5,r16
   263b0:	8809883a 	mov	r4,r17
   263b4:	00264600 	call	26460 <__sflush_r>
   263b8:	1025883a 	mov	r18,r2
   263bc:	80800b17 	ldw	r2,44(r16)
   263c0:	10000426 	beq	r2,zero,263d4 <_fclose_r+0x78>
   263c4:	81400717 	ldw	r5,28(r16)
   263c8:	8809883a 	mov	r4,r17
   263cc:	103ee83a 	callr	r2
   263d0:	10001616 	blt	r2,zero,2642c <_fclose_r+0xd0>
   263d4:	8080030b 	ldhu	r2,12(r16)
   263d8:	1080200c 	andi	r2,r2,128
   263dc:	1000151e 	bne	r2,zero,26434 <_fclose_r+0xd8>
   263e0:	81400c17 	ldw	r5,48(r16)
   263e4:	28000526 	beq	r5,zero,263fc <_fclose_r+0xa0>
   263e8:	80801004 	addi	r2,r16,64
   263ec:	28800226 	beq	r5,r2,263f8 <_fclose_r+0x9c>
   263f0:	8809883a 	mov	r4,r17
   263f4:	00268d80 	call	268d8 <_free_r>
   263f8:	80000c15 	stw	zero,48(r16)
   263fc:	81401117 	ldw	r5,68(r16)
   26400:	28000326 	beq	r5,zero,26410 <_fclose_r+0xb4>
   26404:	8809883a 	mov	r4,r17
   26408:	00268d80 	call	268d8 <_free_r>
   2640c:	80001115 	stw	zero,68(r16)
   26410:	00208d80 	call	208d8 <__sfp_lock_acquire>
   26414:	8000030d 	sth	zero,12(r16)
   26418:	00208dc0 	call	208dc <__sfp_lock_release>
   2641c:	9005883a 	mov	r2,r18
   26420:	003fdc06 	br	26394 <__alt_data_end+0xfffe6394>
   26424:	00208c80 	call	208c8 <__sinit>
   26428:	003fd706 	br	26388 <__alt_data_end+0xfffe6388>
   2642c:	04bfffc4 	movi	r18,-1
   26430:	003fe806 	br	263d4 <__alt_data_end+0xfffe63d4>
   26434:	81400417 	ldw	r5,16(r16)
   26438:	8809883a 	mov	r4,r17
   2643c:	00268d80 	call	268d8 <_free_r>
   26440:	003fe706 	br	263e0 <__alt_data_end+0xfffe63e0>
   26444:	0005883a 	mov	r2,zero
   26448:	f800283a 	ret

0002644c <fclose>:
   2644c:	008000f4 	movhi	r2,3
   26450:	108af504 	addi	r2,r2,11220
   26454:	200b883a 	mov	r5,r4
   26458:	11000017 	ldw	r4,0(r2)
   2645c:	002635c1 	jmpi	2635c <_fclose_r>

00026460 <__sflush_r>:
   26460:	2880030b 	ldhu	r2,12(r5)
   26464:	defffb04 	addi	sp,sp,-20
   26468:	dcc00315 	stw	r19,12(sp)
   2646c:	dc400115 	stw	r17,4(sp)
   26470:	dfc00415 	stw	ra,16(sp)
   26474:	dc800215 	stw	r18,8(sp)
   26478:	dc000015 	stw	r16,0(sp)
   2647c:	10c0020c 	andi	r3,r2,8
   26480:	2823883a 	mov	r17,r5
   26484:	2027883a 	mov	r19,r4
   26488:	1800311e 	bne	r3,zero,26550 <__sflush_r+0xf0>
   2648c:	28c00117 	ldw	r3,4(r5)
   26490:	10820014 	ori	r2,r2,2048
   26494:	2880030d 	sth	r2,12(r5)
   26498:	00c04b0e 	bge	zero,r3,265c8 <__sflush_r+0x168>
   2649c:	8a000a17 	ldw	r8,40(r17)
   264a0:	40002326 	beq	r8,zero,26530 <__sflush_r+0xd0>
   264a4:	9c000017 	ldw	r16,0(r19)
   264a8:	10c4000c 	andi	r3,r2,4096
   264ac:	98000015 	stw	zero,0(r19)
   264b0:	18004826 	beq	r3,zero,265d4 <__sflush_r+0x174>
   264b4:	89801417 	ldw	r6,80(r17)
   264b8:	10c0010c 	andi	r3,r2,4
   264bc:	18000626 	beq	r3,zero,264d8 <__sflush_r+0x78>
   264c0:	88c00117 	ldw	r3,4(r17)
   264c4:	88800c17 	ldw	r2,48(r17)
   264c8:	30cdc83a 	sub	r6,r6,r3
   264cc:	10000226 	beq	r2,zero,264d8 <__sflush_r+0x78>
   264d0:	88800f17 	ldw	r2,60(r17)
   264d4:	308dc83a 	sub	r6,r6,r2
   264d8:	89400717 	ldw	r5,28(r17)
   264dc:	000f883a 	mov	r7,zero
   264e0:	9809883a 	mov	r4,r19
   264e4:	403ee83a 	callr	r8
   264e8:	00ffffc4 	movi	r3,-1
   264ec:	10c04426 	beq	r2,r3,26600 <__sflush_r+0x1a0>
   264f0:	88c0030b 	ldhu	r3,12(r17)
   264f4:	89000417 	ldw	r4,16(r17)
   264f8:	88000115 	stw	zero,4(r17)
   264fc:	197dffcc 	andi	r5,r3,63487
   26500:	8940030d 	sth	r5,12(r17)
   26504:	89000015 	stw	r4,0(r17)
   26508:	18c4000c 	andi	r3,r3,4096
   2650c:	18002c1e 	bne	r3,zero,265c0 <__sflush_r+0x160>
   26510:	89400c17 	ldw	r5,48(r17)
   26514:	9c000015 	stw	r16,0(r19)
   26518:	28000526 	beq	r5,zero,26530 <__sflush_r+0xd0>
   2651c:	88801004 	addi	r2,r17,64
   26520:	28800226 	beq	r5,r2,2652c <__sflush_r+0xcc>
   26524:	9809883a 	mov	r4,r19
   26528:	00268d80 	call	268d8 <_free_r>
   2652c:	88000c15 	stw	zero,48(r17)
   26530:	0005883a 	mov	r2,zero
   26534:	dfc00417 	ldw	ra,16(sp)
   26538:	dcc00317 	ldw	r19,12(sp)
   2653c:	dc800217 	ldw	r18,8(sp)
   26540:	dc400117 	ldw	r17,4(sp)
   26544:	dc000017 	ldw	r16,0(sp)
   26548:	dec00504 	addi	sp,sp,20
   2654c:	f800283a 	ret
   26550:	2c800417 	ldw	r18,16(r5)
   26554:	903ff626 	beq	r18,zero,26530 <__alt_data_end+0xfffe6530>
   26558:	2c000017 	ldw	r16,0(r5)
   2655c:	108000cc 	andi	r2,r2,3
   26560:	2c800015 	stw	r18,0(r5)
   26564:	84a1c83a 	sub	r16,r16,r18
   26568:	1000131e 	bne	r2,zero,265b8 <__sflush_r+0x158>
   2656c:	28800517 	ldw	r2,20(r5)
   26570:	88800215 	stw	r2,8(r17)
   26574:	04000316 	blt	zero,r16,26584 <__sflush_r+0x124>
   26578:	003fed06 	br	26530 <__alt_data_end+0xfffe6530>
   2657c:	90a5883a 	add	r18,r18,r2
   26580:	043feb0e 	bge	zero,r16,26530 <__alt_data_end+0xfffe6530>
   26584:	88800917 	ldw	r2,36(r17)
   26588:	89400717 	ldw	r5,28(r17)
   2658c:	800f883a 	mov	r7,r16
   26590:	900d883a 	mov	r6,r18
   26594:	9809883a 	mov	r4,r19
   26598:	103ee83a 	callr	r2
   2659c:	80a1c83a 	sub	r16,r16,r2
   265a0:	00bff616 	blt	zero,r2,2657c <__alt_data_end+0xfffe657c>
   265a4:	88c0030b 	ldhu	r3,12(r17)
   265a8:	00bfffc4 	movi	r2,-1
   265ac:	18c01014 	ori	r3,r3,64
   265b0:	88c0030d 	sth	r3,12(r17)
   265b4:	003fdf06 	br	26534 <__alt_data_end+0xfffe6534>
   265b8:	0005883a 	mov	r2,zero
   265bc:	003fec06 	br	26570 <__alt_data_end+0xfffe6570>
   265c0:	88801415 	stw	r2,80(r17)
   265c4:	003fd206 	br	26510 <__alt_data_end+0xfffe6510>
   265c8:	28c00f17 	ldw	r3,60(r5)
   265cc:	00ffb316 	blt	zero,r3,2649c <__alt_data_end+0xfffe649c>
   265d0:	003fd706 	br	26530 <__alt_data_end+0xfffe6530>
   265d4:	89400717 	ldw	r5,28(r17)
   265d8:	000d883a 	mov	r6,zero
   265dc:	01c00044 	movi	r7,1
   265e0:	9809883a 	mov	r4,r19
   265e4:	403ee83a 	callr	r8
   265e8:	100d883a 	mov	r6,r2
   265ec:	00bfffc4 	movi	r2,-1
   265f0:	30801426 	beq	r6,r2,26644 <__sflush_r+0x1e4>
   265f4:	8880030b 	ldhu	r2,12(r17)
   265f8:	8a000a17 	ldw	r8,40(r17)
   265fc:	003fae06 	br	264b8 <__alt_data_end+0xfffe64b8>
   26600:	98c00017 	ldw	r3,0(r19)
   26604:	183fba26 	beq	r3,zero,264f0 <__alt_data_end+0xfffe64f0>
   26608:	01000744 	movi	r4,29
   2660c:	19000626 	beq	r3,r4,26628 <__sflush_r+0x1c8>
   26610:	01000584 	movi	r4,22
   26614:	19000426 	beq	r3,r4,26628 <__sflush_r+0x1c8>
   26618:	88c0030b 	ldhu	r3,12(r17)
   2661c:	18c01014 	ori	r3,r3,64
   26620:	88c0030d 	sth	r3,12(r17)
   26624:	003fc306 	br	26534 <__alt_data_end+0xfffe6534>
   26628:	8880030b 	ldhu	r2,12(r17)
   2662c:	88c00417 	ldw	r3,16(r17)
   26630:	88000115 	stw	zero,4(r17)
   26634:	10bdffcc 	andi	r2,r2,63487
   26638:	8880030d 	sth	r2,12(r17)
   2663c:	88c00015 	stw	r3,0(r17)
   26640:	003fb306 	br	26510 <__alt_data_end+0xfffe6510>
   26644:	98800017 	ldw	r2,0(r19)
   26648:	103fea26 	beq	r2,zero,265f4 <__alt_data_end+0xfffe65f4>
   2664c:	00c00744 	movi	r3,29
   26650:	10c00226 	beq	r2,r3,2665c <__sflush_r+0x1fc>
   26654:	00c00584 	movi	r3,22
   26658:	10c0031e 	bne	r2,r3,26668 <__sflush_r+0x208>
   2665c:	9c000015 	stw	r16,0(r19)
   26660:	0005883a 	mov	r2,zero
   26664:	003fb306 	br	26534 <__alt_data_end+0xfffe6534>
   26668:	88c0030b 	ldhu	r3,12(r17)
   2666c:	3005883a 	mov	r2,r6
   26670:	18c01014 	ori	r3,r3,64
   26674:	88c0030d 	sth	r3,12(r17)
   26678:	003fae06 	br	26534 <__alt_data_end+0xfffe6534>

0002667c <_fflush_r>:
   2667c:	defffd04 	addi	sp,sp,-12
   26680:	dc000115 	stw	r16,4(sp)
   26684:	dfc00215 	stw	ra,8(sp)
   26688:	2021883a 	mov	r16,r4
   2668c:	20000226 	beq	r4,zero,26698 <_fflush_r+0x1c>
   26690:	20800e17 	ldw	r2,56(r4)
   26694:	10000c26 	beq	r2,zero,266c8 <_fflush_r+0x4c>
   26698:	2880030f 	ldh	r2,12(r5)
   2669c:	1000051e 	bne	r2,zero,266b4 <_fflush_r+0x38>
   266a0:	0005883a 	mov	r2,zero
   266a4:	dfc00217 	ldw	ra,8(sp)
   266a8:	dc000117 	ldw	r16,4(sp)
   266ac:	dec00304 	addi	sp,sp,12
   266b0:	f800283a 	ret
   266b4:	8009883a 	mov	r4,r16
   266b8:	dfc00217 	ldw	ra,8(sp)
   266bc:	dc000117 	ldw	r16,4(sp)
   266c0:	dec00304 	addi	sp,sp,12
   266c4:	00264601 	jmpi	26460 <__sflush_r>
   266c8:	d9400015 	stw	r5,0(sp)
   266cc:	00208c80 	call	208c8 <__sinit>
   266d0:	d9400017 	ldw	r5,0(sp)
   266d4:	003ff006 	br	26698 <__alt_data_end+0xfffe6698>

000266d8 <fflush>:
   266d8:	20000526 	beq	r4,zero,266f0 <fflush+0x18>
   266dc:	008000f4 	movhi	r2,3
   266e0:	108af504 	addi	r2,r2,11220
   266e4:	200b883a 	mov	r5,r4
   266e8:	11000017 	ldw	r4,0(r2)
   266ec:	002667c1 	jmpi	2667c <_fflush_r>
   266f0:	008000f4 	movhi	r2,3
   266f4:	108af404 	addi	r2,r2,11216
   266f8:	11000017 	ldw	r4,0(r2)
   266fc:	014000b4 	movhi	r5,2
   26700:	29599f04 	addi	r5,r5,26236
   26704:	00210101 	jmpi	21010 <_fwalk_reent>

00026708 <__sflags>:
   26708:	28800007 	ldb	r2,0(r5)
   2670c:	00c01c84 	movi	r3,114
   26710:	10c02426 	beq	r2,r3,267a4 <__sflags+0x9c>
   26714:	00c01dc4 	movi	r3,119
   26718:	10c01e26 	beq	r2,r3,26794 <__sflags+0x8c>
   2671c:	00c01844 	movi	r3,97
   26720:	10c00426 	beq	r2,r3,26734 <__sflags+0x2c>
   26724:	00800584 	movi	r2,22
   26728:	20800015 	stw	r2,0(r4)
   2672c:	0005883a 	mov	r2,zero
   26730:	f800283a 	ret
   26734:	02c08204 	movi	r11,520
   26738:	01000044 	movi	r4,1
   2673c:	00804204 	movi	r2,264
   26740:	01c00ac4 	movi	r7,43
   26744:	02bff8c4 	movi	r10,-29
   26748:	027fff04 	movi	r9,-4
   2674c:	02001e04 	movi	r8,120
   26750:	29400044 	addi	r5,r5,1
   26754:	28c00007 	ldb	r3,0(r5)
   26758:	18000626 	beq	r3,zero,26774 <__sflags+0x6c>
   2675c:	19c00826 	beq	r3,r7,26780 <__sflags+0x78>
   26760:	1a3ffb1e 	bne	r3,r8,26750 <__alt_data_end+0xfffe6750>
   26764:	29400044 	addi	r5,r5,1
   26768:	28c00007 	ldb	r3,0(r5)
   2676c:	21020014 	ori	r4,r4,2048
   26770:	183ffa1e 	bne	r3,zero,2675c <__alt_data_end+0xfffe675c>
   26774:	22c8b03a 	or	r4,r4,r11
   26778:	31000015 	stw	r4,0(r6)
   2677c:	f800283a 	ret
   26780:	1284703a 	and	r2,r2,r10
   26784:	2248703a 	and	r4,r4,r9
   26788:	10800414 	ori	r2,r2,16
   2678c:	21000094 	ori	r4,r4,2
   26790:	003fef06 	br	26750 <__alt_data_end+0xfffe6750>
   26794:	02c18004 	movi	r11,1536
   26798:	01000044 	movi	r4,1
   2679c:	00800204 	movi	r2,8
   267a0:	003fe706 	br	26740 <__alt_data_end+0xfffe6740>
   267a4:	0017883a 	mov	r11,zero
   267a8:	0009883a 	mov	r4,zero
   267ac:	00800104 	movi	r2,4
   267b0:	003fe306 	br	26740 <__alt_data_end+0xfffe6740>

000267b4 <_malloc_trim_r>:
   267b4:	defffb04 	addi	sp,sp,-20
   267b8:	dcc00315 	stw	r19,12(sp)
   267bc:	04c000f4 	movhi	r19,3
   267c0:	dc800215 	stw	r18,8(sp)
   267c4:	dc400115 	stw	r17,4(sp)
   267c8:	dc000015 	stw	r16,0(sp)
   267cc:	dfc00415 	stw	ra,16(sp)
   267d0:	2821883a 	mov	r16,r5
   267d4:	9cc52004 	addi	r19,r19,5248
   267d8:	2025883a 	mov	r18,r4
   267dc:	002df3c0 	call	2df3c <__malloc_lock>
   267e0:	98800217 	ldw	r2,8(r19)
   267e4:	14400117 	ldw	r17,4(r2)
   267e8:	00bfff04 	movi	r2,-4
   267ec:	88a2703a 	and	r17,r17,r2
   267f0:	8c21c83a 	sub	r16,r17,r16
   267f4:	8403fbc4 	addi	r16,r16,4079
   267f8:	8020d33a 	srli	r16,r16,12
   267fc:	0083ffc4 	movi	r2,4095
   26800:	843fffc4 	addi	r16,r16,-1
   26804:	8020933a 	slli	r16,r16,12
   26808:	1400060e 	bge	r2,r16,26824 <_malloc_trim_r+0x70>
   2680c:	000b883a 	mov	r5,zero
   26810:	9009883a 	mov	r4,r18
   26814:	00221800 	call	22180 <_sbrk_r>
   26818:	98c00217 	ldw	r3,8(r19)
   2681c:	1c47883a 	add	r3,r3,r17
   26820:	10c00a26 	beq	r2,r3,2684c <_malloc_trim_r+0x98>
   26824:	9009883a 	mov	r4,r18
   26828:	002df600 	call	2df60 <__malloc_unlock>
   2682c:	0005883a 	mov	r2,zero
   26830:	dfc00417 	ldw	ra,16(sp)
   26834:	dcc00317 	ldw	r19,12(sp)
   26838:	dc800217 	ldw	r18,8(sp)
   2683c:	dc400117 	ldw	r17,4(sp)
   26840:	dc000017 	ldw	r16,0(sp)
   26844:	dec00504 	addi	sp,sp,20
   26848:	f800283a 	ret
   2684c:	040bc83a 	sub	r5,zero,r16
   26850:	9009883a 	mov	r4,r18
   26854:	00221800 	call	22180 <_sbrk_r>
   26858:	00ffffc4 	movi	r3,-1
   2685c:	10c00d26 	beq	r2,r3,26894 <_malloc_trim_r+0xe0>
   26860:	00c000f4 	movhi	r3,3
   26864:	18d1ff04 	addi	r3,r3,18428
   26868:	18800017 	ldw	r2,0(r3)
   2686c:	99000217 	ldw	r4,8(r19)
   26870:	8c23c83a 	sub	r17,r17,r16
   26874:	8c400054 	ori	r17,r17,1
   26878:	1421c83a 	sub	r16,r2,r16
   2687c:	24400115 	stw	r17,4(r4)
   26880:	9009883a 	mov	r4,r18
   26884:	1c000015 	stw	r16,0(r3)
   26888:	002df600 	call	2df60 <__malloc_unlock>
   2688c:	00800044 	movi	r2,1
   26890:	003fe706 	br	26830 <__alt_data_end+0xfffe6830>
   26894:	000b883a 	mov	r5,zero
   26898:	9009883a 	mov	r4,r18
   2689c:	00221800 	call	22180 <_sbrk_r>
   268a0:	99000217 	ldw	r4,8(r19)
   268a4:	014003c4 	movi	r5,15
   268a8:	1107c83a 	sub	r3,r2,r4
   268ac:	28ffdd0e 	bge	r5,r3,26824 <__alt_data_end+0xfffe6824>
   268b0:	014000f4 	movhi	r5,3
   268b4:	294af604 	addi	r5,r5,11224
   268b8:	29400017 	ldw	r5,0(r5)
   268bc:	18c00054 	ori	r3,r3,1
   268c0:	20c00115 	stw	r3,4(r4)
   268c4:	00c000f4 	movhi	r3,3
   268c8:	1145c83a 	sub	r2,r2,r5
   268cc:	18d1ff04 	addi	r3,r3,18428
   268d0:	18800015 	stw	r2,0(r3)
   268d4:	003fd306 	br	26824 <__alt_data_end+0xfffe6824>

000268d8 <_free_r>:
   268d8:	28004126 	beq	r5,zero,269e0 <_free_r+0x108>
   268dc:	defffd04 	addi	sp,sp,-12
   268e0:	dc400115 	stw	r17,4(sp)
   268e4:	dc000015 	stw	r16,0(sp)
   268e8:	2023883a 	mov	r17,r4
   268ec:	2821883a 	mov	r16,r5
   268f0:	dfc00215 	stw	ra,8(sp)
   268f4:	002df3c0 	call	2df3c <__malloc_lock>
   268f8:	81ffff17 	ldw	r7,-4(r16)
   268fc:	00bfff84 	movi	r2,-2
   26900:	010000f4 	movhi	r4,3
   26904:	81bffe04 	addi	r6,r16,-8
   26908:	3884703a 	and	r2,r7,r2
   2690c:	21052004 	addi	r4,r4,5248
   26910:	308b883a 	add	r5,r6,r2
   26914:	2a400117 	ldw	r9,4(r5)
   26918:	22000217 	ldw	r8,8(r4)
   2691c:	00ffff04 	movi	r3,-4
   26920:	48c6703a 	and	r3,r9,r3
   26924:	2a005726 	beq	r5,r8,26a84 <_free_r+0x1ac>
   26928:	28c00115 	stw	r3,4(r5)
   2692c:	39c0004c 	andi	r7,r7,1
   26930:	3800091e 	bne	r7,zero,26958 <_free_r+0x80>
   26934:	823ffe17 	ldw	r8,-8(r16)
   26938:	22400204 	addi	r9,r4,8
   2693c:	320dc83a 	sub	r6,r6,r8
   26940:	31c00217 	ldw	r7,8(r6)
   26944:	1205883a 	add	r2,r2,r8
   26948:	3a406526 	beq	r7,r9,26ae0 <_free_r+0x208>
   2694c:	32000317 	ldw	r8,12(r6)
   26950:	3a000315 	stw	r8,12(r7)
   26954:	41c00215 	stw	r7,8(r8)
   26958:	28cf883a 	add	r7,r5,r3
   2695c:	39c00117 	ldw	r7,4(r7)
   26960:	39c0004c 	andi	r7,r7,1
   26964:	38003a26 	beq	r7,zero,26a50 <_free_r+0x178>
   26968:	10c00054 	ori	r3,r2,1
   2696c:	30c00115 	stw	r3,4(r6)
   26970:	3087883a 	add	r3,r6,r2
   26974:	18800015 	stw	r2,0(r3)
   26978:	00c07fc4 	movi	r3,511
   2697c:	18801936 	bltu	r3,r2,269e4 <_free_r+0x10c>
   26980:	1004d0fa 	srli	r2,r2,3
   26984:	01c00044 	movi	r7,1
   26988:	21400117 	ldw	r5,4(r4)
   2698c:	10c00044 	addi	r3,r2,1
   26990:	18c7883a 	add	r3,r3,r3
   26994:	1005d0ba 	srai	r2,r2,2
   26998:	18c7883a 	add	r3,r3,r3
   2699c:	18c7883a 	add	r3,r3,r3
   269a0:	1907883a 	add	r3,r3,r4
   269a4:	3884983a 	sll	r2,r7,r2
   269a8:	19c00017 	ldw	r7,0(r3)
   269ac:	1a3ffe04 	addi	r8,r3,-8
   269b0:	1144b03a 	or	r2,r2,r5
   269b4:	32000315 	stw	r8,12(r6)
   269b8:	31c00215 	stw	r7,8(r6)
   269bc:	20800115 	stw	r2,4(r4)
   269c0:	19800015 	stw	r6,0(r3)
   269c4:	39800315 	stw	r6,12(r7)
   269c8:	8809883a 	mov	r4,r17
   269cc:	dfc00217 	ldw	ra,8(sp)
   269d0:	dc400117 	ldw	r17,4(sp)
   269d4:	dc000017 	ldw	r16,0(sp)
   269d8:	dec00304 	addi	sp,sp,12
   269dc:	002df601 	jmpi	2df60 <__malloc_unlock>
   269e0:	f800283a 	ret
   269e4:	100ad27a 	srli	r5,r2,9
   269e8:	00c00104 	movi	r3,4
   269ec:	19404a36 	bltu	r3,r5,26b18 <_free_r+0x240>
   269f0:	100ad1ba 	srli	r5,r2,6
   269f4:	28c00e44 	addi	r3,r5,57
   269f8:	18c7883a 	add	r3,r3,r3
   269fc:	29400e04 	addi	r5,r5,56
   26a00:	18c7883a 	add	r3,r3,r3
   26a04:	18c7883a 	add	r3,r3,r3
   26a08:	1909883a 	add	r4,r3,r4
   26a0c:	20c00017 	ldw	r3,0(r4)
   26a10:	01c000f4 	movhi	r7,3
   26a14:	213ffe04 	addi	r4,r4,-8
   26a18:	39c52004 	addi	r7,r7,5248
   26a1c:	20c04426 	beq	r4,r3,26b30 <_free_r+0x258>
   26a20:	01ffff04 	movi	r7,-4
   26a24:	19400117 	ldw	r5,4(r3)
   26a28:	29ca703a 	and	r5,r5,r7
   26a2c:	1140022e 	bgeu	r2,r5,26a38 <_free_r+0x160>
   26a30:	18c00217 	ldw	r3,8(r3)
   26a34:	20fffb1e 	bne	r4,r3,26a24 <__alt_data_end+0xfffe6a24>
   26a38:	19000317 	ldw	r4,12(r3)
   26a3c:	31000315 	stw	r4,12(r6)
   26a40:	30c00215 	stw	r3,8(r6)
   26a44:	21800215 	stw	r6,8(r4)
   26a48:	19800315 	stw	r6,12(r3)
   26a4c:	003fde06 	br	269c8 <__alt_data_end+0xfffe69c8>
   26a50:	29c00217 	ldw	r7,8(r5)
   26a54:	10c5883a 	add	r2,r2,r3
   26a58:	00c000f4 	movhi	r3,3
   26a5c:	18c52204 	addi	r3,r3,5256
   26a60:	38c03b26 	beq	r7,r3,26b50 <_free_r+0x278>
   26a64:	2a000317 	ldw	r8,12(r5)
   26a68:	11400054 	ori	r5,r2,1
   26a6c:	3087883a 	add	r3,r6,r2
   26a70:	3a000315 	stw	r8,12(r7)
   26a74:	41c00215 	stw	r7,8(r8)
   26a78:	31400115 	stw	r5,4(r6)
   26a7c:	18800015 	stw	r2,0(r3)
   26a80:	003fbd06 	br	26978 <__alt_data_end+0xfffe6978>
   26a84:	39c0004c 	andi	r7,r7,1
   26a88:	10c5883a 	add	r2,r2,r3
   26a8c:	3800071e 	bne	r7,zero,26aac <_free_r+0x1d4>
   26a90:	81fffe17 	ldw	r7,-8(r16)
   26a94:	31cdc83a 	sub	r6,r6,r7
   26a98:	30c00317 	ldw	r3,12(r6)
   26a9c:	31400217 	ldw	r5,8(r6)
   26aa0:	11c5883a 	add	r2,r2,r7
   26aa4:	28c00315 	stw	r3,12(r5)
   26aa8:	19400215 	stw	r5,8(r3)
   26aac:	10c00054 	ori	r3,r2,1
   26ab0:	30c00115 	stw	r3,4(r6)
   26ab4:	00c000f4 	movhi	r3,3
   26ab8:	18caf704 	addi	r3,r3,11228
   26abc:	18c00017 	ldw	r3,0(r3)
   26ac0:	21800215 	stw	r6,8(r4)
   26ac4:	10ffc036 	bltu	r2,r3,269c8 <__alt_data_end+0xfffe69c8>
   26ac8:	008000f4 	movhi	r2,3
   26acc:	1091f404 	addi	r2,r2,18384
   26ad0:	11400017 	ldw	r5,0(r2)
   26ad4:	8809883a 	mov	r4,r17
   26ad8:	00267b40 	call	267b4 <_malloc_trim_r>
   26adc:	003fba06 	br	269c8 <__alt_data_end+0xfffe69c8>
   26ae0:	28c9883a 	add	r4,r5,r3
   26ae4:	21000117 	ldw	r4,4(r4)
   26ae8:	2100004c 	andi	r4,r4,1
   26aec:	2000391e 	bne	r4,zero,26bd4 <_free_r+0x2fc>
   26af0:	29c00217 	ldw	r7,8(r5)
   26af4:	29000317 	ldw	r4,12(r5)
   26af8:	1885883a 	add	r2,r3,r2
   26afc:	10c00054 	ori	r3,r2,1
   26b00:	39000315 	stw	r4,12(r7)
   26b04:	21c00215 	stw	r7,8(r4)
   26b08:	30c00115 	stw	r3,4(r6)
   26b0c:	308d883a 	add	r6,r6,r2
   26b10:	30800015 	stw	r2,0(r6)
   26b14:	003fac06 	br	269c8 <__alt_data_end+0xfffe69c8>
   26b18:	00c00504 	movi	r3,20
   26b1c:	19401536 	bltu	r3,r5,26b74 <_free_r+0x29c>
   26b20:	28c01704 	addi	r3,r5,92
   26b24:	18c7883a 	add	r3,r3,r3
   26b28:	294016c4 	addi	r5,r5,91
   26b2c:	003fb406 	br	26a00 <__alt_data_end+0xfffe6a00>
   26b30:	280bd0ba 	srai	r5,r5,2
   26b34:	00c00044 	movi	r3,1
   26b38:	38800117 	ldw	r2,4(r7)
   26b3c:	194a983a 	sll	r5,r3,r5
   26b40:	2007883a 	mov	r3,r4
   26b44:	2884b03a 	or	r2,r5,r2
   26b48:	38800115 	stw	r2,4(r7)
   26b4c:	003fbb06 	br	26a3c <__alt_data_end+0xfffe6a3c>
   26b50:	21800515 	stw	r6,20(r4)
   26b54:	21800415 	stw	r6,16(r4)
   26b58:	10c00054 	ori	r3,r2,1
   26b5c:	31c00315 	stw	r7,12(r6)
   26b60:	31c00215 	stw	r7,8(r6)
   26b64:	30c00115 	stw	r3,4(r6)
   26b68:	308d883a 	add	r6,r6,r2
   26b6c:	30800015 	stw	r2,0(r6)
   26b70:	003f9506 	br	269c8 <__alt_data_end+0xfffe69c8>
   26b74:	00c01504 	movi	r3,84
   26b78:	19400536 	bltu	r3,r5,26b90 <_free_r+0x2b8>
   26b7c:	100ad33a 	srli	r5,r2,12
   26b80:	28c01bc4 	addi	r3,r5,111
   26b84:	18c7883a 	add	r3,r3,r3
   26b88:	29401b84 	addi	r5,r5,110
   26b8c:	003f9c06 	br	26a00 <__alt_data_end+0xfffe6a00>
   26b90:	00c05504 	movi	r3,340
   26b94:	19400536 	bltu	r3,r5,26bac <_free_r+0x2d4>
   26b98:	100ad3fa 	srli	r5,r2,15
   26b9c:	28c01e04 	addi	r3,r5,120
   26ba0:	18c7883a 	add	r3,r3,r3
   26ba4:	29401dc4 	addi	r5,r5,119
   26ba8:	003f9506 	br	26a00 <__alt_data_end+0xfffe6a00>
   26bac:	00c15504 	movi	r3,1364
   26bb0:	19400536 	bltu	r3,r5,26bc8 <_free_r+0x2f0>
   26bb4:	100ad4ba 	srli	r5,r2,18
   26bb8:	28c01f44 	addi	r3,r5,125
   26bbc:	18c7883a 	add	r3,r3,r3
   26bc0:	29401f04 	addi	r5,r5,124
   26bc4:	003f8e06 	br	26a00 <__alt_data_end+0xfffe6a00>
   26bc8:	00c03f84 	movi	r3,254
   26bcc:	01401f84 	movi	r5,126
   26bd0:	003f8b06 	br	26a00 <__alt_data_end+0xfffe6a00>
   26bd4:	10c00054 	ori	r3,r2,1
   26bd8:	30c00115 	stw	r3,4(r6)
   26bdc:	308d883a 	add	r6,r6,r2
   26be0:	30800015 	stw	r2,0(r6)
   26be4:	003f7806 	br	269c8 <__alt_data_end+0xfffe69c8>

00026be8 <__sfvwrite_r>:
   26be8:	30800217 	ldw	r2,8(r6)
   26bec:	10006726 	beq	r2,zero,26d8c <__sfvwrite_r+0x1a4>
   26bf0:	28c0030b 	ldhu	r3,12(r5)
   26bf4:	defff404 	addi	sp,sp,-48
   26bf8:	dd400715 	stw	r21,28(sp)
   26bfc:	dd000615 	stw	r20,24(sp)
   26c00:	dc000215 	stw	r16,8(sp)
   26c04:	dfc00b15 	stw	ra,44(sp)
   26c08:	df000a15 	stw	fp,40(sp)
   26c0c:	ddc00915 	stw	r23,36(sp)
   26c10:	dd800815 	stw	r22,32(sp)
   26c14:	dcc00515 	stw	r19,20(sp)
   26c18:	dc800415 	stw	r18,16(sp)
   26c1c:	dc400315 	stw	r17,12(sp)
   26c20:	1880020c 	andi	r2,r3,8
   26c24:	2821883a 	mov	r16,r5
   26c28:	202b883a 	mov	r21,r4
   26c2c:	3029883a 	mov	r20,r6
   26c30:	10002726 	beq	r2,zero,26cd0 <__sfvwrite_r+0xe8>
   26c34:	28800417 	ldw	r2,16(r5)
   26c38:	10002526 	beq	r2,zero,26cd0 <__sfvwrite_r+0xe8>
   26c3c:	1880008c 	andi	r2,r3,2
   26c40:	a4400017 	ldw	r17,0(r20)
   26c44:	10002a26 	beq	r2,zero,26cf0 <__sfvwrite_r+0x108>
   26c48:	05a00034 	movhi	r22,32768
   26c4c:	0027883a 	mov	r19,zero
   26c50:	0025883a 	mov	r18,zero
   26c54:	b5bf0004 	addi	r22,r22,-1024
   26c58:	980d883a 	mov	r6,r19
   26c5c:	a809883a 	mov	r4,r21
   26c60:	90004626 	beq	r18,zero,26d7c <__sfvwrite_r+0x194>
   26c64:	900f883a 	mov	r7,r18
   26c68:	b480022e 	bgeu	r22,r18,26c74 <__sfvwrite_r+0x8c>
   26c6c:	01e00034 	movhi	r7,32768
   26c70:	39ff0004 	addi	r7,r7,-1024
   26c74:	80800917 	ldw	r2,36(r16)
   26c78:	81400717 	ldw	r5,28(r16)
   26c7c:	103ee83a 	callr	r2
   26c80:	0080570e 	bge	zero,r2,26de0 <__sfvwrite_r+0x1f8>
   26c84:	a0c00217 	ldw	r3,8(r20)
   26c88:	98a7883a 	add	r19,r19,r2
   26c8c:	90a5c83a 	sub	r18,r18,r2
   26c90:	1885c83a 	sub	r2,r3,r2
   26c94:	a0800215 	stw	r2,8(r20)
   26c98:	103fef1e 	bne	r2,zero,26c58 <__alt_data_end+0xfffe6c58>
   26c9c:	0005883a 	mov	r2,zero
   26ca0:	dfc00b17 	ldw	ra,44(sp)
   26ca4:	df000a17 	ldw	fp,40(sp)
   26ca8:	ddc00917 	ldw	r23,36(sp)
   26cac:	dd800817 	ldw	r22,32(sp)
   26cb0:	dd400717 	ldw	r21,28(sp)
   26cb4:	dd000617 	ldw	r20,24(sp)
   26cb8:	dcc00517 	ldw	r19,20(sp)
   26cbc:	dc800417 	ldw	r18,16(sp)
   26cc0:	dc400317 	ldw	r17,12(sp)
   26cc4:	dc000217 	ldw	r16,8(sp)
   26cc8:	dec00c04 	addi	sp,sp,48
   26ccc:	f800283a 	ret
   26cd0:	800b883a 	mov	r5,r16
   26cd4:	a809883a 	mov	r4,r21
   26cd8:	002492c0 	call	2492c <__swsetup_r>
   26cdc:	1000eb1e 	bne	r2,zero,2708c <__sfvwrite_r+0x4a4>
   26ce0:	80c0030b 	ldhu	r3,12(r16)
   26ce4:	a4400017 	ldw	r17,0(r20)
   26ce8:	1880008c 	andi	r2,r3,2
   26cec:	103fd61e 	bne	r2,zero,26c48 <__alt_data_end+0xfffe6c48>
   26cf0:	1880004c 	andi	r2,r3,1
   26cf4:	10003f1e 	bne	r2,zero,26df4 <__sfvwrite_r+0x20c>
   26cf8:	0039883a 	mov	fp,zero
   26cfc:	0025883a 	mov	r18,zero
   26d00:	90001a26 	beq	r18,zero,26d6c <__sfvwrite_r+0x184>
   26d04:	1880800c 	andi	r2,r3,512
   26d08:	84c00217 	ldw	r19,8(r16)
   26d0c:	10002126 	beq	r2,zero,26d94 <__sfvwrite_r+0x1ac>
   26d10:	982f883a 	mov	r23,r19
   26d14:	94c09336 	bltu	r18,r19,26f64 <__sfvwrite_r+0x37c>
   26d18:	1881200c 	andi	r2,r3,1152
   26d1c:	10009e1e 	bne	r2,zero,26f98 <__sfvwrite_r+0x3b0>
   26d20:	81000017 	ldw	r4,0(r16)
   26d24:	b80d883a 	mov	r6,r23
   26d28:	e00b883a 	mov	r5,fp
   26d2c:	00272340 	call	27234 <memmove>
   26d30:	80c00217 	ldw	r3,8(r16)
   26d34:	81000017 	ldw	r4,0(r16)
   26d38:	9005883a 	mov	r2,r18
   26d3c:	1ce7c83a 	sub	r19,r3,r19
   26d40:	25cf883a 	add	r7,r4,r23
   26d44:	84c00215 	stw	r19,8(r16)
   26d48:	81c00015 	stw	r7,0(r16)
   26d4c:	a0c00217 	ldw	r3,8(r20)
   26d50:	e0b9883a 	add	fp,fp,r2
   26d54:	90a5c83a 	sub	r18,r18,r2
   26d58:	18a7c83a 	sub	r19,r3,r2
   26d5c:	a4c00215 	stw	r19,8(r20)
   26d60:	983fce26 	beq	r19,zero,26c9c <__alt_data_end+0xfffe6c9c>
   26d64:	80c0030b 	ldhu	r3,12(r16)
   26d68:	903fe61e 	bne	r18,zero,26d04 <__alt_data_end+0xfffe6d04>
   26d6c:	8f000017 	ldw	fp,0(r17)
   26d70:	8c800117 	ldw	r18,4(r17)
   26d74:	8c400204 	addi	r17,r17,8
   26d78:	003fe106 	br	26d00 <__alt_data_end+0xfffe6d00>
   26d7c:	8cc00017 	ldw	r19,0(r17)
   26d80:	8c800117 	ldw	r18,4(r17)
   26d84:	8c400204 	addi	r17,r17,8
   26d88:	003fb306 	br	26c58 <__alt_data_end+0xfffe6c58>
   26d8c:	0005883a 	mov	r2,zero
   26d90:	f800283a 	ret
   26d94:	81000017 	ldw	r4,0(r16)
   26d98:	80800417 	ldw	r2,16(r16)
   26d9c:	11005736 	bltu	r2,r4,26efc <__sfvwrite_r+0x314>
   26da0:	85c00517 	ldw	r23,20(r16)
   26da4:	95c05536 	bltu	r18,r23,26efc <__sfvwrite_r+0x314>
   26da8:	00a00034 	movhi	r2,32768
   26dac:	10bfffc4 	addi	r2,r2,-1
   26db0:	9009883a 	mov	r4,r18
   26db4:	1480012e 	bgeu	r2,r18,26dbc <__sfvwrite_r+0x1d4>
   26db8:	1009883a 	mov	r4,r2
   26dbc:	b80b883a 	mov	r5,r23
   26dc0:	002b1a40 	call	2b1a4 <__divsi3>
   26dc4:	15cf383a 	mul	r7,r2,r23
   26dc8:	81400717 	ldw	r5,28(r16)
   26dcc:	80800917 	ldw	r2,36(r16)
   26dd0:	e00d883a 	mov	r6,fp
   26dd4:	a809883a 	mov	r4,r21
   26dd8:	103ee83a 	callr	r2
   26ddc:	00bfdb16 	blt	zero,r2,26d4c <__alt_data_end+0xfffe6d4c>
   26de0:	8080030b 	ldhu	r2,12(r16)
   26de4:	10801014 	ori	r2,r2,64
   26de8:	8080030d 	sth	r2,12(r16)
   26dec:	00bfffc4 	movi	r2,-1
   26df0:	003fab06 	br	26ca0 <__alt_data_end+0xfffe6ca0>
   26df4:	0027883a 	mov	r19,zero
   26df8:	0011883a 	mov	r8,zero
   26dfc:	0039883a 	mov	fp,zero
   26e00:	0025883a 	mov	r18,zero
   26e04:	90001f26 	beq	r18,zero,26e84 <__sfvwrite_r+0x29c>
   26e08:	40005a26 	beq	r8,zero,26f74 <__sfvwrite_r+0x38c>
   26e0c:	982d883a 	mov	r22,r19
   26e10:	94c0012e 	bgeu	r18,r19,26e18 <__sfvwrite_r+0x230>
   26e14:	902d883a 	mov	r22,r18
   26e18:	81000017 	ldw	r4,0(r16)
   26e1c:	80800417 	ldw	r2,16(r16)
   26e20:	b02f883a 	mov	r23,r22
   26e24:	81c00517 	ldw	r7,20(r16)
   26e28:	1100032e 	bgeu	r2,r4,26e38 <__sfvwrite_r+0x250>
   26e2c:	80c00217 	ldw	r3,8(r16)
   26e30:	38c7883a 	add	r3,r7,r3
   26e34:	1d801816 	blt	r3,r22,26e98 <__sfvwrite_r+0x2b0>
   26e38:	b1c03e16 	blt	r22,r7,26f34 <__sfvwrite_r+0x34c>
   26e3c:	80800917 	ldw	r2,36(r16)
   26e40:	81400717 	ldw	r5,28(r16)
   26e44:	e00d883a 	mov	r6,fp
   26e48:	da000115 	stw	r8,4(sp)
   26e4c:	a809883a 	mov	r4,r21
   26e50:	103ee83a 	callr	r2
   26e54:	102f883a 	mov	r23,r2
   26e58:	da000117 	ldw	r8,4(sp)
   26e5c:	00bfe00e 	bge	zero,r2,26de0 <__alt_data_end+0xfffe6de0>
   26e60:	9de7c83a 	sub	r19,r19,r23
   26e64:	98001f26 	beq	r19,zero,26ee4 <__sfvwrite_r+0x2fc>
   26e68:	a0800217 	ldw	r2,8(r20)
   26e6c:	e5f9883a 	add	fp,fp,r23
   26e70:	95e5c83a 	sub	r18,r18,r23
   26e74:	15efc83a 	sub	r23,r2,r23
   26e78:	a5c00215 	stw	r23,8(r20)
   26e7c:	b83f8726 	beq	r23,zero,26c9c <__alt_data_end+0xfffe6c9c>
   26e80:	903fe11e 	bne	r18,zero,26e08 <__alt_data_end+0xfffe6e08>
   26e84:	8f000017 	ldw	fp,0(r17)
   26e88:	8c800117 	ldw	r18,4(r17)
   26e8c:	0011883a 	mov	r8,zero
   26e90:	8c400204 	addi	r17,r17,8
   26e94:	003fdb06 	br	26e04 <__alt_data_end+0xfffe6e04>
   26e98:	180d883a 	mov	r6,r3
   26e9c:	e00b883a 	mov	r5,fp
   26ea0:	da000115 	stw	r8,4(sp)
   26ea4:	d8c00015 	stw	r3,0(sp)
   26ea8:	00272340 	call	27234 <memmove>
   26eac:	d8c00017 	ldw	r3,0(sp)
   26eb0:	80800017 	ldw	r2,0(r16)
   26eb4:	800b883a 	mov	r5,r16
   26eb8:	a809883a 	mov	r4,r21
   26ebc:	10c5883a 	add	r2,r2,r3
   26ec0:	80800015 	stw	r2,0(r16)
   26ec4:	d8c00015 	stw	r3,0(sp)
   26ec8:	002667c0 	call	2667c <_fflush_r>
   26ecc:	d8c00017 	ldw	r3,0(sp)
   26ed0:	da000117 	ldw	r8,4(sp)
   26ed4:	103fc21e 	bne	r2,zero,26de0 <__alt_data_end+0xfffe6de0>
   26ed8:	182f883a 	mov	r23,r3
   26edc:	9de7c83a 	sub	r19,r19,r23
   26ee0:	983fe11e 	bne	r19,zero,26e68 <__alt_data_end+0xfffe6e68>
   26ee4:	800b883a 	mov	r5,r16
   26ee8:	a809883a 	mov	r4,r21
   26eec:	002667c0 	call	2667c <_fflush_r>
   26ef0:	103fbb1e 	bne	r2,zero,26de0 <__alt_data_end+0xfffe6de0>
   26ef4:	0011883a 	mov	r8,zero
   26ef8:	003fdb06 	br	26e68 <__alt_data_end+0xfffe6e68>
   26efc:	94c0012e 	bgeu	r18,r19,26f04 <__sfvwrite_r+0x31c>
   26f00:	9027883a 	mov	r19,r18
   26f04:	980d883a 	mov	r6,r19
   26f08:	e00b883a 	mov	r5,fp
   26f0c:	00272340 	call	27234 <memmove>
   26f10:	80800217 	ldw	r2,8(r16)
   26f14:	80c00017 	ldw	r3,0(r16)
   26f18:	14c5c83a 	sub	r2,r2,r19
   26f1c:	1cc7883a 	add	r3,r3,r19
   26f20:	80800215 	stw	r2,8(r16)
   26f24:	80c00015 	stw	r3,0(r16)
   26f28:	10004326 	beq	r2,zero,27038 <__sfvwrite_r+0x450>
   26f2c:	9805883a 	mov	r2,r19
   26f30:	003f8606 	br	26d4c <__alt_data_end+0xfffe6d4c>
   26f34:	b00d883a 	mov	r6,r22
   26f38:	e00b883a 	mov	r5,fp
   26f3c:	da000115 	stw	r8,4(sp)
   26f40:	00272340 	call	27234 <memmove>
   26f44:	80800217 	ldw	r2,8(r16)
   26f48:	80c00017 	ldw	r3,0(r16)
   26f4c:	da000117 	ldw	r8,4(sp)
   26f50:	1585c83a 	sub	r2,r2,r22
   26f54:	1dad883a 	add	r22,r3,r22
   26f58:	80800215 	stw	r2,8(r16)
   26f5c:	85800015 	stw	r22,0(r16)
   26f60:	003fbf06 	br	26e60 <__alt_data_end+0xfffe6e60>
   26f64:	81000017 	ldw	r4,0(r16)
   26f68:	9027883a 	mov	r19,r18
   26f6c:	902f883a 	mov	r23,r18
   26f70:	003f6c06 	br	26d24 <__alt_data_end+0xfffe6d24>
   26f74:	900d883a 	mov	r6,r18
   26f78:	01400284 	movi	r5,10
   26f7c:	e009883a 	mov	r4,fp
   26f80:	0021a9c0 	call	21a9c <memchr>
   26f84:	10003e26 	beq	r2,zero,27080 <__sfvwrite_r+0x498>
   26f88:	10800044 	addi	r2,r2,1
   26f8c:	1727c83a 	sub	r19,r2,fp
   26f90:	02000044 	movi	r8,1
   26f94:	003f9d06 	br	26e0c <__alt_data_end+0xfffe6e0c>
   26f98:	80800517 	ldw	r2,20(r16)
   26f9c:	81400417 	ldw	r5,16(r16)
   26fa0:	81c00017 	ldw	r7,0(r16)
   26fa4:	10a7883a 	add	r19,r2,r2
   26fa8:	9885883a 	add	r2,r19,r2
   26fac:	1026d7fa 	srli	r19,r2,31
   26fb0:	396dc83a 	sub	r22,r7,r5
   26fb4:	b1000044 	addi	r4,r22,1
   26fb8:	9885883a 	add	r2,r19,r2
   26fbc:	1027d07a 	srai	r19,r2,1
   26fc0:	2485883a 	add	r2,r4,r18
   26fc4:	980d883a 	mov	r6,r19
   26fc8:	9880022e 	bgeu	r19,r2,26fd4 <__sfvwrite_r+0x3ec>
   26fcc:	1027883a 	mov	r19,r2
   26fd0:	100d883a 	mov	r6,r2
   26fd4:	18c1000c 	andi	r3,r3,1024
   26fd8:	18001c26 	beq	r3,zero,2704c <__sfvwrite_r+0x464>
   26fdc:	300b883a 	mov	r5,r6
   26fe0:	a809883a 	mov	r4,r21
   26fe4:	00212900 	call	21290 <_malloc_r>
   26fe8:	102f883a 	mov	r23,r2
   26fec:	10002926 	beq	r2,zero,27094 <__sfvwrite_r+0x4ac>
   26ff0:	81400417 	ldw	r5,16(r16)
   26ff4:	b00d883a 	mov	r6,r22
   26ff8:	1009883a 	mov	r4,r2
   26ffc:	0021b800 	call	21b80 <memcpy>
   27000:	8080030b 	ldhu	r2,12(r16)
   27004:	00fedfc4 	movi	r3,-1153
   27008:	10c4703a 	and	r2,r2,r3
   2700c:	10802014 	ori	r2,r2,128
   27010:	8080030d 	sth	r2,12(r16)
   27014:	bd89883a 	add	r4,r23,r22
   27018:	9d8fc83a 	sub	r7,r19,r22
   2701c:	85c00415 	stw	r23,16(r16)
   27020:	84c00515 	stw	r19,20(r16)
   27024:	81000015 	stw	r4,0(r16)
   27028:	9027883a 	mov	r19,r18
   2702c:	81c00215 	stw	r7,8(r16)
   27030:	902f883a 	mov	r23,r18
   27034:	003f3b06 	br	26d24 <__alt_data_end+0xfffe6d24>
   27038:	800b883a 	mov	r5,r16
   2703c:	a809883a 	mov	r4,r21
   27040:	002667c0 	call	2667c <_fflush_r>
   27044:	103fb926 	beq	r2,zero,26f2c <__alt_data_end+0xfffe6f2c>
   27048:	003f6506 	br	26de0 <__alt_data_end+0xfffe6de0>
   2704c:	a809883a 	mov	r4,r21
   27050:	00283ec0 	call	283ec <_realloc_r>
   27054:	102f883a 	mov	r23,r2
   27058:	103fee1e 	bne	r2,zero,27014 <__alt_data_end+0xfffe7014>
   2705c:	81400417 	ldw	r5,16(r16)
   27060:	a809883a 	mov	r4,r21
   27064:	00268d80 	call	268d8 <_free_r>
   27068:	8080030b 	ldhu	r2,12(r16)
   2706c:	00ffdfc4 	movi	r3,-129
   27070:	1884703a 	and	r2,r3,r2
   27074:	00c00304 	movi	r3,12
   27078:	a8c00015 	stw	r3,0(r21)
   2707c:	003f5906 	br	26de4 <__alt_data_end+0xfffe6de4>
   27080:	94c00044 	addi	r19,r18,1
   27084:	02000044 	movi	r8,1
   27088:	003f6006 	br	26e0c <__alt_data_end+0xfffe6e0c>
   2708c:	00bfffc4 	movi	r2,-1
   27090:	003f0306 	br	26ca0 <__alt_data_end+0xfffe6ca0>
   27094:	00800304 	movi	r2,12
   27098:	a8800015 	stw	r2,0(r21)
   2709c:	8080030b 	ldhu	r2,12(r16)
   270a0:	003f5006 	br	26de4 <__alt_data_end+0xfffe6de4>

000270a4 <_isatty_r>:
   270a4:	defffd04 	addi	sp,sp,-12
   270a8:	dc000015 	stw	r16,0(sp)
   270ac:	040000f4 	movhi	r16,3
   270b0:	dc400115 	stw	r17,4(sp)
   270b4:	8411f104 	addi	r16,r16,18372
   270b8:	2023883a 	mov	r17,r4
   270bc:	2809883a 	mov	r4,r5
   270c0:	dfc00215 	stw	ra,8(sp)
   270c4:	80000015 	stw	zero,0(r16)
   270c8:	002dc200 	call	2dc20 <isatty>
   270cc:	00ffffc4 	movi	r3,-1
   270d0:	10c00526 	beq	r2,r3,270e8 <_isatty_r+0x44>
   270d4:	dfc00217 	ldw	ra,8(sp)
   270d8:	dc400117 	ldw	r17,4(sp)
   270dc:	dc000017 	ldw	r16,0(sp)
   270e0:	dec00304 	addi	sp,sp,12
   270e4:	f800283a 	ret
   270e8:	80c00017 	ldw	r3,0(r16)
   270ec:	183ff926 	beq	r3,zero,270d4 <__alt_data_end+0xfffe70d4>
   270f0:	88c00015 	stw	r3,0(r17)
   270f4:	003ff706 	br	270d4 <__alt_data_end+0xfffe70d4>

000270f8 <_setlocale_r>:
   270f8:	30001b26 	beq	r6,zero,27168 <_setlocale_r+0x70>
   270fc:	014000f4 	movhi	r5,3
   27100:	defffe04 	addi	sp,sp,-8
   27104:	29437504 	addi	r5,r5,3540
   27108:	3009883a 	mov	r4,r6
   2710c:	dc000015 	stw	r16,0(sp)
   27110:	dfc00115 	stw	ra,4(sp)
   27114:	3021883a 	mov	r16,r6
   27118:	00289c40 	call	289c4 <strcmp>
   2711c:	1000061e 	bne	r2,zero,27138 <_setlocale_r+0x40>
   27120:	008000f4 	movhi	r2,3
   27124:	10835604 	addi	r2,r2,3416
   27128:	dfc00117 	ldw	ra,4(sp)
   2712c:	dc000017 	ldw	r16,0(sp)
   27130:	dec00204 	addi	sp,sp,8
   27134:	f800283a 	ret
   27138:	014000f4 	movhi	r5,3
   2713c:	29435604 	addi	r5,r5,3416
   27140:	8009883a 	mov	r4,r16
   27144:	00289c40 	call	289c4 <strcmp>
   27148:	103ff526 	beq	r2,zero,27120 <__alt_data_end+0xfffe7120>
   2714c:	014000f4 	movhi	r5,3
   27150:	29436004 	addi	r5,r5,3456
   27154:	8009883a 	mov	r4,r16
   27158:	00289c40 	call	289c4 <strcmp>
   2715c:	103ff026 	beq	r2,zero,27120 <__alt_data_end+0xfffe7120>
   27160:	0005883a 	mov	r2,zero
   27164:	003ff006 	br	27128 <__alt_data_end+0xfffe7128>
   27168:	008000f4 	movhi	r2,3
   2716c:	10835604 	addi	r2,r2,3416
   27170:	f800283a 	ret

00027174 <__locale_charset>:
   27174:	008000f4 	movhi	r2,3
   27178:	10862a04 	addi	r2,r2,6312
   2717c:	f800283a 	ret

00027180 <__locale_mb_cur_max>:
   27180:	008000f4 	movhi	r2,3
   27184:	108af804 	addi	r2,r2,11232
   27188:	10800017 	ldw	r2,0(r2)
   2718c:	f800283a 	ret

00027190 <__locale_msgcharset>:
   27190:	008000f4 	movhi	r2,3
   27194:	10862204 	addi	r2,r2,6280
   27198:	f800283a 	ret

0002719c <__locale_cjk_lang>:
   2719c:	0005883a 	mov	r2,zero
   271a0:	f800283a 	ret

000271a4 <_localeconv_r>:
   271a4:	008000f4 	movhi	r2,3
   271a8:	10863204 	addi	r2,r2,6344
   271ac:	f800283a 	ret

000271b0 <setlocale>:
   271b0:	008000f4 	movhi	r2,3
   271b4:	108af504 	addi	r2,r2,11220
   271b8:	280d883a 	mov	r6,r5
   271bc:	200b883a 	mov	r5,r4
   271c0:	11000017 	ldw	r4,0(r2)
   271c4:	00270f81 	jmpi	270f8 <_setlocale_r>

000271c8 <localeconv>:
   271c8:	008000f4 	movhi	r2,3
   271cc:	10863204 	addi	r2,r2,6344
   271d0:	f800283a 	ret

000271d4 <_lseek_r>:
   271d4:	defffd04 	addi	sp,sp,-12
   271d8:	2805883a 	mov	r2,r5
   271dc:	dc000015 	stw	r16,0(sp)
   271e0:	040000f4 	movhi	r16,3
   271e4:	dc400115 	stw	r17,4(sp)
   271e8:	300b883a 	mov	r5,r6
   271ec:	8411f104 	addi	r16,r16,18372
   271f0:	2023883a 	mov	r17,r4
   271f4:	380d883a 	mov	r6,r7
   271f8:	1009883a 	mov	r4,r2
   271fc:	dfc00215 	stw	ra,8(sp)
   27200:	80000015 	stw	zero,0(r16)
   27204:	002ddec0 	call	2ddec <lseek>
   27208:	00ffffc4 	movi	r3,-1
   2720c:	10c00526 	beq	r2,r3,27224 <_lseek_r+0x50>
   27210:	dfc00217 	ldw	ra,8(sp)
   27214:	dc400117 	ldw	r17,4(sp)
   27218:	dc000017 	ldw	r16,0(sp)
   2721c:	dec00304 	addi	sp,sp,12
   27220:	f800283a 	ret
   27224:	80c00017 	ldw	r3,0(r16)
   27228:	183ff926 	beq	r3,zero,27210 <__alt_data_end+0xfffe7210>
   2722c:	88c00015 	stw	r3,0(r17)
   27230:	003ff706 	br	27210 <__alt_data_end+0xfffe7210>

00027234 <memmove>:
   27234:	2005883a 	mov	r2,r4
   27238:	29000b2e 	bgeu	r5,r4,27268 <memmove+0x34>
   2723c:	298f883a 	add	r7,r5,r6
   27240:	21c0092e 	bgeu	r4,r7,27268 <memmove+0x34>
   27244:	2187883a 	add	r3,r4,r6
   27248:	198bc83a 	sub	r5,r3,r6
   2724c:	30004826 	beq	r6,zero,27370 <memmove+0x13c>
   27250:	39ffffc4 	addi	r7,r7,-1
   27254:	39000003 	ldbu	r4,0(r7)
   27258:	18ffffc4 	addi	r3,r3,-1
   2725c:	19000005 	stb	r4,0(r3)
   27260:	28fffb1e 	bne	r5,r3,27250 <__alt_data_end+0xfffe7250>
   27264:	f800283a 	ret
   27268:	00c003c4 	movi	r3,15
   2726c:	1980412e 	bgeu	r3,r6,27374 <memmove+0x140>
   27270:	2886b03a 	or	r3,r5,r2
   27274:	18c000cc 	andi	r3,r3,3
   27278:	1800401e 	bne	r3,zero,2737c <memmove+0x148>
   2727c:	33fffc04 	addi	r15,r6,-16
   27280:	781ed13a 	srli	r15,r15,4
   27284:	28c00104 	addi	r3,r5,4
   27288:	13400104 	addi	r13,r2,4
   2728c:	781c913a 	slli	r14,r15,4
   27290:	2b000204 	addi	r12,r5,8
   27294:	12c00204 	addi	r11,r2,8
   27298:	73800504 	addi	r14,r14,20
   2729c:	2a800304 	addi	r10,r5,12
   272a0:	12400304 	addi	r9,r2,12
   272a4:	2b9d883a 	add	r14,r5,r14
   272a8:	2811883a 	mov	r8,r5
   272ac:	100f883a 	mov	r7,r2
   272b0:	41000017 	ldw	r4,0(r8)
   272b4:	39c00404 	addi	r7,r7,16
   272b8:	18c00404 	addi	r3,r3,16
   272bc:	393ffc15 	stw	r4,-16(r7)
   272c0:	193ffc17 	ldw	r4,-16(r3)
   272c4:	6b400404 	addi	r13,r13,16
   272c8:	5ac00404 	addi	r11,r11,16
   272cc:	693ffc15 	stw	r4,-16(r13)
   272d0:	61000017 	ldw	r4,0(r12)
   272d4:	4a400404 	addi	r9,r9,16
   272d8:	42000404 	addi	r8,r8,16
   272dc:	593ffc15 	stw	r4,-16(r11)
   272e0:	51000017 	ldw	r4,0(r10)
   272e4:	63000404 	addi	r12,r12,16
   272e8:	52800404 	addi	r10,r10,16
   272ec:	493ffc15 	stw	r4,-16(r9)
   272f0:	1bbfef1e 	bne	r3,r14,272b0 <__alt_data_end+0xfffe72b0>
   272f4:	79000044 	addi	r4,r15,1
   272f8:	2008913a 	slli	r4,r4,4
   272fc:	328003cc 	andi	r10,r6,15
   27300:	02c000c4 	movi	r11,3
   27304:	1107883a 	add	r3,r2,r4
   27308:	290b883a 	add	r5,r5,r4
   2730c:	5a801e2e 	bgeu	r11,r10,27388 <memmove+0x154>
   27310:	1813883a 	mov	r9,r3
   27314:	2811883a 	mov	r8,r5
   27318:	500f883a 	mov	r7,r10
   2731c:	41000017 	ldw	r4,0(r8)
   27320:	4a400104 	addi	r9,r9,4
   27324:	39ffff04 	addi	r7,r7,-4
   27328:	493fff15 	stw	r4,-4(r9)
   2732c:	42000104 	addi	r8,r8,4
   27330:	59fffa36 	bltu	r11,r7,2731c <__alt_data_end+0xfffe731c>
   27334:	513fff04 	addi	r4,r10,-4
   27338:	2008d0ba 	srli	r4,r4,2
   2733c:	318000cc 	andi	r6,r6,3
   27340:	21000044 	addi	r4,r4,1
   27344:	2109883a 	add	r4,r4,r4
   27348:	2109883a 	add	r4,r4,r4
   2734c:	1907883a 	add	r3,r3,r4
   27350:	290b883a 	add	r5,r5,r4
   27354:	30000b26 	beq	r6,zero,27384 <memmove+0x150>
   27358:	198d883a 	add	r6,r3,r6
   2735c:	29c00003 	ldbu	r7,0(r5)
   27360:	18c00044 	addi	r3,r3,1
   27364:	29400044 	addi	r5,r5,1
   27368:	19ffffc5 	stb	r7,-1(r3)
   2736c:	19bffb1e 	bne	r3,r6,2735c <__alt_data_end+0xfffe735c>
   27370:	f800283a 	ret
   27374:	1007883a 	mov	r3,r2
   27378:	003ff606 	br	27354 <__alt_data_end+0xfffe7354>
   2737c:	1007883a 	mov	r3,r2
   27380:	003ff506 	br	27358 <__alt_data_end+0xfffe7358>
   27384:	f800283a 	ret
   27388:	500d883a 	mov	r6,r10
   2738c:	003ff106 	br	27354 <__alt_data_end+0xfffe7354>

00027390 <_Balloc>:
   27390:	20801317 	ldw	r2,76(r4)
   27394:	defffc04 	addi	sp,sp,-16
   27398:	dc400115 	stw	r17,4(sp)
   2739c:	dc000015 	stw	r16,0(sp)
   273a0:	dfc00315 	stw	ra,12(sp)
   273a4:	dc800215 	stw	r18,8(sp)
   273a8:	2023883a 	mov	r17,r4
   273ac:	2821883a 	mov	r16,r5
   273b0:	10000f26 	beq	r2,zero,273f0 <_Balloc+0x60>
   273b4:	8407883a 	add	r3,r16,r16
   273b8:	18c7883a 	add	r3,r3,r3
   273bc:	10c7883a 	add	r3,r2,r3
   273c0:	18800017 	ldw	r2,0(r3)
   273c4:	10001126 	beq	r2,zero,2740c <_Balloc+0x7c>
   273c8:	11000017 	ldw	r4,0(r2)
   273cc:	19000015 	stw	r4,0(r3)
   273d0:	10000415 	stw	zero,16(r2)
   273d4:	10000315 	stw	zero,12(r2)
   273d8:	dfc00317 	ldw	ra,12(sp)
   273dc:	dc800217 	ldw	r18,8(sp)
   273e0:	dc400117 	ldw	r17,4(sp)
   273e4:	dc000017 	ldw	r16,0(sp)
   273e8:	dec00404 	addi	sp,sp,16
   273ec:	f800283a 	ret
   273f0:	01800844 	movi	r6,33
   273f4:	01400104 	movi	r5,4
   273f8:	002a0e80 	call	2a0e8 <_calloc_r>
   273fc:	88801315 	stw	r2,76(r17)
   27400:	103fec1e 	bne	r2,zero,273b4 <__alt_data_end+0xfffe73b4>
   27404:	0005883a 	mov	r2,zero
   27408:	003ff306 	br	273d8 <__alt_data_end+0xfffe73d8>
   2740c:	01400044 	movi	r5,1
   27410:	2c24983a 	sll	r18,r5,r16
   27414:	8809883a 	mov	r4,r17
   27418:	91800144 	addi	r6,r18,5
   2741c:	318d883a 	add	r6,r6,r6
   27420:	318d883a 	add	r6,r6,r6
   27424:	002a0e80 	call	2a0e8 <_calloc_r>
   27428:	103ff626 	beq	r2,zero,27404 <__alt_data_end+0xfffe7404>
   2742c:	14000115 	stw	r16,4(r2)
   27430:	14800215 	stw	r18,8(r2)
   27434:	003fe606 	br	273d0 <__alt_data_end+0xfffe73d0>

00027438 <_Bfree>:
   27438:	28000826 	beq	r5,zero,2745c <_Bfree+0x24>
   2743c:	28c00117 	ldw	r3,4(r5)
   27440:	20801317 	ldw	r2,76(r4)
   27444:	18c7883a 	add	r3,r3,r3
   27448:	18c7883a 	add	r3,r3,r3
   2744c:	10c5883a 	add	r2,r2,r3
   27450:	10c00017 	ldw	r3,0(r2)
   27454:	28c00015 	stw	r3,0(r5)
   27458:	11400015 	stw	r5,0(r2)
   2745c:	f800283a 	ret

00027460 <__multadd>:
   27460:	defffa04 	addi	sp,sp,-24
   27464:	dc800315 	stw	r18,12(sp)
   27468:	dc400215 	stw	r17,8(sp)
   2746c:	dc000115 	stw	r16,4(sp)
   27470:	2823883a 	mov	r17,r5
   27474:	2c000417 	ldw	r16,16(r5)
   27478:	dfc00515 	stw	ra,20(sp)
   2747c:	dcc00415 	stw	r19,16(sp)
   27480:	2025883a 	mov	r18,r4
   27484:	29400504 	addi	r5,r5,20
   27488:	0011883a 	mov	r8,zero
   2748c:	28c00017 	ldw	r3,0(r5)
   27490:	29400104 	addi	r5,r5,4
   27494:	42000044 	addi	r8,r8,1
   27498:	18bfffcc 	andi	r2,r3,65535
   2749c:	1185383a 	mul	r2,r2,r6
   274a0:	1806d43a 	srli	r3,r3,16
   274a4:	11cf883a 	add	r7,r2,r7
   274a8:	3808d43a 	srli	r4,r7,16
   274ac:	1987383a 	mul	r3,r3,r6
   274b0:	38bfffcc 	andi	r2,r7,65535
   274b4:	1907883a 	add	r3,r3,r4
   274b8:	1808943a 	slli	r4,r3,16
   274bc:	180ed43a 	srli	r7,r3,16
   274c0:	2085883a 	add	r2,r4,r2
   274c4:	28bfff15 	stw	r2,-4(r5)
   274c8:	443ff016 	blt	r8,r16,2748c <__alt_data_end+0xfffe748c>
   274cc:	38000926 	beq	r7,zero,274f4 <__multadd+0x94>
   274d0:	88800217 	ldw	r2,8(r17)
   274d4:	80800f0e 	bge	r16,r2,27514 <__multadd+0xb4>
   274d8:	80800144 	addi	r2,r16,5
   274dc:	1085883a 	add	r2,r2,r2
   274e0:	1085883a 	add	r2,r2,r2
   274e4:	8885883a 	add	r2,r17,r2
   274e8:	11c00015 	stw	r7,0(r2)
   274ec:	84000044 	addi	r16,r16,1
   274f0:	8c000415 	stw	r16,16(r17)
   274f4:	8805883a 	mov	r2,r17
   274f8:	dfc00517 	ldw	ra,20(sp)
   274fc:	dcc00417 	ldw	r19,16(sp)
   27500:	dc800317 	ldw	r18,12(sp)
   27504:	dc400217 	ldw	r17,8(sp)
   27508:	dc000117 	ldw	r16,4(sp)
   2750c:	dec00604 	addi	sp,sp,24
   27510:	f800283a 	ret
   27514:	89400117 	ldw	r5,4(r17)
   27518:	9009883a 	mov	r4,r18
   2751c:	d9c00015 	stw	r7,0(sp)
   27520:	29400044 	addi	r5,r5,1
   27524:	00273900 	call	27390 <_Balloc>
   27528:	89800417 	ldw	r6,16(r17)
   2752c:	89400304 	addi	r5,r17,12
   27530:	11000304 	addi	r4,r2,12
   27534:	31800084 	addi	r6,r6,2
   27538:	318d883a 	add	r6,r6,r6
   2753c:	318d883a 	add	r6,r6,r6
   27540:	1027883a 	mov	r19,r2
   27544:	0021b800 	call	21b80 <memcpy>
   27548:	d9c00017 	ldw	r7,0(sp)
   2754c:	88000a26 	beq	r17,zero,27578 <__multadd+0x118>
   27550:	88c00117 	ldw	r3,4(r17)
   27554:	90801317 	ldw	r2,76(r18)
   27558:	18c7883a 	add	r3,r3,r3
   2755c:	18c7883a 	add	r3,r3,r3
   27560:	10c5883a 	add	r2,r2,r3
   27564:	10c00017 	ldw	r3,0(r2)
   27568:	88c00015 	stw	r3,0(r17)
   2756c:	14400015 	stw	r17,0(r2)
   27570:	9823883a 	mov	r17,r19
   27574:	003fd806 	br	274d8 <__alt_data_end+0xfffe74d8>
   27578:	9823883a 	mov	r17,r19
   2757c:	003fd606 	br	274d8 <__alt_data_end+0xfffe74d8>

00027580 <__s2b>:
   27580:	defff904 	addi	sp,sp,-28
   27584:	dc400115 	stw	r17,4(sp)
   27588:	dc000015 	stw	r16,0(sp)
   2758c:	2023883a 	mov	r17,r4
   27590:	2821883a 	mov	r16,r5
   27594:	39000204 	addi	r4,r7,8
   27598:	01400244 	movi	r5,9
   2759c:	dcc00315 	stw	r19,12(sp)
   275a0:	dc800215 	stw	r18,8(sp)
   275a4:	dfc00615 	stw	ra,24(sp)
   275a8:	dd400515 	stw	r21,20(sp)
   275ac:	dd000415 	stw	r20,16(sp)
   275b0:	3825883a 	mov	r18,r7
   275b4:	3027883a 	mov	r19,r6
   275b8:	002b1a40 	call	2b1a4 <__divsi3>
   275bc:	00c00044 	movi	r3,1
   275c0:	000b883a 	mov	r5,zero
   275c4:	1880030e 	bge	r3,r2,275d4 <__s2b+0x54>
   275c8:	18c7883a 	add	r3,r3,r3
   275cc:	29400044 	addi	r5,r5,1
   275d0:	18bffd16 	blt	r3,r2,275c8 <__alt_data_end+0xfffe75c8>
   275d4:	8809883a 	mov	r4,r17
   275d8:	00273900 	call	27390 <_Balloc>
   275dc:	d8c00717 	ldw	r3,28(sp)
   275e0:	10c00515 	stw	r3,20(r2)
   275e4:	00c00044 	movi	r3,1
   275e8:	10c00415 	stw	r3,16(r2)
   275ec:	00c00244 	movi	r3,9
   275f0:	1cc0210e 	bge	r3,r19,27678 <__s2b+0xf8>
   275f4:	80eb883a 	add	r21,r16,r3
   275f8:	a829883a 	mov	r20,r21
   275fc:	84e1883a 	add	r16,r16,r19
   27600:	a1c00007 	ldb	r7,0(r20)
   27604:	01800284 	movi	r6,10
   27608:	a5000044 	addi	r20,r20,1
   2760c:	100b883a 	mov	r5,r2
   27610:	39fff404 	addi	r7,r7,-48
   27614:	8809883a 	mov	r4,r17
   27618:	00274600 	call	27460 <__multadd>
   2761c:	a43ff81e 	bne	r20,r16,27600 <__alt_data_end+0xfffe7600>
   27620:	ace1883a 	add	r16,r21,r19
   27624:	843ffe04 	addi	r16,r16,-8
   27628:	9c800a0e 	bge	r19,r18,27654 <__s2b+0xd4>
   2762c:	94e5c83a 	sub	r18,r18,r19
   27630:	84a5883a 	add	r18,r16,r18
   27634:	81c00007 	ldb	r7,0(r16)
   27638:	01800284 	movi	r6,10
   2763c:	84000044 	addi	r16,r16,1
   27640:	100b883a 	mov	r5,r2
   27644:	39fff404 	addi	r7,r7,-48
   27648:	8809883a 	mov	r4,r17
   2764c:	00274600 	call	27460 <__multadd>
   27650:	84bff81e 	bne	r16,r18,27634 <__alt_data_end+0xfffe7634>
   27654:	dfc00617 	ldw	ra,24(sp)
   27658:	dd400517 	ldw	r21,20(sp)
   2765c:	dd000417 	ldw	r20,16(sp)
   27660:	dcc00317 	ldw	r19,12(sp)
   27664:	dc800217 	ldw	r18,8(sp)
   27668:	dc400117 	ldw	r17,4(sp)
   2766c:	dc000017 	ldw	r16,0(sp)
   27670:	dec00704 	addi	sp,sp,28
   27674:	f800283a 	ret
   27678:	84000284 	addi	r16,r16,10
   2767c:	1827883a 	mov	r19,r3
   27680:	003fe906 	br	27628 <__alt_data_end+0xfffe7628>

00027684 <__hi0bits>:
   27684:	20bfffec 	andhi	r2,r4,65535
   27688:	1000141e 	bne	r2,zero,276dc <__hi0bits+0x58>
   2768c:	2008943a 	slli	r4,r4,16
   27690:	00800404 	movi	r2,16
   27694:	20ffc02c 	andhi	r3,r4,65280
   27698:	1800021e 	bne	r3,zero,276a4 <__hi0bits+0x20>
   2769c:	2008923a 	slli	r4,r4,8
   276a0:	10800204 	addi	r2,r2,8
   276a4:	20fc002c 	andhi	r3,r4,61440
   276a8:	1800021e 	bne	r3,zero,276b4 <__hi0bits+0x30>
   276ac:	2008913a 	slli	r4,r4,4
   276b0:	10800104 	addi	r2,r2,4
   276b4:	20f0002c 	andhi	r3,r4,49152
   276b8:	1800031e 	bne	r3,zero,276c8 <__hi0bits+0x44>
   276bc:	2109883a 	add	r4,r4,r4
   276c0:	10800084 	addi	r2,r2,2
   276c4:	2109883a 	add	r4,r4,r4
   276c8:	20000316 	blt	r4,zero,276d8 <__hi0bits+0x54>
   276cc:	2110002c 	andhi	r4,r4,16384
   276d0:	2000041e 	bne	r4,zero,276e4 <__hi0bits+0x60>
   276d4:	00800804 	movi	r2,32
   276d8:	f800283a 	ret
   276dc:	0005883a 	mov	r2,zero
   276e0:	003fec06 	br	27694 <__alt_data_end+0xfffe7694>
   276e4:	10800044 	addi	r2,r2,1
   276e8:	f800283a 	ret

000276ec <__lo0bits>:
   276ec:	20c00017 	ldw	r3,0(r4)
   276f0:	188001cc 	andi	r2,r3,7
   276f4:	10000826 	beq	r2,zero,27718 <__lo0bits+0x2c>
   276f8:	1880004c 	andi	r2,r3,1
   276fc:	1000211e 	bne	r2,zero,27784 <__lo0bits+0x98>
   27700:	1880008c 	andi	r2,r3,2
   27704:	1000211e 	bne	r2,zero,2778c <__lo0bits+0xa0>
   27708:	1806d0ba 	srli	r3,r3,2
   2770c:	00800084 	movi	r2,2
   27710:	20c00015 	stw	r3,0(r4)
   27714:	f800283a 	ret
   27718:	18bfffcc 	andi	r2,r3,65535
   2771c:	10001326 	beq	r2,zero,2776c <__lo0bits+0x80>
   27720:	0005883a 	mov	r2,zero
   27724:	19403fcc 	andi	r5,r3,255
   27728:	2800021e 	bne	r5,zero,27734 <__lo0bits+0x48>
   2772c:	1806d23a 	srli	r3,r3,8
   27730:	10800204 	addi	r2,r2,8
   27734:	194003cc 	andi	r5,r3,15
   27738:	2800021e 	bne	r5,zero,27744 <__lo0bits+0x58>
   2773c:	1806d13a 	srli	r3,r3,4
   27740:	10800104 	addi	r2,r2,4
   27744:	194000cc 	andi	r5,r3,3
   27748:	2800021e 	bne	r5,zero,27754 <__lo0bits+0x68>
   2774c:	1806d0ba 	srli	r3,r3,2
   27750:	10800084 	addi	r2,r2,2
   27754:	1940004c 	andi	r5,r3,1
   27758:	2800081e 	bne	r5,zero,2777c <__lo0bits+0x90>
   2775c:	1806d07a 	srli	r3,r3,1
   27760:	1800051e 	bne	r3,zero,27778 <__lo0bits+0x8c>
   27764:	00800804 	movi	r2,32
   27768:	f800283a 	ret
   2776c:	1806d43a 	srli	r3,r3,16
   27770:	00800404 	movi	r2,16
   27774:	003feb06 	br	27724 <__alt_data_end+0xfffe7724>
   27778:	10800044 	addi	r2,r2,1
   2777c:	20c00015 	stw	r3,0(r4)
   27780:	f800283a 	ret
   27784:	0005883a 	mov	r2,zero
   27788:	f800283a 	ret
   2778c:	1806d07a 	srli	r3,r3,1
   27790:	00800044 	movi	r2,1
   27794:	20c00015 	stw	r3,0(r4)
   27798:	f800283a 	ret

0002779c <__i2b>:
   2779c:	defffd04 	addi	sp,sp,-12
   277a0:	dc000015 	stw	r16,0(sp)
   277a4:	04000044 	movi	r16,1
   277a8:	dc400115 	stw	r17,4(sp)
   277ac:	2823883a 	mov	r17,r5
   277b0:	800b883a 	mov	r5,r16
   277b4:	dfc00215 	stw	ra,8(sp)
   277b8:	00273900 	call	27390 <_Balloc>
   277bc:	14400515 	stw	r17,20(r2)
   277c0:	14000415 	stw	r16,16(r2)
   277c4:	dfc00217 	ldw	ra,8(sp)
   277c8:	dc400117 	ldw	r17,4(sp)
   277cc:	dc000017 	ldw	r16,0(sp)
   277d0:	dec00304 	addi	sp,sp,12
   277d4:	f800283a 	ret

000277d8 <__multiply>:
   277d8:	defffa04 	addi	sp,sp,-24
   277dc:	dcc00315 	stw	r19,12(sp)
   277e0:	dc800215 	stw	r18,8(sp)
   277e4:	34c00417 	ldw	r19,16(r6)
   277e8:	2c800417 	ldw	r18,16(r5)
   277ec:	dd000415 	stw	r20,16(sp)
   277f0:	dc400115 	stw	r17,4(sp)
   277f4:	dfc00515 	stw	ra,20(sp)
   277f8:	dc000015 	stw	r16,0(sp)
   277fc:	2829883a 	mov	r20,r5
   27800:	3023883a 	mov	r17,r6
   27804:	94c0050e 	bge	r18,r19,2781c <__multiply+0x44>
   27808:	9007883a 	mov	r3,r18
   2780c:	3029883a 	mov	r20,r6
   27810:	9825883a 	mov	r18,r19
   27814:	2823883a 	mov	r17,r5
   27818:	1827883a 	mov	r19,r3
   2781c:	a0800217 	ldw	r2,8(r20)
   27820:	94e1883a 	add	r16,r18,r19
   27824:	a1400117 	ldw	r5,4(r20)
   27828:	1400010e 	bge	r2,r16,27830 <__multiply+0x58>
   2782c:	29400044 	addi	r5,r5,1
   27830:	00273900 	call	27390 <_Balloc>
   27834:	8415883a 	add	r10,r16,r16
   27838:	12c00504 	addi	r11,r2,20
   2783c:	5295883a 	add	r10,r10,r10
   27840:	5a95883a 	add	r10,r11,r10
   27844:	5807883a 	mov	r3,r11
   27848:	5a80032e 	bgeu	r11,r10,27858 <__multiply+0x80>
   2784c:	18000015 	stw	zero,0(r3)
   27850:	18c00104 	addi	r3,r3,4
   27854:	1abffd36 	bltu	r3,r10,2784c <__alt_data_end+0xfffe784c>
   27858:	9ce7883a 	add	r19,r19,r19
   2785c:	94a5883a 	add	r18,r18,r18
   27860:	89800504 	addi	r6,r17,20
   27864:	9ce7883a 	add	r19,r19,r19
   27868:	a3400504 	addi	r13,r20,20
   2786c:	94a5883a 	add	r18,r18,r18
   27870:	34d9883a 	add	r12,r6,r19
   27874:	6c93883a 	add	r9,r13,r18
   27878:	3300422e 	bgeu	r6,r12,27984 <__multiply+0x1ac>
   2787c:	37c00017 	ldw	ra,0(r6)
   27880:	fbffffcc 	andi	r15,ra,65535
   27884:	78001b26 	beq	r15,zero,278f4 <__multiply+0x11c>
   27888:	5811883a 	mov	r8,r11
   2788c:	681d883a 	mov	r14,r13
   27890:	000f883a 	mov	r7,zero
   27894:	71000017 	ldw	r4,0(r14)
   27898:	40c00017 	ldw	r3,0(r8)
   2789c:	73800104 	addi	r14,r14,4
   278a0:	217fffcc 	andi	r5,r4,65535
   278a4:	2bcb383a 	mul	r5,r5,r15
   278a8:	2008d43a 	srli	r4,r4,16
   278ac:	1c7fffcc 	andi	r17,r3,65535
   278b0:	2c4b883a 	add	r5,r5,r17
   278b4:	29cb883a 	add	r5,r5,r7
   278b8:	23c9383a 	mul	r4,r4,r15
   278bc:	1806d43a 	srli	r3,r3,16
   278c0:	280ed43a 	srli	r7,r5,16
   278c4:	297fffcc 	andi	r5,r5,65535
   278c8:	20c7883a 	add	r3,r4,r3
   278cc:	19c7883a 	add	r3,r3,r7
   278d0:	1808943a 	slli	r4,r3,16
   278d4:	4023883a 	mov	r17,r8
   278d8:	180ed43a 	srli	r7,r3,16
   278dc:	214ab03a 	or	r5,r4,r5
   278e0:	41400015 	stw	r5,0(r8)
   278e4:	42000104 	addi	r8,r8,4
   278e8:	727fea36 	bltu	r14,r9,27894 <__alt_data_end+0xfffe7894>
   278ec:	89c00115 	stw	r7,4(r17)
   278f0:	37c00017 	ldw	ra,0(r6)
   278f4:	f83ed43a 	srli	ra,ra,16
   278f8:	f8001f26 	beq	ra,zero,27978 <__multiply+0x1a0>
   278fc:	58c00017 	ldw	r3,0(r11)
   27900:	681d883a 	mov	r14,r13
   27904:	581f883a 	mov	r15,r11
   27908:	1811883a 	mov	r8,r3
   2790c:	5825883a 	mov	r18,r11
   27910:	000f883a 	mov	r7,zero
   27914:	00000106 	br	2791c <__multiply+0x144>
   27918:	8825883a 	mov	r18,r17
   2791c:	7140000b 	ldhu	r5,0(r14)
   27920:	4010d43a 	srli	r8,r8,16
   27924:	193fffcc 	andi	r4,r3,65535
   27928:	2fcb383a 	mul	r5,r5,ra
   2792c:	7bc00104 	addi	r15,r15,4
   27930:	73800104 	addi	r14,r14,4
   27934:	2a0b883a 	add	r5,r5,r8
   27938:	29cb883a 	add	r5,r5,r7
   2793c:	2806943a 	slli	r3,r5,16
   27940:	94400104 	addi	r17,r18,4
   27944:	280ad43a 	srli	r5,r5,16
   27948:	1908b03a 	or	r4,r3,r4
   2794c:	793fff15 	stw	r4,-4(r15)
   27950:	70ffff17 	ldw	r3,-4(r14)
   27954:	8a000017 	ldw	r8,0(r17)
   27958:	1806d43a 	srli	r3,r3,16
   2795c:	413fffcc 	andi	r4,r8,65535
   27960:	1fc7383a 	mul	r3,r3,ra
   27964:	1907883a 	add	r3,r3,r4
   27968:	1947883a 	add	r3,r3,r5
   2796c:	180ed43a 	srli	r7,r3,16
   27970:	727fe936 	bltu	r14,r9,27918 <__alt_data_end+0xfffe7918>
   27974:	90c00115 	stw	r3,4(r18)
   27978:	31800104 	addi	r6,r6,4
   2797c:	5ac00104 	addi	r11,r11,4
   27980:	333fbe36 	bltu	r6,r12,2787c <__alt_data_end+0xfffe787c>
   27984:	0400090e 	bge	zero,r16,279ac <__multiply+0x1d4>
   27988:	50ffff17 	ldw	r3,-4(r10)
   2798c:	52bfff04 	addi	r10,r10,-4
   27990:	18000326 	beq	r3,zero,279a0 <__multiply+0x1c8>
   27994:	00000506 	br	279ac <__multiply+0x1d4>
   27998:	50c00017 	ldw	r3,0(r10)
   2799c:	1800031e 	bne	r3,zero,279ac <__multiply+0x1d4>
   279a0:	843fffc4 	addi	r16,r16,-1
   279a4:	52bfff04 	addi	r10,r10,-4
   279a8:	803ffb1e 	bne	r16,zero,27998 <__alt_data_end+0xfffe7998>
   279ac:	14000415 	stw	r16,16(r2)
   279b0:	dfc00517 	ldw	ra,20(sp)
   279b4:	dd000417 	ldw	r20,16(sp)
   279b8:	dcc00317 	ldw	r19,12(sp)
   279bc:	dc800217 	ldw	r18,8(sp)
   279c0:	dc400117 	ldw	r17,4(sp)
   279c4:	dc000017 	ldw	r16,0(sp)
   279c8:	dec00604 	addi	sp,sp,24
   279cc:	f800283a 	ret

000279d0 <__pow5mult>:
   279d0:	defffa04 	addi	sp,sp,-24
   279d4:	dcc00315 	stw	r19,12(sp)
   279d8:	dc000015 	stw	r16,0(sp)
   279dc:	dfc00515 	stw	ra,20(sp)
   279e0:	dd000415 	stw	r20,16(sp)
   279e4:	dc800215 	stw	r18,8(sp)
   279e8:	dc400115 	stw	r17,4(sp)
   279ec:	308000cc 	andi	r2,r6,3
   279f0:	3021883a 	mov	r16,r6
   279f4:	2027883a 	mov	r19,r4
   279f8:	10002f1e 	bne	r2,zero,27ab8 <__pow5mult+0xe8>
   279fc:	2825883a 	mov	r18,r5
   27a00:	8021d0ba 	srai	r16,r16,2
   27a04:	80001a26 	beq	r16,zero,27a70 <__pow5mult+0xa0>
   27a08:	9c401217 	ldw	r17,72(r19)
   27a0c:	8800061e 	bne	r17,zero,27a28 <__pow5mult+0x58>
   27a10:	00003406 	br	27ae4 <__pow5mult+0x114>
   27a14:	8021d07a 	srai	r16,r16,1
   27a18:	80001526 	beq	r16,zero,27a70 <__pow5mult+0xa0>
   27a1c:	88800017 	ldw	r2,0(r17)
   27a20:	10001c26 	beq	r2,zero,27a94 <__pow5mult+0xc4>
   27a24:	1023883a 	mov	r17,r2
   27a28:	8080004c 	andi	r2,r16,1
   27a2c:	103ff926 	beq	r2,zero,27a14 <__alt_data_end+0xfffe7a14>
   27a30:	880d883a 	mov	r6,r17
   27a34:	900b883a 	mov	r5,r18
   27a38:	9809883a 	mov	r4,r19
   27a3c:	00277d80 	call	277d8 <__multiply>
   27a40:	90001b26 	beq	r18,zero,27ab0 <__pow5mult+0xe0>
   27a44:	91000117 	ldw	r4,4(r18)
   27a48:	98c01317 	ldw	r3,76(r19)
   27a4c:	8021d07a 	srai	r16,r16,1
   27a50:	2109883a 	add	r4,r4,r4
   27a54:	2109883a 	add	r4,r4,r4
   27a58:	1907883a 	add	r3,r3,r4
   27a5c:	19000017 	ldw	r4,0(r3)
   27a60:	91000015 	stw	r4,0(r18)
   27a64:	1c800015 	stw	r18,0(r3)
   27a68:	1025883a 	mov	r18,r2
   27a6c:	803feb1e 	bne	r16,zero,27a1c <__alt_data_end+0xfffe7a1c>
   27a70:	9005883a 	mov	r2,r18
   27a74:	dfc00517 	ldw	ra,20(sp)
   27a78:	dd000417 	ldw	r20,16(sp)
   27a7c:	dcc00317 	ldw	r19,12(sp)
   27a80:	dc800217 	ldw	r18,8(sp)
   27a84:	dc400117 	ldw	r17,4(sp)
   27a88:	dc000017 	ldw	r16,0(sp)
   27a8c:	dec00604 	addi	sp,sp,24
   27a90:	f800283a 	ret
   27a94:	880d883a 	mov	r6,r17
   27a98:	880b883a 	mov	r5,r17
   27a9c:	9809883a 	mov	r4,r19
   27aa0:	00277d80 	call	277d8 <__multiply>
   27aa4:	88800015 	stw	r2,0(r17)
   27aa8:	10000015 	stw	zero,0(r2)
   27aac:	003fdd06 	br	27a24 <__alt_data_end+0xfffe7a24>
   27ab0:	1025883a 	mov	r18,r2
   27ab4:	003fd706 	br	27a14 <__alt_data_end+0xfffe7a14>
   27ab8:	10bfffc4 	addi	r2,r2,-1
   27abc:	1085883a 	add	r2,r2,r2
   27ac0:	00c000f4 	movhi	r3,3
   27ac4:	18c37804 	addi	r3,r3,3552
   27ac8:	1085883a 	add	r2,r2,r2
   27acc:	1885883a 	add	r2,r3,r2
   27ad0:	11800017 	ldw	r6,0(r2)
   27ad4:	000f883a 	mov	r7,zero
   27ad8:	00274600 	call	27460 <__multadd>
   27adc:	1025883a 	mov	r18,r2
   27ae0:	003fc706 	br	27a00 <__alt_data_end+0xfffe7a00>
   27ae4:	05000044 	movi	r20,1
   27ae8:	a00b883a 	mov	r5,r20
   27aec:	9809883a 	mov	r4,r19
   27af0:	00273900 	call	27390 <_Balloc>
   27af4:	1023883a 	mov	r17,r2
   27af8:	00809c44 	movi	r2,625
   27afc:	88800515 	stw	r2,20(r17)
   27b00:	8d000415 	stw	r20,16(r17)
   27b04:	9c401215 	stw	r17,72(r19)
   27b08:	88000015 	stw	zero,0(r17)
   27b0c:	003fc606 	br	27a28 <__alt_data_end+0xfffe7a28>

00027b10 <__lshift>:
   27b10:	defff904 	addi	sp,sp,-28
   27b14:	dd400515 	stw	r21,20(sp)
   27b18:	dcc00315 	stw	r19,12(sp)
   27b1c:	302bd17a 	srai	r21,r6,5
   27b20:	2cc00417 	ldw	r19,16(r5)
   27b24:	28800217 	ldw	r2,8(r5)
   27b28:	dd000415 	stw	r20,16(sp)
   27b2c:	ace7883a 	add	r19,r21,r19
   27b30:	dc800215 	stw	r18,8(sp)
   27b34:	dc400115 	stw	r17,4(sp)
   27b38:	dc000015 	stw	r16,0(sp)
   27b3c:	dfc00615 	stw	ra,24(sp)
   27b40:	9c000044 	addi	r16,r19,1
   27b44:	2823883a 	mov	r17,r5
   27b48:	3029883a 	mov	r20,r6
   27b4c:	2025883a 	mov	r18,r4
   27b50:	29400117 	ldw	r5,4(r5)
   27b54:	1400030e 	bge	r2,r16,27b64 <__lshift+0x54>
   27b58:	1085883a 	add	r2,r2,r2
   27b5c:	29400044 	addi	r5,r5,1
   27b60:	143ffd16 	blt	r2,r16,27b58 <__alt_data_end+0xfffe7b58>
   27b64:	9009883a 	mov	r4,r18
   27b68:	00273900 	call	27390 <_Balloc>
   27b6c:	10c00504 	addi	r3,r2,20
   27b70:	0540070e 	bge	zero,r21,27b90 <__lshift+0x80>
   27b74:	ad6b883a 	add	r21,r21,r21
   27b78:	ad6b883a 	add	r21,r21,r21
   27b7c:	1809883a 	mov	r4,r3
   27b80:	1d47883a 	add	r3,r3,r21
   27b84:	20000015 	stw	zero,0(r4)
   27b88:	21000104 	addi	r4,r4,4
   27b8c:	193ffd1e 	bne	r3,r4,27b84 <__alt_data_end+0xfffe7b84>
   27b90:	8a000417 	ldw	r8,16(r17)
   27b94:	89000504 	addi	r4,r17,20
   27b98:	a18007cc 	andi	r6,r20,31
   27b9c:	4211883a 	add	r8,r8,r8
   27ba0:	4211883a 	add	r8,r8,r8
   27ba4:	2211883a 	add	r8,r4,r8
   27ba8:	30002326 	beq	r6,zero,27c38 <__lshift+0x128>
   27bac:	02400804 	movi	r9,32
   27bb0:	4993c83a 	sub	r9,r9,r6
   27bb4:	000b883a 	mov	r5,zero
   27bb8:	21c00017 	ldw	r7,0(r4)
   27bbc:	1815883a 	mov	r10,r3
   27bc0:	18c00104 	addi	r3,r3,4
   27bc4:	398e983a 	sll	r7,r7,r6
   27bc8:	21000104 	addi	r4,r4,4
   27bcc:	394ab03a 	or	r5,r7,r5
   27bd0:	197fff15 	stw	r5,-4(r3)
   27bd4:	217fff17 	ldw	r5,-4(r4)
   27bd8:	2a4ad83a 	srl	r5,r5,r9
   27bdc:	223ff636 	bltu	r4,r8,27bb8 <__alt_data_end+0xfffe7bb8>
   27be0:	51400115 	stw	r5,4(r10)
   27be4:	28001a1e 	bne	r5,zero,27c50 <__lshift+0x140>
   27be8:	843fffc4 	addi	r16,r16,-1
   27bec:	14000415 	stw	r16,16(r2)
   27bf0:	88000826 	beq	r17,zero,27c14 <__lshift+0x104>
   27bf4:	89000117 	ldw	r4,4(r17)
   27bf8:	90c01317 	ldw	r3,76(r18)
   27bfc:	2109883a 	add	r4,r4,r4
   27c00:	2109883a 	add	r4,r4,r4
   27c04:	1907883a 	add	r3,r3,r4
   27c08:	19000017 	ldw	r4,0(r3)
   27c0c:	89000015 	stw	r4,0(r17)
   27c10:	1c400015 	stw	r17,0(r3)
   27c14:	dfc00617 	ldw	ra,24(sp)
   27c18:	dd400517 	ldw	r21,20(sp)
   27c1c:	dd000417 	ldw	r20,16(sp)
   27c20:	dcc00317 	ldw	r19,12(sp)
   27c24:	dc800217 	ldw	r18,8(sp)
   27c28:	dc400117 	ldw	r17,4(sp)
   27c2c:	dc000017 	ldw	r16,0(sp)
   27c30:	dec00704 	addi	sp,sp,28
   27c34:	f800283a 	ret
   27c38:	21400017 	ldw	r5,0(r4)
   27c3c:	18c00104 	addi	r3,r3,4
   27c40:	21000104 	addi	r4,r4,4
   27c44:	197fff15 	stw	r5,-4(r3)
   27c48:	223ffb36 	bltu	r4,r8,27c38 <__alt_data_end+0xfffe7c38>
   27c4c:	003fe606 	br	27be8 <__alt_data_end+0xfffe7be8>
   27c50:	9c000084 	addi	r16,r19,2
   27c54:	003fe406 	br	27be8 <__alt_data_end+0xfffe7be8>

00027c58 <__mcmp>:
   27c58:	20800417 	ldw	r2,16(r4)
   27c5c:	28c00417 	ldw	r3,16(r5)
   27c60:	10c5c83a 	sub	r2,r2,r3
   27c64:	1000111e 	bne	r2,zero,27cac <__mcmp+0x54>
   27c68:	18c7883a 	add	r3,r3,r3
   27c6c:	18c7883a 	add	r3,r3,r3
   27c70:	21000504 	addi	r4,r4,20
   27c74:	29400504 	addi	r5,r5,20
   27c78:	20c5883a 	add	r2,r4,r3
   27c7c:	28cb883a 	add	r5,r5,r3
   27c80:	00000106 	br	27c88 <__mcmp+0x30>
   27c84:	20800a2e 	bgeu	r4,r2,27cb0 <__mcmp+0x58>
   27c88:	10bfff04 	addi	r2,r2,-4
   27c8c:	297fff04 	addi	r5,r5,-4
   27c90:	11800017 	ldw	r6,0(r2)
   27c94:	28c00017 	ldw	r3,0(r5)
   27c98:	30fffa26 	beq	r6,r3,27c84 <__alt_data_end+0xfffe7c84>
   27c9c:	30c00236 	bltu	r6,r3,27ca8 <__mcmp+0x50>
   27ca0:	00800044 	movi	r2,1
   27ca4:	f800283a 	ret
   27ca8:	00bfffc4 	movi	r2,-1
   27cac:	f800283a 	ret
   27cb0:	0005883a 	mov	r2,zero
   27cb4:	f800283a 	ret

00027cb8 <__mdiff>:
   27cb8:	28c00417 	ldw	r3,16(r5)
   27cbc:	30800417 	ldw	r2,16(r6)
   27cc0:	defffa04 	addi	sp,sp,-24
   27cc4:	dcc00315 	stw	r19,12(sp)
   27cc8:	dc800215 	stw	r18,8(sp)
   27ccc:	dfc00515 	stw	ra,20(sp)
   27cd0:	dd000415 	stw	r20,16(sp)
   27cd4:	dc400115 	stw	r17,4(sp)
   27cd8:	dc000015 	stw	r16,0(sp)
   27cdc:	1887c83a 	sub	r3,r3,r2
   27ce0:	2825883a 	mov	r18,r5
   27ce4:	3027883a 	mov	r19,r6
   27ce8:	1800141e 	bne	r3,zero,27d3c <__mdiff+0x84>
   27cec:	1085883a 	add	r2,r2,r2
   27cf0:	1085883a 	add	r2,r2,r2
   27cf4:	2a000504 	addi	r8,r5,20
   27cf8:	34000504 	addi	r16,r6,20
   27cfc:	4087883a 	add	r3,r8,r2
   27d00:	8085883a 	add	r2,r16,r2
   27d04:	00000106 	br	27d0c <__mdiff+0x54>
   27d08:	40c0592e 	bgeu	r8,r3,27e70 <__mdiff+0x1b8>
   27d0c:	18ffff04 	addi	r3,r3,-4
   27d10:	10bfff04 	addi	r2,r2,-4
   27d14:	19c00017 	ldw	r7,0(r3)
   27d18:	11400017 	ldw	r5,0(r2)
   27d1c:	397ffa26 	beq	r7,r5,27d08 <__alt_data_end+0xfffe7d08>
   27d20:	3940592e 	bgeu	r7,r5,27e88 <__mdiff+0x1d0>
   27d24:	9005883a 	mov	r2,r18
   27d28:	4023883a 	mov	r17,r8
   27d2c:	9825883a 	mov	r18,r19
   27d30:	05000044 	movi	r20,1
   27d34:	1027883a 	mov	r19,r2
   27d38:	00000406 	br	27d4c <__mdiff+0x94>
   27d3c:	18005616 	blt	r3,zero,27e98 <__mdiff+0x1e0>
   27d40:	34400504 	addi	r17,r6,20
   27d44:	2c000504 	addi	r16,r5,20
   27d48:	0029883a 	mov	r20,zero
   27d4c:	91400117 	ldw	r5,4(r18)
   27d50:	00273900 	call	27390 <_Balloc>
   27d54:	92400417 	ldw	r9,16(r18)
   27d58:	9b000417 	ldw	r12,16(r19)
   27d5c:	12c00504 	addi	r11,r2,20
   27d60:	4a51883a 	add	r8,r9,r9
   27d64:	6319883a 	add	r12,r12,r12
   27d68:	4211883a 	add	r8,r8,r8
   27d6c:	6319883a 	add	r12,r12,r12
   27d70:	15000315 	stw	r20,12(r2)
   27d74:	8211883a 	add	r8,r16,r8
   27d78:	8b19883a 	add	r12,r17,r12
   27d7c:	0007883a 	mov	r3,zero
   27d80:	81400017 	ldw	r5,0(r16)
   27d84:	89c00017 	ldw	r7,0(r17)
   27d88:	59800104 	addi	r6,r11,4
   27d8c:	293fffcc 	andi	r4,r5,65535
   27d90:	20c7883a 	add	r3,r4,r3
   27d94:	393fffcc 	andi	r4,r7,65535
   27d98:	1909c83a 	sub	r4,r3,r4
   27d9c:	280ad43a 	srli	r5,r5,16
   27da0:	380ed43a 	srli	r7,r7,16
   27da4:	2007d43a 	srai	r3,r4,16
   27da8:	213fffcc 	andi	r4,r4,65535
   27dac:	29cbc83a 	sub	r5,r5,r7
   27db0:	28c7883a 	add	r3,r5,r3
   27db4:	180a943a 	slli	r5,r3,16
   27db8:	8c400104 	addi	r17,r17,4
   27dbc:	84000104 	addi	r16,r16,4
   27dc0:	2908b03a 	or	r4,r5,r4
   27dc4:	59000015 	stw	r4,0(r11)
   27dc8:	1807d43a 	srai	r3,r3,16
   27dcc:	3015883a 	mov	r10,r6
   27dd0:	3017883a 	mov	r11,r6
   27dd4:	8b3fea36 	bltu	r17,r12,27d80 <__alt_data_end+0xfffe7d80>
   27dd8:	8200162e 	bgeu	r16,r8,27e34 <__mdiff+0x17c>
   27ddc:	8017883a 	mov	r11,r16
   27de0:	59400017 	ldw	r5,0(r11)
   27de4:	31800104 	addi	r6,r6,4
   27de8:	5ac00104 	addi	r11,r11,4
   27dec:	293fffcc 	andi	r4,r5,65535
   27df0:	20c7883a 	add	r3,r4,r3
   27df4:	280ed43a 	srli	r7,r5,16
   27df8:	180bd43a 	srai	r5,r3,16
   27dfc:	193fffcc 	andi	r4,r3,65535
   27e00:	3947883a 	add	r3,r7,r5
   27e04:	180a943a 	slli	r5,r3,16
   27e08:	1807d43a 	srai	r3,r3,16
   27e0c:	2908b03a 	or	r4,r5,r4
   27e10:	313fff15 	stw	r4,-4(r6)
   27e14:	5a3ff236 	bltu	r11,r8,27de0 <__alt_data_end+0xfffe7de0>
   27e18:	0406303a 	nor	r3,zero,r16
   27e1c:	1a07883a 	add	r3,r3,r8
   27e20:	1806d0ba 	srli	r3,r3,2
   27e24:	18c00044 	addi	r3,r3,1
   27e28:	18c7883a 	add	r3,r3,r3
   27e2c:	18c7883a 	add	r3,r3,r3
   27e30:	50d5883a 	add	r10,r10,r3
   27e34:	50ffff04 	addi	r3,r10,-4
   27e38:	2000041e 	bne	r4,zero,27e4c <__mdiff+0x194>
   27e3c:	18ffff04 	addi	r3,r3,-4
   27e40:	19000017 	ldw	r4,0(r3)
   27e44:	4a7fffc4 	addi	r9,r9,-1
   27e48:	203ffc26 	beq	r4,zero,27e3c <__alt_data_end+0xfffe7e3c>
   27e4c:	12400415 	stw	r9,16(r2)
   27e50:	dfc00517 	ldw	ra,20(sp)
   27e54:	dd000417 	ldw	r20,16(sp)
   27e58:	dcc00317 	ldw	r19,12(sp)
   27e5c:	dc800217 	ldw	r18,8(sp)
   27e60:	dc400117 	ldw	r17,4(sp)
   27e64:	dc000017 	ldw	r16,0(sp)
   27e68:	dec00604 	addi	sp,sp,24
   27e6c:	f800283a 	ret
   27e70:	000b883a 	mov	r5,zero
   27e74:	00273900 	call	27390 <_Balloc>
   27e78:	00c00044 	movi	r3,1
   27e7c:	10c00415 	stw	r3,16(r2)
   27e80:	10000515 	stw	zero,20(r2)
   27e84:	003ff206 	br	27e50 <__alt_data_end+0xfffe7e50>
   27e88:	8023883a 	mov	r17,r16
   27e8c:	0029883a 	mov	r20,zero
   27e90:	4021883a 	mov	r16,r8
   27e94:	003fad06 	br	27d4c <__alt_data_end+0xfffe7d4c>
   27e98:	9005883a 	mov	r2,r18
   27e9c:	94400504 	addi	r17,r18,20
   27ea0:	9c000504 	addi	r16,r19,20
   27ea4:	9825883a 	mov	r18,r19
   27ea8:	05000044 	movi	r20,1
   27eac:	1027883a 	mov	r19,r2
   27eb0:	003fa606 	br	27d4c <__alt_data_end+0xfffe7d4c>

00027eb4 <__ulp>:
   27eb4:	295ffc2c 	andhi	r5,r5,32752
   27eb8:	00bf3034 	movhi	r2,64704
   27ebc:	2887883a 	add	r3,r5,r2
   27ec0:	00c0020e 	bge	zero,r3,27ecc <__ulp+0x18>
   27ec4:	0005883a 	mov	r2,zero
   27ec8:	f800283a 	ret
   27ecc:	00c7c83a 	sub	r3,zero,r3
   27ed0:	1807d53a 	srai	r3,r3,20
   27ed4:	008004c4 	movi	r2,19
   27ed8:	10c00b0e 	bge	r2,r3,27f08 <__ulp+0x54>
   27edc:	18bffb04 	addi	r2,r3,-20
   27ee0:	01000784 	movi	r4,30
   27ee4:	0007883a 	mov	r3,zero
   27ee8:	20800516 	blt	r4,r2,27f00 <__ulp+0x4c>
   27eec:	010007c4 	movi	r4,31
   27ef0:	2089c83a 	sub	r4,r4,r2
   27ef4:	00800044 	movi	r2,1
   27ef8:	1104983a 	sll	r2,r2,r4
   27efc:	f800283a 	ret
   27f00:	00800044 	movi	r2,1
   27f04:	f800283a 	ret
   27f08:	01400234 	movhi	r5,8
   27f0c:	28c7d83a 	sra	r3,r5,r3
   27f10:	0005883a 	mov	r2,zero
   27f14:	f800283a 	ret

00027f18 <__b2d>:
   27f18:	defffa04 	addi	sp,sp,-24
   27f1c:	dc000015 	stw	r16,0(sp)
   27f20:	24000417 	ldw	r16,16(r4)
   27f24:	dc400115 	stw	r17,4(sp)
   27f28:	24400504 	addi	r17,r4,20
   27f2c:	8421883a 	add	r16,r16,r16
   27f30:	8421883a 	add	r16,r16,r16
   27f34:	8c21883a 	add	r16,r17,r16
   27f38:	dc800215 	stw	r18,8(sp)
   27f3c:	84bfff17 	ldw	r18,-4(r16)
   27f40:	dd000415 	stw	r20,16(sp)
   27f44:	dcc00315 	stw	r19,12(sp)
   27f48:	9009883a 	mov	r4,r18
   27f4c:	2829883a 	mov	r20,r5
   27f50:	dfc00515 	stw	ra,20(sp)
   27f54:	00276840 	call	27684 <__hi0bits>
   27f58:	00c00804 	movi	r3,32
   27f5c:	1889c83a 	sub	r4,r3,r2
   27f60:	a1000015 	stw	r4,0(r20)
   27f64:	01000284 	movi	r4,10
   27f68:	84ffff04 	addi	r19,r16,-4
   27f6c:	20801216 	blt	r4,r2,27fb8 <__b2d+0xa0>
   27f70:	018002c4 	movi	r6,11
   27f74:	308dc83a 	sub	r6,r6,r2
   27f78:	9186d83a 	srl	r3,r18,r6
   27f7c:	18cffc34 	orhi	r3,r3,16368
   27f80:	8cc0212e 	bgeu	r17,r19,28008 <__b2d+0xf0>
   27f84:	813ffe17 	ldw	r4,-8(r16)
   27f88:	218cd83a 	srl	r6,r4,r6
   27f8c:	10800544 	addi	r2,r2,21
   27f90:	9084983a 	sll	r2,r18,r2
   27f94:	1184b03a 	or	r2,r2,r6
   27f98:	dfc00517 	ldw	ra,20(sp)
   27f9c:	dd000417 	ldw	r20,16(sp)
   27fa0:	dcc00317 	ldw	r19,12(sp)
   27fa4:	dc800217 	ldw	r18,8(sp)
   27fa8:	dc400117 	ldw	r17,4(sp)
   27fac:	dc000017 	ldw	r16,0(sp)
   27fb0:	dec00604 	addi	sp,sp,24
   27fb4:	f800283a 	ret
   27fb8:	8cc00f2e 	bgeu	r17,r19,27ff8 <__b2d+0xe0>
   27fbc:	117ffd44 	addi	r5,r2,-11
   27fc0:	80bffe17 	ldw	r2,-8(r16)
   27fc4:	28000e26 	beq	r5,zero,28000 <__b2d+0xe8>
   27fc8:	1949c83a 	sub	r4,r3,r5
   27fcc:	9164983a 	sll	r18,r18,r5
   27fd0:	1106d83a 	srl	r3,r2,r4
   27fd4:	81bffe04 	addi	r6,r16,-8
   27fd8:	948ffc34 	orhi	r18,r18,16368
   27fdc:	90c6b03a 	or	r3,r18,r3
   27fe0:	89800e2e 	bgeu	r17,r6,2801c <__b2d+0x104>
   27fe4:	81bffd17 	ldw	r6,-12(r16)
   27fe8:	1144983a 	sll	r2,r2,r5
   27fec:	310ad83a 	srl	r5,r6,r4
   27ff0:	2884b03a 	or	r2,r5,r2
   27ff4:	003fe806 	br	27f98 <__alt_data_end+0xfffe7f98>
   27ff8:	10bffd44 	addi	r2,r2,-11
   27ffc:	1000041e 	bne	r2,zero,28010 <__b2d+0xf8>
   28000:	90cffc34 	orhi	r3,r18,16368
   28004:	003fe406 	br	27f98 <__alt_data_end+0xfffe7f98>
   28008:	000d883a 	mov	r6,zero
   2800c:	003fdf06 	br	27f8c <__alt_data_end+0xfffe7f8c>
   28010:	90a4983a 	sll	r18,r18,r2
   28014:	0005883a 	mov	r2,zero
   28018:	003ff906 	br	28000 <__alt_data_end+0xfffe8000>
   2801c:	1144983a 	sll	r2,r2,r5
   28020:	003fdd06 	br	27f98 <__alt_data_end+0xfffe7f98>

00028024 <__d2b>:
   28024:	defff804 	addi	sp,sp,-32
   28028:	dc000215 	stw	r16,8(sp)
   2802c:	3021883a 	mov	r16,r6
   28030:	dc400315 	stw	r17,12(sp)
   28034:	8022907a 	slli	r17,r16,1
   28038:	dd000615 	stw	r20,24(sp)
   2803c:	2829883a 	mov	r20,r5
   28040:	01400044 	movi	r5,1
   28044:	dcc00515 	stw	r19,20(sp)
   28048:	dc800415 	stw	r18,16(sp)
   2804c:	dfc00715 	stw	ra,28(sp)
   28050:	3825883a 	mov	r18,r7
   28054:	8822d57a 	srli	r17,r17,21
   28058:	00273900 	call	27390 <_Balloc>
   2805c:	1027883a 	mov	r19,r2
   28060:	00800434 	movhi	r2,16
   28064:	10bfffc4 	addi	r2,r2,-1
   28068:	808c703a 	and	r6,r16,r2
   2806c:	88000126 	beq	r17,zero,28074 <__d2b+0x50>
   28070:	31800434 	orhi	r6,r6,16
   28074:	d9800015 	stw	r6,0(sp)
   28078:	a0002426 	beq	r20,zero,2810c <__d2b+0xe8>
   2807c:	d9000104 	addi	r4,sp,4
   28080:	dd000115 	stw	r20,4(sp)
   28084:	00276ec0 	call	276ec <__lo0bits>
   28088:	d8c00017 	ldw	r3,0(sp)
   2808c:	10002f1e 	bne	r2,zero,2814c <__d2b+0x128>
   28090:	d9000117 	ldw	r4,4(sp)
   28094:	99000515 	stw	r4,20(r19)
   28098:	1821003a 	cmpeq	r16,r3,zero
   2809c:	01000084 	movi	r4,2
   280a0:	2421c83a 	sub	r16,r4,r16
   280a4:	98c00615 	stw	r3,24(r19)
   280a8:	9c000415 	stw	r16,16(r19)
   280ac:	88001f1e 	bne	r17,zero,2812c <__d2b+0x108>
   280b0:	10bef384 	addi	r2,r2,-1074
   280b4:	90800015 	stw	r2,0(r18)
   280b8:	00900034 	movhi	r2,16384
   280bc:	10bfffc4 	addi	r2,r2,-1
   280c0:	8085883a 	add	r2,r16,r2
   280c4:	1085883a 	add	r2,r2,r2
   280c8:	1085883a 	add	r2,r2,r2
   280cc:	9885883a 	add	r2,r19,r2
   280d0:	11000517 	ldw	r4,20(r2)
   280d4:	8020917a 	slli	r16,r16,5
   280d8:	00276840 	call	27684 <__hi0bits>
   280dc:	d8c00817 	ldw	r3,32(sp)
   280e0:	8085c83a 	sub	r2,r16,r2
   280e4:	18800015 	stw	r2,0(r3)
   280e8:	9805883a 	mov	r2,r19
   280ec:	dfc00717 	ldw	ra,28(sp)
   280f0:	dd000617 	ldw	r20,24(sp)
   280f4:	dcc00517 	ldw	r19,20(sp)
   280f8:	dc800417 	ldw	r18,16(sp)
   280fc:	dc400317 	ldw	r17,12(sp)
   28100:	dc000217 	ldw	r16,8(sp)
   28104:	dec00804 	addi	sp,sp,32
   28108:	f800283a 	ret
   2810c:	d809883a 	mov	r4,sp
   28110:	00276ec0 	call	276ec <__lo0bits>
   28114:	d8c00017 	ldw	r3,0(sp)
   28118:	04000044 	movi	r16,1
   2811c:	9c000415 	stw	r16,16(r19)
   28120:	98c00515 	stw	r3,20(r19)
   28124:	10800804 	addi	r2,r2,32
   28128:	883fe126 	beq	r17,zero,280b0 <__alt_data_end+0xfffe80b0>
   2812c:	00c00d44 	movi	r3,53
   28130:	8c7ef344 	addi	r17,r17,-1075
   28134:	88a3883a 	add	r17,r17,r2
   28138:	1885c83a 	sub	r2,r3,r2
   2813c:	d8c00817 	ldw	r3,32(sp)
   28140:	94400015 	stw	r17,0(r18)
   28144:	18800015 	stw	r2,0(r3)
   28148:	003fe706 	br	280e8 <__alt_data_end+0xfffe80e8>
   2814c:	01000804 	movi	r4,32
   28150:	2089c83a 	sub	r4,r4,r2
   28154:	1908983a 	sll	r4,r3,r4
   28158:	d9400117 	ldw	r5,4(sp)
   2815c:	1886d83a 	srl	r3,r3,r2
   28160:	2148b03a 	or	r4,r4,r5
   28164:	99000515 	stw	r4,20(r19)
   28168:	d8c00015 	stw	r3,0(sp)
   2816c:	003fca06 	br	28098 <__alt_data_end+0xfffe8098>

00028170 <__ratio>:
   28170:	defff904 	addi	sp,sp,-28
   28174:	dc400315 	stw	r17,12(sp)
   28178:	2823883a 	mov	r17,r5
   2817c:	d9400104 	addi	r5,sp,4
   28180:	dfc00615 	stw	ra,24(sp)
   28184:	dcc00515 	stw	r19,20(sp)
   28188:	dc800415 	stw	r18,16(sp)
   2818c:	2027883a 	mov	r19,r4
   28190:	dc000215 	stw	r16,8(sp)
   28194:	0027f180 	call	27f18 <__b2d>
   28198:	d80b883a 	mov	r5,sp
   2819c:	8809883a 	mov	r4,r17
   281a0:	1025883a 	mov	r18,r2
   281a4:	1821883a 	mov	r16,r3
   281a8:	0027f180 	call	27f18 <__b2d>
   281ac:	8a000417 	ldw	r8,16(r17)
   281b0:	99000417 	ldw	r4,16(r19)
   281b4:	d9400117 	ldw	r5,4(sp)
   281b8:	2209c83a 	sub	r4,r4,r8
   281bc:	2010917a 	slli	r8,r4,5
   281c0:	d9000017 	ldw	r4,0(sp)
   281c4:	2909c83a 	sub	r4,r5,r4
   281c8:	4109883a 	add	r4,r8,r4
   281cc:	01000e0e 	bge	zero,r4,28208 <__ratio+0x98>
   281d0:	2008953a 	slli	r4,r4,20
   281d4:	2421883a 	add	r16,r4,r16
   281d8:	100d883a 	mov	r6,r2
   281dc:	180f883a 	mov	r7,r3
   281e0:	9009883a 	mov	r4,r18
   281e4:	800b883a 	mov	r5,r16
   281e8:	002bc040 	call	2bc04 <__divdf3>
   281ec:	dfc00617 	ldw	ra,24(sp)
   281f0:	dcc00517 	ldw	r19,20(sp)
   281f4:	dc800417 	ldw	r18,16(sp)
   281f8:	dc400317 	ldw	r17,12(sp)
   281fc:	dc000217 	ldw	r16,8(sp)
   28200:	dec00704 	addi	sp,sp,28
   28204:	f800283a 	ret
   28208:	2008953a 	slli	r4,r4,20
   2820c:	1907c83a 	sub	r3,r3,r4
   28210:	003ff106 	br	281d8 <__alt_data_end+0xfffe81d8>

00028214 <_mprec_log10>:
   28214:	defffe04 	addi	sp,sp,-8
   28218:	dc000015 	stw	r16,0(sp)
   2821c:	dfc00115 	stw	ra,4(sp)
   28220:	008005c4 	movi	r2,23
   28224:	2021883a 	mov	r16,r4
   28228:	11000d0e 	bge	r2,r4,28260 <_mprec_log10+0x4c>
   2822c:	0005883a 	mov	r2,zero
   28230:	00cffc34 	movhi	r3,16368
   28234:	843fffc4 	addi	r16,r16,-1
   28238:	000d883a 	mov	r6,zero
   2823c:	01d00934 	movhi	r7,16420
   28240:	1009883a 	mov	r4,r2
   28244:	180b883a 	mov	r5,r3
   28248:	002c7440 	call	2c744 <__muldf3>
   2824c:	803ff91e 	bne	r16,zero,28234 <__alt_data_end+0xfffe8234>
   28250:	dfc00117 	ldw	ra,4(sp)
   28254:	dc000017 	ldw	r16,0(sp)
   28258:	dec00204 	addi	sp,sp,8
   2825c:	f800283a 	ret
   28260:	202090fa 	slli	r16,r4,3
   28264:	008000f4 	movhi	r2,3
   28268:	10838f04 	addi	r2,r2,3644
   2826c:	1421883a 	add	r16,r2,r16
   28270:	80800017 	ldw	r2,0(r16)
   28274:	80c00117 	ldw	r3,4(r16)
   28278:	dfc00117 	ldw	ra,4(sp)
   2827c:	dc000017 	ldw	r16,0(sp)
   28280:	dec00204 	addi	sp,sp,8
   28284:	f800283a 	ret

00028288 <__copybits>:
   28288:	297fffc4 	addi	r5,r5,-1
   2828c:	280fd17a 	srai	r7,r5,5
   28290:	30c00417 	ldw	r3,16(r6)
   28294:	30800504 	addi	r2,r6,20
   28298:	39c00044 	addi	r7,r7,1
   2829c:	18c7883a 	add	r3,r3,r3
   282a0:	39cf883a 	add	r7,r7,r7
   282a4:	18c7883a 	add	r3,r3,r3
   282a8:	39cf883a 	add	r7,r7,r7
   282ac:	10c7883a 	add	r3,r2,r3
   282b0:	21cf883a 	add	r7,r4,r7
   282b4:	10c00d2e 	bgeu	r2,r3,282ec <__copybits+0x64>
   282b8:	200b883a 	mov	r5,r4
   282bc:	12000017 	ldw	r8,0(r2)
   282c0:	29400104 	addi	r5,r5,4
   282c4:	10800104 	addi	r2,r2,4
   282c8:	2a3fff15 	stw	r8,-4(r5)
   282cc:	10fffb36 	bltu	r2,r3,282bc <__alt_data_end+0xfffe82bc>
   282d0:	1985c83a 	sub	r2,r3,r6
   282d4:	10bffac4 	addi	r2,r2,-21
   282d8:	1004d0ba 	srli	r2,r2,2
   282dc:	10800044 	addi	r2,r2,1
   282e0:	1085883a 	add	r2,r2,r2
   282e4:	1085883a 	add	r2,r2,r2
   282e8:	2089883a 	add	r4,r4,r2
   282ec:	21c0032e 	bgeu	r4,r7,282fc <__copybits+0x74>
   282f0:	20000015 	stw	zero,0(r4)
   282f4:	21000104 	addi	r4,r4,4
   282f8:	21fffd36 	bltu	r4,r7,282f0 <__alt_data_end+0xfffe82f0>
   282fc:	f800283a 	ret

00028300 <__any_on>:
   28300:	20c00417 	ldw	r3,16(r4)
   28304:	2805d17a 	srai	r2,r5,5
   28308:	21000504 	addi	r4,r4,20
   2830c:	18800d0e 	bge	r3,r2,28344 <__any_on+0x44>
   28310:	18c7883a 	add	r3,r3,r3
   28314:	18c7883a 	add	r3,r3,r3
   28318:	20c7883a 	add	r3,r4,r3
   2831c:	20c0192e 	bgeu	r4,r3,28384 <__any_on+0x84>
   28320:	18bfff17 	ldw	r2,-4(r3)
   28324:	18ffff04 	addi	r3,r3,-4
   28328:	1000041e 	bne	r2,zero,2833c <__any_on+0x3c>
   2832c:	20c0142e 	bgeu	r4,r3,28380 <__any_on+0x80>
   28330:	18ffff04 	addi	r3,r3,-4
   28334:	19400017 	ldw	r5,0(r3)
   28338:	283ffc26 	beq	r5,zero,2832c <__alt_data_end+0xfffe832c>
   2833c:	00800044 	movi	r2,1
   28340:	f800283a 	ret
   28344:	10c00a0e 	bge	r2,r3,28370 <__any_on+0x70>
   28348:	1085883a 	add	r2,r2,r2
   2834c:	1085883a 	add	r2,r2,r2
   28350:	294007cc 	andi	r5,r5,31
   28354:	2087883a 	add	r3,r4,r2
   28358:	283ff026 	beq	r5,zero,2831c <__alt_data_end+0xfffe831c>
   2835c:	19800017 	ldw	r6,0(r3)
   28360:	3144d83a 	srl	r2,r6,r5
   28364:	114a983a 	sll	r5,r2,r5
   28368:	317ff41e 	bne	r6,r5,2833c <__alt_data_end+0xfffe833c>
   2836c:	003feb06 	br	2831c <__alt_data_end+0xfffe831c>
   28370:	1085883a 	add	r2,r2,r2
   28374:	1085883a 	add	r2,r2,r2
   28378:	2087883a 	add	r3,r4,r2
   2837c:	003fe706 	br	2831c <__alt_data_end+0xfffe831c>
   28380:	f800283a 	ret
   28384:	0005883a 	mov	r2,zero
   28388:	f800283a 	ret

0002838c <_read_r>:
   2838c:	defffd04 	addi	sp,sp,-12
   28390:	2805883a 	mov	r2,r5
   28394:	dc000015 	stw	r16,0(sp)
   28398:	040000f4 	movhi	r16,3
   2839c:	dc400115 	stw	r17,4(sp)
   283a0:	300b883a 	mov	r5,r6
   283a4:	8411f104 	addi	r16,r16,18372
   283a8:	2023883a 	mov	r17,r4
   283ac:	380d883a 	mov	r6,r7
   283b0:	1009883a 	mov	r4,r2
   283b4:	dfc00215 	stw	ra,8(sp)
   283b8:	80000015 	stw	zero,0(r16)
   283bc:	002e2140 	call	2e214 <read>
   283c0:	00ffffc4 	movi	r3,-1
   283c4:	10c00526 	beq	r2,r3,283dc <_read_r+0x50>
   283c8:	dfc00217 	ldw	ra,8(sp)
   283cc:	dc400117 	ldw	r17,4(sp)
   283d0:	dc000017 	ldw	r16,0(sp)
   283d4:	dec00304 	addi	sp,sp,12
   283d8:	f800283a 	ret
   283dc:	80c00017 	ldw	r3,0(r16)
   283e0:	183ff926 	beq	r3,zero,283c8 <__alt_data_end+0xfffe83c8>
   283e4:	88c00015 	stw	r3,0(r17)
   283e8:	003ff706 	br	283c8 <__alt_data_end+0xfffe83c8>

000283ec <_realloc_r>:
   283ec:	defff604 	addi	sp,sp,-40
   283f0:	dc800215 	stw	r18,8(sp)
   283f4:	dfc00915 	stw	ra,36(sp)
   283f8:	df000815 	stw	fp,32(sp)
   283fc:	ddc00715 	stw	r23,28(sp)
   28400:	dd800615 	stw	r22,24(sp)
   28404:	dd400515 	stw	r21,20(sp)
   28408:	dd000415 	stw	r20,16(sp)
   2840c:	dcc00315 	stw	r19,12(sp)
   28410:	dc400115 	stw	r17,4(sp)
   28414:	dc000015 	stw	r16,0(sp)
   28418:	3025883a 	mov	r18,r6
   2841c:	2800b726 	beq	r5,zero,286fc <_realloc_r+0x310>
   28420:	282b883a 	mov	r21,r5
   28424:	2029883a 	mov	r20,r4
   28428:	002df3c0 	call	2df3c <__malloc_lock>
   2842c:	a8bfff17 	ldw	r2,-4(r21)
   28430:	043fff04 	movi	r16,-4
   28434:	90c002c4 	addi	r3,r18,11
   28438:	01000584 	movi	r4,22
   2843c:	acfffe04 	addi	r19,r21,-8
   28440:	1420703a 	and	r16,r2,r16
   28444:	20c0332e 	bgeu	r4,r3,28514 <_realloc_r+0x128>
   28448:	047ffe04 	movi	r17,-8
   2844c:	1c62703a 	and	r17,r3,r17
   28450:	8807883a 	mov	r3,r17
   28454:	88005816 	blt	r17,zero,285b8 <_realloc_r+0x1cc>
   28458:	8c805736 	bltu	r17,r18,285b8 <_realloc_r+0x1cc>
   2845c:	80c0300e 	bge	r16,r3,28520 <_realloc_r+0x134>
   28460:	070000f4 	movhi	fp,3
   28464:	e7052004 	addi	fp,fp,5248
   28468:	e1c00217 	ldw	r7,8(fp)
   2846c:	9c09883a 	add	r4,r19,r16
   28470:	22000117 	ldw	r8,4(r4)
   28474:	21c06326 	beq	r4,r7,28604 <_realloc_r+0x218>
   28478:	017fff84 	movi	r5,-2
   2847c:	414a703a 	and	r5,r8,r5
   28480:	214b883a 	add	r5,r4,r5
   28484:	29800117 	ldw	r6,4(r5)
   28488:	3180004c 	andi	r6,r6,1
   2848c:	30003f26 	beq	r6,zero,2858c <_realloc_r+0x1a0>
   28490:	1080004c 	andi	r2,r2,1
   28494:	10008326 	beq	r2,zero,286a4 <_realloc_r+0x2b8>
   28498:	900b883a 	mov	r5,r18
   2849c:	a009883a 	mov	r4,r20
   284a0:	00212900 	call	21290 <_malloc_r>
   284a4:	1025883a 	mov	r18,r2
   284a8:	10011e26 	beq	r2,zero,28924 <_realloc_r+0x538>
   284ac:	a93fff17 	ldw	r4,-4(r21)
   284b0:	10fffe04 	addi	r3,r2,-8
   284b4:	00bfff84 	movi	r2,-2
   284b8:	2084703a 	and	r2,r4,r2
   284bc:	9885883a 	add	r2,r19,r2
   284c0:	1880ee26 	beq	r3,r2,2887c <_realloc_r+0x490>
   284c4:	81bfff04 	addi	r6,r16,-4
   284c8:	00800904 	movi	r2,36
   284cc:	1180b836 	bltu	r2,r6,287b0 <_realloc_r+0x3c4>
   284d0:	00c004c4 	movi	r3,19
   284d4:	19809636 	bltu	r3,r6,28730 <_realloc_r+0x344>
   284d8:	9005883a 	mov	r2,r18
   284dc:	a807883a 	mov	r3,r21
   284e0:	19000017 	ldw	r4,0(r3)
   284e4:	11000015 	stw	r4,0(r2)
   284e8:	19000117 	ldw	r4,4(r3)
   284ec:	11000115 	stw	r4,4(r2)
   284f0:	18c00217 	ldw	r3,8(r3)
   284f4:	10c00215 	stw	r3,8(r2)
   284f8:	a80b883a 	mov	r5,r21
   284fc:	a009883a 	mov	r4,r20
   28500:	00268d80 	call	268d8 <_free_r>
   28504:	a009883a 	mov	r4,r20
   28508:	002df600 	call	2df60 <__malloc_unlock>
   2850c:	9005883a 	mov	r2,r18
   28510:	00001206 	br	2855c <_realloc_r+0x170>
   28514:	00c00404 	movi	r3,16
   28518:	1823883a 	mov	r17,r3
   2851c:	003fce06 	br	28458 <__alt_data_end+0xfffe8458>
   28520:	a825883a 	mov	r18,r21
   28524:	8445c83a 	sub	r2,r16,r17
   28528:	00c003c4 	movi	r3,15
   2852c:	18802636 	bltu	r3,r2,285c8 <_realloc_r+0x1dc>
   28530:	99800117 	ldw	r6,4(r19)
   28534:	9c07883a 	add	r3,r19,r16
   28538:	3180004c 	andi	r6,r6,1
   2853c:	3420b03a 	or	r16,r6,r16
   28540:	9c000115 	stw	r16,4(r19)
   28544:	18800117 	ldw	r2,4(r3)
   28548:	10800054 	ori	r2,r2,1
   2854c:	18800115 	stw	r2,4(r3)
   28550:	a009883a 	mov	r4,r20
   28554:	002df600 	call	2df60 <__malloc_unlock>
   28558:	9005883a 	mov	r2,r18
   2855c:	dfc00917 	ldw	ra,36(sp)
   28560:	df000817 	ldw	fp,32(sp)
   28564:	ddc00717 	ldw	r23,28(sp)
   28568:	dd800617 	ldw	r22,24(sp)
   2856c:	dd400517 	ldw	r21,20(sp)
   28570:	dd000417 	ldw	r20,16(sp)
   28574:	dcc00317 	ldw	r19,12(sp)
   28578:	dc800217 	ldw	r18,8(sp)
   2857c:	dc400117 	ldw	r17,4(sp)
   28580:	dc000017 	ldw	r16,0(sp)
   28584:	dec00a04 	addi	sp,sp,40
   28588:	f800283a 	ret
   2858c:	017fff04 	movi	r5,-4
   28590:	414a703a 	and	r5,r8,r5
   28594:	814d883a 	add	r6,r16,r5
   28598:	30c01f16 	blt	r6,r3,28618 <_realloc_r+0x22c>
   2859c:	20800317 	ldw	r2,12(r4)
   285a0:	20c00217 	ldw	r3,8(r4)
   285a4:	a825883a 	mov	r18,r21
   285a8:	3021883a 	mov	r16,r6
   285ac:	18800315 	stw	r2,12(r3)
   285b0:	10c00215 	stw	r3,8(r2)
   285b4:	003fdb06 	br	28524 <__alt_data_end+0xfffe8524>
   285b8:	00800304 	movi	r2,12
   285bc:	a0800015 	stw	r2,0(r20)
   285c0:	0005883a 	mov	r2,zero
   285c4:	003fe506 	br	2855c <__alt_data_end+0xfffe855c>
   285c8:	98c00117 	ldw	r3,4(r19)
   285cc:	9c4b883a 	add	r5,r19,r17
   285d0:	11000054 	ori	r4,r2,1
   285d4:	18c0004c 	andi	r3,r3,1
   285d8:	1c62b03a 	or	r17,r3,r17
   285dc:	9c400115 	stw	r17,4(r19)
   285e0:	29000115 	stw	r4,4(r5)
   285e4:	2885883a 	add	r2,r5,r2
   285e8:	10c00117 	ldw	r3,4(r2)
   285ec:	29400204 	addi	r5,r5,8
   285f0:	a009883a 	mov	r4,r20
   285f4:	18c00054 	ori	r3,r3,1
   285f8:	10c00115 	stw	r3,4(r2)
   285fc:	00268d80 	call	268d8 <_free_r>
   28600:	003fd306 	br	28550 <__alt_data_end+0xfffe8550>
   28604:	017fff04 	movi	r5,-4
   28608:	414a703a 	and	r5,r8,r5
   2860c:	89800404 	addi	r6,r17,16
   28610:	8151883a 	add	r8,r16,r5
   28614:	4180590e 	bge	r8,r6,2877c <_realloc_r+0x390>
   28618:	1080004c 	andi	r2,r2,1
   2861c:	103f9e1e 	bne	r2,zero,28498 <__alt_data_end+0xfffe8498>
   28620:	adbffe17 	ldw	r22,-8(r21)
   28624:	00bfff04 	movi	r2,-4
   28628:	9dadc83a 	sub	r22,r19,r22
   2862c:	b1800117 	ldw	r6,4(r22)
   28630:	3084703a 	and	r2,r6,r2
   28634:	20002026 	beq	r4,zero,286b8 <_realloc_r+0x2cc>
   28638:	80af883a 	add	r23,r16,r2
   2863c:	b96f883a 	add	r23,r23,r5
   28640:	21c05f26 	beq	r4,r7,287c0 <_realloc_r+0x3d4>
   28644:	b8c01c16 	blt	r23,r3,286b8 <_realloc_r+0x2cc>
   28648:	20800317 	ldw	r2,12(r4)
   2864c:	20c00217 	ldw	r3,8(r4)
   28650:	81bfff04 	addi	r6,r16,-4
   28654:	01000904 	movi	r4,36
   28658:	18800315 	stw	r2,12(r3)
   2865c:	10c00215 	stw	r3,8(r2)
   28660:	b0c00217 	ldw	r3,8(r22)
   28664:	b0800317 	ldw	r2,12(r22)
   28668:	b4800204 	addi	r18,r22,8
   2866c:	18800315 	stw	r2,12(r3)
   28670:	10c00215 	stw	r3,8(r2)
   28674:	21801b36 	bltu	r4,r6,286e4 <_realloc_r+0x2f8>
   28678:	008004c4 	movi	r2,19
   2867c:	1180352e 	bgeu	r2,r6,28754 <_realloc_r+0x368>
   28680:	a8800017 	ldw	r2,0(r21)
   28684:	b0800215 	stw	r2,8(r22)
   28688:	a8800117 	ldw	r2,4(r21)
   2868c:	b0800315 	stw	r2,12(r22)
   28690:	008006c4 	movi	r2,27
   28694:	11807f36 	bltu	r2,r6,28894 <_realloc_r+0x4a8>
   28698:	b0800404 	addi	r2,r22,16
   2869c:	ad400204 	addi	r21,r21,8
   286a0:	00002d06 	br	28758 <_realloc_r+0x36c>
   286a4:	adbffe17 	ldw	r22,-8(r21)
   286a8:	00bfff04 	movi	r2,-4
   286ac:	9dadc83a 	sub	r22,r19,r22
   286b0:	b1000117 	ldw	r4,4(r22)
   286b4:	2084703a 	and	r2,r4,r2
   286b8:	b03f7726 	beq	r22,zero,28498 <__alt_data_end+0xfffe8498>
   286bc:	80af883a 	add	r23,r16,r2
   286c0:	b8ff7516 	blt	r23,r3,28498 <__alt_data_end+0xfffe8498>
   286c4:	b0800317 	ldw	r2,12(r22)
   286c8:	b0c00217 	ldw	r3,8(r22)
   286cc:	81bfff04 	addi	r6,r16,-4
   286d0:	01000904 	movi	r4,36
   286d4:	18800315 	stw	r2,12(r3)
   286d8:	10c00215 	stw	r3,8(r2)
   286dc:	b4800204 	addi	r18,r22,8
   286e0:	21bfe52e 	bgeu	r4,r6,28678 <__alt_data_end+0xfffe8678>
   286e4:	a80b883a 	mov	r5,r21
   286e8:	9009883a 	mov	r4,r18
   286ec:	00272340 	call	27234 <memmove>
   286f0:	b821883a 	mov	r16,r23
   286f4:	b027883a 	mov	r19,r22
   286f8:	003f8a06 	br	28524 <__alt_data_end+0xfffe8524>
   286fc:	300b883a 	mov	r5,r6
   28700:	dfc00917 	ldw	ra,36(sp)
   28704:	df000817 	ldw	fp,32(sp)
   28708:	ddc00717 	ldw	r23,28(sp)
   2870c:	dd800617 	ldw	r22,24(sp)
   28710:	dd400517 	ldw	r21,20(sp)
   28714:	dd000417 	ldw	r20,16(sp)
   28718:	dcc00317 	ldw	r19,12(sp)
   2871c:	dc800217 	ldw	r18,8(sp)
   28720:	dc400117 	ldw	r17,4(sp)
   28724:	dc000017 	ldw	r16,0(sp)
   28728:	dec00a04 	addi	sp,sp,40
   2872c:	00212901 	jmpi	21290 <_malloc_r>
   28730:	a8c00017 	ldw	r3,0(r21)
   28734:	90c00015 	stw	r3,0(r18)
   28738:	a8c00117 	ldw	r3,4(r21)
   2873c:	90c00115 	stw	r3,4(r18)
   28740:	00c006c4 	movi	r3,27
   28744:	19804536 	bltu	r3,r6,2885c <_realloc_r+0x470>
   28748:	90800204 	addi	r2,r18,8
   2874c:	a8c00204 	addi	r3,r21,8
   28750:	003f6306 	br	284e0 <__alt_data_end+0xfffe84e0>
   28754:	9005883a 	mov	r2,r18
   28758:	a8c00017 	ldw	r3,0(r21)
   2875c:	b821883a 	mov	r16,r23
   28760:	b027883a 	mov	r19,r22
   28764:	10c00015 	stw	r3,0(r2)
   28768:	a8c00117 	ldw	r3,4(r21)
   2876c:	10c00115 	stw	r3,4(r2)
   28770:	a8c00217 	ldw	r3,8(r21)
   28774:	10c00215 	stw	r3,8(r2)
   28778:	003f6a06 	br	28524 <__alt_data_end+0xfffe8524>
   2877c:	9c67883a 	add	r19,r19,r17
   28780:	4445c83a 	sub	r2,r8,r17
   28784:	e4c00215 	stw	r19,8(fp)
   28788:	10800054 	ori	r2,r2,1
   2878c:	98800115 	stw	r2,4(r19)
   28790:	a8bfff17 	ldw	r2,-4(r21)
   28794:	a009883a 	mov	r4,r20
   28798:	1080004c 	andi	r2,r2,1
   2879c:	1462b03a 	or	r17,r2,r17
   287a0:	ac7fff15 	stw	r17,-4(r21)
   287a4:	002df600 	call	2df60 <__malloc_unlock>
   287a8:	a805883a 	mov	r2,r21
   287ac:	003f6b06 	br	2855c <__alt_data_end+0xfffe855c>
   287b0:	a80b883a 	mov	r5,r21
   287b4:	9009883a 	mov	r4,r18
   287b8:	00272340 	call	27234 <memmove>
   287bc:	003f4e06 	br	284f8 <__alt_data_end+0xfffe84f8>
   287c0:	89000404 	addi	r4,r17,16
   287c4:	b93fbc16 	blt	r23,r4,286b8 <__alt_data_end+0xfffe86b8>
   287c8:	b0800317 	ldw	r2,12(r22)
   287cc:	b0c00217 	ldw	r3,8(r22)
   287d0:	81bfff04 	addi	r6,r16,-4
   287d4:	01000904 	movi	r4,36
   287d8:	18800315 	stw	r2,12(r3)
   287dc:	10c00215 	stw	r3,8(r2)
   287e0:	b4800204 	addi	r18,r22,8
   287e4:	21804336 	bltu	r4,r6,288f4 <_realloc_r+0x508>
   287e8:	008004c4 	movi	r2,19
   287ec:	11803f2e 	bgeu	r2,r6,288ec <_realloc_r+0x500>
   287f0:	a8800017 	ldw	r2,0(r21)
   287f4:	b0800215 	stw	r2,8(r22)
   287f8:	a8800117 	ldw	r2,4(r21)
   287fc:	b0800315 	stw	r2,12(r22)
   28800:	008006c4 	movi	r2,27
   28804:	11803f36 	bltu	r2,r6,28904 <_realloc_r+0x518>
   28808:	b0800404 	addi	r2,r22,16
   2880c:	ad400204 	addi	r21,r21,8
   28810:	a8c00017 	ldw	r3,0(r21)
   28814:	10c00015 	stw	r3,0(r2)
   28818:	a8c00117 	ldw	r3,4(r21)
   2881c:	10c00115 	stw	r3,4(r2)
   28820:	a8c00217 	ldw	r3,8(r21)
   28824:	10c00215 	stw	r3,8(r2)
   28828:	b447883a 	add	r3,r22,r17
   2882c:	bc45c83a 	sub	r2,r23,r17
   28830:	e0c00215 	stw	r3,8(fp)
   28834:	10800054 	ori	r2,r2,1
   28838:	18800115 	stw	r2,4(r3)
   2883c:	b0800117 	ldw	r2,4(r22)
   28840:	a009883a 	mov	r4,r20
   28844:	1080004c 	andi	r2,r2,1
   28848:	1462b03a 	or	r17,r2,r17
   2884c:	b4400115 	stw	r17,4(r22)
   28850:	002df600 	call	2df60 <__malloc_unlock>
   28854:	9005883a 	mov	r2,r18
   28858:	003f4006 	br	2855c <__alt_data_end+0xfffe855c>
   2885c:	a8c00217 	ldw	r3,8(r21)
   28860:	90c00215 	stw	r3,8(r18)
   28864:	a8c00317 	ldw	r3,12(r21)
   28868:	90c00315 	stw	r3,12(r18)
   2886c:	30801126 	beq	r6,r2,288b4 <_realloc_r+0x4c8>
   28870:	90800404 	addi	r2,r18,16
   28874:	a8c00404 	addi	r3,r21,16
   28878:	003f1906 	br	284e0 <__alt_data_end+0xfffe84e0>
   2887c:	90ffff17 	ldw	r3,-4(r18)
   28880:	00bfff04 	movi	r2,-4
   28884:	a825883a 	mov	r18,r21
   28888:	1884703a 	and	r2,r3,r2
   2888c:	80a1883a 	add	r16,r16,r2
   28890:	003f2406 	br	28524 <__alt_data_end+0xfffe8524>
   28894:	a8800217 	ldw	r2,8(r21)
   28898:	b0800415 	stw	r2,16(r22)
   2889c:	a8800317 	ldw	r2,12(r21)
   288a0:	b0800515 	stw	r2,20(r22)
   288a4:	31000a26 	beq	r6,r4,288d0 <_realloc_r+0x4e4>
   288a8:	b0800604 	addi	r2,r22,24
   288ac:	ad400404 	addi	r21,r21,16
   288b0:	003fa906 	br	28758 <__alt_data_end+0xfffe8758>
   288b4:	a9000417 	ldw	r4,16(r21)
   288b8:	90800604 	addi	r2,r18,24
   288bc:	a8c00604 	addi	r3,r21,24
   288c0:	91000415 	stw	r4,16(r18)
   288c4:	a9000517 	ldw	r4,20(r21)
   288c8:	91000515 	stw	r4,20(r18)
   288cc:	003f0406 	br	284e0 <__alt_data_end+0xfffe84e0>
   288d0:	a8c00417 	ldw	r3,16(r21)
   288d4:	ad400604 	addi	r21,r21,24
   288d8:	b0800804 	addi	r2,r22,32
   288dc:	b0c00615 	stw	r3,24(r22)
   288e0:	a8ffff17 	ldw	r3,-4(r21)
   288e4:	b0c00715 	stw	r3,28(r22)
   288e8:	003f9b06 	br	28758 <__alt_data_end+0xfffe8758>
   288ec:	9005883a 	mov	r2,r18
   288f0:	003fc706 	br	28810 <__alt_data_end+0xfffe8810>
   288f4:	a80b883a 	mov	r5,r21
   288f8:	9009883a 	mov	r4,r18
   288fc:	00272340 	call	27234 <memmove>
   28900:	003fc906 	br	28828 <__alt_data_end+0xfffe8828>
   28904:	a8800217 	ldw	r2,8(r21)
   28908:	b0800415 	stw	r2,16(r22)
   2890c:	a8800317 	ldw	r2,12(r21)
   28910:	b0800515 	stw	r2,20(r22)
   28914:	31000726 	beq	r6,r4,28934 <_realloc_r+0x548>
   28918:	b0800604 	addi	r2,r22,24
   2891c:	ad400404 	addi	r21,r21,16
   28920:	003fbb06 	br	28810 <__alt_data_end+0xfffe8810>
   28924:	a009883a 	mov	r4,r20
   28928:	002df600 	call	2df60 <__malloc_unlock>
   2892c:	0005883a 	mov	r2,zero
   28930:	003f0a06 	br	2855c <__alt_data_end+0xfffe855c>
   28934:	a8c00417 	ldw	r3,16(r21)
   28938:	ad400604 	addi	r21,r21,24
   2893c:	b0800804 	addi	r2,r22,32
   28940:	b0c00615 	stw	r3,24(r22)
   28944:	a8ffff17 	ldw	r3,-4(r21)
   28948:	b0c00715 	stw	r3,28(r22)
   2894c:	003fb006 	br	28810 <__alt_data_end+0xfffe8810>

00028950 <__fpclassifyd>:
   28950:	00a00034 	movhi	r2,32768
   28954:	10bfffc4 	addi	r2,r2,-1
   28958:	2884703a 	and	r2,r5,r2
   2895c:	10000726 	beq	r2,zero,2897c <__fpclassifyd+0x2c>
   28960:	00fffc34 	movhi	r3,65520
   28964:	019ff834 	movhi	r6,32736
   28968:	28c7883a 	add	r3,r5,r3
   2896c:	31bfffc4 	addi	r6,r6,-1
   28970:	30c00536 	bltu	r6,r3,28988 <__fpclassifyd+0x38>
   28974:	00800104 	movi	r2,4
   28978:	f800283a 	ret
   2897c:	2000021e 	bne	r4,zero,28988 <__fpclassifyd+0x38>
   28980:	00800084 	movi	r2,2
   28984:	f800283a 	ret
   28988:	00dffc34 	movhi	r3,32752
   2898c:	019ff834 	movhi	r6,32736
   28990:	28cb883a 	add	r5,r5,r3
   28994:	31bfffc4 	addi	r6,r6,-1
   28998:	317ff62e 	bgeu	r6,r5,28974 <__alt_data_end+0xfffe8974>
   2899c:	01400434 	movhi	r5,16
   289a0:	297fffc4 	addi	r5,r5,-1
   289a4:	28800236 	bltu	r5,r2,289b0 <__fpclassifyd+0x60>
   289a8:	008000c4 	movi	r2,3
   289ac:	f800283a 	ret
   289b0:	10c00226 	beq	r2,r3,289bc <__fpclassifyd+0x6c>
   289b4:	0005883a 	mov	r2,zero
   289b8:	f800283a 	ret
   289bc:	2005003a 	cmpeq	r2,r4,zero
   289c0:	f800283a 	ret

000289c4 <strcmp>:
   289c4:	2144b03a 	or	r2,r4,r5
   289c8:	108000cc 	andi	r2,r2,3
   289cc:	1000171e 	bne	r2,zero,28a2c <strcmp+0x68>
   289d0:	20800017 	ldw	r2,0(r4)
   289d4:	28c00017 	ldw	r3,0(r5)
   289d8:	10c0141e 	bne	r2,r3,28a2c <strcmp+0x68>
   289dc:	027fbff4 	movhi	r9,65279
   289e0:	4a7fbfc4 	addi	r9,r9,-257
   289e4:	0086303a 	nor	r3,zero,r2
   289e8:	02202074 	movhi	r8,32897
   289ec:	1245883a 	add	r2,r2,r9
   289f0:	42202004 	addi	r8,r8,-32640
   289f4:	10c4703a 	and	r2,r2,r3
   289f8:	1204703a 	and	r2,r2,r8
   289fc:	10000226 	beq	r2,zero,28a08 <strcmp+0x44>
   28a00:	00002306 	br	28a90 <strcmp+0xcc>
   28a04:	1000221e 	bne	r2,zero,28a90 <strcmp+0xcc>
   28a08:	21000104 	addi	r4,r4,4
   28a0c:	20c00017 	ldw	r3,0(r4)
   28a10:	29400104 	addi	r5,r5,4
   28a14:	29800017 	ldw	r6,0(r5)
   28a18:	1a4f883a 	add	r7,r3,r9
   28a1c:	00c4303a 	nor	r2,zero,r3
   28a20:	3884703a 	and	r2,r7,r2
   28a24:	1204703a 	and	r2,r2,r8
   28a28:	19bff626 	beq	r3,r6,28a04 <__alt_data_end+0xfffe8a04>
   28a2c:	20800003 	ldbu	r2,0(r4)
   28a30:	10c03fcc 	andi	r3,r2,255
   28a34:	18c0201c 	xori	r3,r3,128
   28a38:	18ffe004 	addi	r3,r3,-128
   28a3c:	18000c26 	beq	r3,zero,28a70 <strcmp+0xac>
   28a40:	29800007 	ldb	r6,0(r5)
   28a44:	19800326 	beq	r3,r6,28a54 <strcmp+0x90>
   28a48:	00001306 	br	28a98 <strcmp+0xd4>
   28a4c:	29800007 	ldb	r6,0(r5)
   28a50:	11800b1e 	bne	r2,r6,28a80 <strcmp+0xbc>
   28a54:	21000044 	addi	r4,r4,1
   28a58:	20c00003 	ldbu	r3,0(r4)
   28a5c:	29400044 	addi	r5,r5,1
   28a60:	18803fcc 	andi	r2,r3,255
   28a64:	1080201c 	xori	r2,r2,128
   28a68:	10bfe004 	addi	r2,r2,-128
   28a6c:	103ff71e 	bne	r2,zero,28a4c <__alt_data_end+0xfffe8a4c>
   28a70:	0007883a 	mov	r3,zero
   28a74:	28800003 	ldbu	r2,0(r5)
   28a78:	1885c83a 	sub	r2,r3,r2
   28a7c:	f800283a 	ret
   28a80:	28800003 	ldbu	r2,0(r5)
   28a84:	18c03fcc 	andi	r3,r3,255
   28a88:	1885c83a 	sub	r2,r3,r2
   28a8c:	f800283a 	ret
   28a90:	0005883a 	mov	r2,zero
   28a94:	f800283a 	ret
   28a98:	10c03fcc 	andi	r3,r2,255
   28a9c:	003ff506 	br	28a74 <__alt_data_end+0xfffe8a74>

00028aa0 <__sprint_r.part.0>:
   28aa0:	28801917 	ldw	r2,100(r5)
   28aa4:	defff604 	addi	sp,sp,-40
   28aa8:	dd400515 	stw	r21,20(sp)
   28aac:	dfc00915 	stw	ra,36(sp)
   28ab0:	df000815 	stw	fp,32(sp)
   28ab4:	ddc00715 	stw	r23,28(sp)
   28ab8:	dd800615 	stw	r22,24(sp)
   28abc:	dd000415 	stw	r20,16(sp)
   28ac0:	dcc00315 	stw	r19,12(sp)
   28ac4:	dc800215 	stw	r18,8(sp)
   28ac8:	dc400115 	stw	r17,4(sp)
   28acc:	dc000015 	stw	r16,0(sp)
   28ad0:	1088000c 	andi	r2,r2,8192
   28ad4:	302b883a 	mov	r21,r6
   28ad8:	10002e26 	beq	r2,zero,28b94 <__sprint_r.part.0+0xf4>
   28adc:	30800217 	ldw	r2,8(r6)
   28ae0:	35800017 	ldw	r22,0(r6)
   28ae4:	10002926 	beq	r2,zero,28b8c <__sprint_r.part.0+0xec>
   28ae8:	2827883a 	mov	r19,r5
   28aec:	2029883a 	mov	r20,r4
   28af0:	b5c00104 	addi	r23,r22,4
   28af4:	04bfffc4 	movi	r18,-1
   28af8:	bc400017 	ldw	r17,0(r23)
   28afc:	b4000017 	ldw	r16,0(r22)
   28b00:	0039883a 	mov	fp,zero
   28b04:	8822d0ba 	srli	r17,r17,2
   28b08:	8800031e 	bne	r17,zero,28b18 <__sprint_r.part.0+0x78>
   28b0c:	00001806 	br	28b70 <__sprint_r.part.0+0xd0>
   28b10:	84000104 	addi	r16,r16,4
   28b14:	8f001526 	beq	r17,fp,28b6c <__sprint_r.part.0+0xcc>
   28b18:	81400017 	ldw	r5,0(r16)
   28b1c:	980d883a 	mov	r6,r19
   28b20:	a009883a 	mov	r4,r20
   28b24:	002a3100 	call	2a310 <_fputwc_r>
   28b28:	e7000044 	addi	fp,fp,1
   28b2c:	14bff81e 	bne	r2,r18,28b10 <__alt_data_end+0xfffe8b10>
   28b30:	9005883a 	mov	r2,r18
   28b34:	a8000215 	stw	zero,8(r21)
   28b38:	a8000115 	stw	zero,4(r21)
   28b3c:	dfc00917 	ldw	ra,36(sp)
   28b40:	df000817 	ldw	fp,32(sp)
   28b44:	ddc00717 	ldw	r23,28(sp)
   28b48:	dd800617 	ldw	r22,24(sp)
   28b4c:	dd400517 	ldw	r21,20(sp)
   28b50:	dd000417 	ldw	r20,16(sp)
   28b54:	dcc00317 	ldw	r19,12(sp)
   28b58:	dc800217 	ldw	r18,8(sp)
   28b5c:	dc400117 	ldw	r17,4(sp)
   28b60:	dc000017 	ldw	r16,0(sp)
   28b64:	dec00a04 	addi	sp,sp,40
   28b68:	f800283a 	ret
   28b6c:	a8800217 	ldw	r2,8(r21)
   28b70:	8c63883a 	add	r17,r17,r17
   28b74:	8c63883a 	add	r17,r17,r17
   28b78:	1445c83a 	sub	r2,r2,r17
   28b7c:	a8800215 	stw	r2,8(r21)
   28b80:	b5800204 	addi	r22,r22,8
   28b84:	bdc00204 	addi	r23,r23,8
   28b88:	103fdb1e 	bne	r2,zero,28af8 <__alt_data_end+0xfffe8af8>
   28b8c:	0005883a 	mov	r2,zero
   28b90:	003fe806 	br	28b34 <__alt_data_end+0xfffe8b34>
   28b94:	0026be80 	call	26be8 <__sfvwrite_r>
   28b98:	003fe606 	br	28b34 <__alt_data_end+0xfffe8b34>

00028b9c <__sprint_r>:
   28b9c:	30c00217 	ldw	r3,8(r6)
   28ba0:	18000126 	beq	r3,zero,28ba8 <__sprint_r+0xc>
   28ba4:	0028aa01 	jmpi	28aa0 <__sprint_r.part.0>
   28ba8:	30000115 	stw	zero,4(r6)
   28bac:	0005883a 	mov	r2,zero
   28bb0:	f800283a 	ret

00028bb4 <___vfiprintf_internal_r>:
   28bb4:	deffc904 	addi	sp,sp,-220
   28bb8:	df003515 	stw	fp,212(sp)
   28bbc:	dd003115 	stw	r20,196(sp)
   28bc0:	dfc03615 	stw	ra,216(sp)
   28bc4:	ddc03415 	stw	r23,208(sp)
   28bc8:	dd803315 	stw	r22,204(sp)
   28bcc:	dd403215 	stw	r21,200(sp)
   28bd0:	dcc03015 	stw	r19,192(sp)
   28bd4:	dc802f15 	stw	r18,188(sp)
   28bd8:	dc402e15 	stw	r17,184(sp)
   28bdc:	dc002d15 	stw	r16,180(sp)
   28be0:	d9002015 	stw	r4,128(sp)
   28be4:	d9c02215 	stw	r7,136(sp)
   28be8:	2829883a 	mov	r20,r5
   28bec:	3039883a 	mov	fp,r6
   28bf0:	20000226 	beq	r4,zero,28bfc <___vfiprintf_internal_r+0x48>
   28bf4:	20800e17 	ldw	r2,56(r4)
   28bf8:	1000cf26 	beq	r2,zero,28f38 <___vfiprintf_internal_r+0x384>
   28bfc:	a080030b 	ldhu	r2,12(r20)
   28c00:	10c8000c 	andi	r3,r2,8192
   28c04:	1800061e 	bne	r3,zero,28c20 <___vfiprintf_internal_r+0x6c>
   28c08:	a1001917 	ldw	r4,100(r20)
   28c0c:	00f7ffc4 	movi	r3,-8193
   28c10:	10880014 	ori	r2,r2,8192
   28c14:	20c6703a 	and	r3,r4,r3
   28c18:	a080030d 	sth	r2,12(r20)
   28c1c:	a0c01915 	stw	r3,100(r20)
   28c20:	10c0020c 	andi	r3,r2,8
   28c24:	1800a926 	beq	r3,zero,28ecc <___vfiprintf_internal_r+0x318>
   28c28:	a0c00417 	ldw	r3,16(r20)
   28c2c:	1800a726 	beq	r3,zero,28ecc <___vfiprintf_internal_r+0x318>
   28c30:	1080068c 	andi	r2,r2,26
   28c34:	00c00284 	movi	r3,10
   28c38:	10c0ac26 	beq	r2,r3,28eec <___vfiprintf_internal_r+0x338>
   28c3c:	da801a04 	addi	r10,sp,104
   28c40:	da801e15 	stw	r10,120(sp)
   28c44:	d8801e17 	ldw	r2,120(sp)
   28c48:	da8019c4 	addi	r10,sp,103
   28c4c:	058000f4 	movhi	r22,3
   28c50:	05c000f4 	movhi	r23,3
   28c54:	da801f15 	stw	r10,124(sp)
   28c58:	1295c83a 	sub	r10,r2,r10
   28c5c:	b583c504 	addi	r22,r22,3860
   28c60:	bdc3c104 	addi	r23,r23,3844
   28c64:	dec01a15 	stw	sp,104(sp)
   28c68:	d8001c15 	stw	zero,112(sp)
   28c6c:	d8001b15 	stw	zero,108(sp)
   28c70:	d8002615 	stw	zero,152(sp)
   28c74:	d8002315 	stw	zero,140(sp)
   28c78:	da802715 	stw	r10,156(sp)
   28c7c:	d811883a 	mov	r8,sp
   28c80:	dd002115 	stw	r20,132(sp)
   28c84:	e021883a 	mov	r16,fp
   28c88:	80800007 	ldb	r2,0(r16)
   28c8c:	1003ea26 	beq	r2,zero,29c38 <___vfiprintf_internal_r+0x1084>
   28c90:	00c00944 	movi	r3,37
   28c94:	8025883a 	mov	r18,r16
   28c98:	10c0021e 	bne	r2,r3,28ca4 <___vfiprintf_internal_r+0xf0>
   28c9c:	00001606 	br	28cf8 <___vfiprintf_internal_r+0x144>
   28ca0:	10c00326 	beq	r2,r3,28cb0 <___vfiprintf_internal_r+0xfc>
   28ca4:	94800044 	addi	r18,r18,1
   28ca8:	90800007 	ldb	r2,0(r18)
   28cac:	103ffc1e 	bne	r2,zero,28ca0 <__alt_data_end+0xfffe8ca0>
   28cb0:	9423c83a 	sub	r17,r18,r16
   28cb4:	88001026 	beq	r17,zero,28cf8 <___vfiprintf_internal_r+0x144>
   28cb8:	d8c01c17 	ldw	r3,112(sp)
   28cbc:	d8801b17 	ldw	r2,108(sp)
   28cc0:	44000015 	stw	r16,0(r8)
   28cc4:	88c7883a 	add	r3,r17,r3
   28cc8:	10800044 	addi	r2,r2,1
   28ccc:	44400115 	stw	r17,4(r8)
   28cd0:	d8c01c15 	stw	r3,112(sp)
   28cd4:	d8801b15 	stw	r2,108(sp)
   28cd8:	010001c4 	movi	r4,7
   28cdc:	2080760e 	bge	r4,r2,28eb8 <___vfiprintf_internal_r+0x304>
   28ce0:	1803821e 	bne	r3,zero,29aec <___vfiprintf_internal_r+0xf38>
   28ce4:	da802317 	ldw	r10,140(sp)
   28ce8:	d8001b15 	stw	zero,108(sp)
   28cec:	d811883a 	mov	r8,sp
   28cf0:	5455883a 	add	r10,r10,r17
   28cf4:	da802315 	stw	r10,140(sp)
   28cf8:	90800007 	ldb	r2,0(r18)
   28cfc:	10044626 	beq	r2,zero,29e18 <___vfiprintf_internal_r+0x1264>
   28d00:	90c00047 	ldb	r3,1(r18)
   28d04:	94000044 	addi	r16,r18,1
   28d08:	d8001d85 	stb	zero,118(sp)
   28d0c:	0009883a 	mov	r4,zero
   28d10:	000f883a 	mov	r7,zero
   28d14:	027fffc4 	movi	r9,-1
   28d18:	0023883a 	mov	r17,zero
   28d1c:	0029883a 	mov	r20,zero
   28d20:	01401604 	movi	r5,88
   28d24:	01800244 	movi	r6,9
   28d28:	03400a84 	movi	r13,42
   28d2c:	03001b04 	movi	r12,108
   28d30:	84000044 	addi	r16,r16,1
   28d34:	18bff804 	addi	r2,r3,-32
   28d38:	28827336 	bltu	r5,r2,29708 <___vfiprintf_internal_r+0xb54>
   28d3c:	100490ba 	slli	r2,r2,2
   28d40:	028000f4 	movhi	r10,3
   28d44:	52a35504 	addi	r10,r10,-29356
   28d48:	1285883a 	add	r2,r2,r10
   28d4c:	10800017 	ldw	r2,0(r2)
   28d50:	1000683a 	jmp	r2
   28d54:	0002943c 	xorhi	zero,zero,2640
   28d58:	00029708 	cmpgei	zero,zero,2652
   28d5c:	00029708 	cmpgei	zero,zero,2652
   28d60:	0002945c 	xori	zero,zero,2641
   28d64:	00029708 	cmpgei	zero,zero,2652
   28d68:	00029708 	cmpgei	zero,zero,2652
   28d6c:	00029708 	cmpgei	zero,zero,2652
   28d70:	00029708 	cmpgei	zero,zero,2652
   28d74:	00029708 	cmpgei	zero,zero,2652
   28d78:	00029708 	cmpgei	zero,zero,2652
   28d7c:	00029644 	movi	zero,2649
   28d80:	00029660 	cmpeqi	zero,zero,2649
   28d84:	00029708 	cmpgei	zero,zero,2652
   28d88:	00028f48 	cmpgei	zero,zero,2621
   28d8c:	00029670 	cmpltui	zero,zero,2649
   28d90:	00029708 	cmpgei	zero,zero,2652
   28d94:	00029468 	cmpgeui	zero,zero,2641
   28d98:	00029474 	movhi	zero,2641
   28d9c:	00029474 	movhi	zero,2641
   28da0:	00029474 	movhi	zero,2641
   28da4:	00029474 	movhi	zero,2641
   28da8:	00029474 	movhi	zero,2641
   28dac:	00029474 	movhi	zero,2641
   28db0:	00029474 	movhi	zero,2641
   28db4:	00029474 	movhi	zero,2641
   28db8:	00029474 	movhi	zero,2641
   28dbc:	00029708 	cmpgei	zero,zero,2652
   28dc0:	00029708 	cmpgei	zero,zero,2652
   28dc4:	00029708 	cmpgei	zero,zero,2652
   28dc8:	00029708 	cmpgei	zero,zero,2652
   28dcc:	00029708 	cmpgei	zero,zero,2652
   28dd0:	00029708 	cmpgei	zero,zero,2652
   28dd4:	00029708 	cmpgei	zero,zero,2652
   28dd8:	00029708 	cmpgei	zero,zero,2652
   28ddc:	00029708 	cmpgei	zero,zero,2652
   28de0:	00029708 	cmpgei	zero,zero,2652
   28de4:	000294a0 	cmpeqi	zero,zero,2642
   28de8:	00029708 	cmpgei	zero,zero,2652
   28dec:	00029708 	cmpgei	zero,zero,2652
   28df0:	00029708 	cmpgei	zero,zero,2652
   28df4:	00029708 	cmpgei	zero,zero,2652
   28df8:	00029708 	cmpgei	zero,zero,2652
   28dfc:	00029708 	cmpgei	zero,zero,2652
   28e00:	00029708 	cmpgei	zero,zero,2652
   28e04:	00029708 	cmpgei	zero,zero,2652
   28e08:	00029708 	cmpgei	zero,zero,2652
   28e0c:	00029708 	cmpgei	zero,zero,2652
   28e10:	000294d8 	cmpnei	zero,zero,2643
   28e14:	00029708 	cmpgei	zero,zero,2652
   28e18:	00029708 	cmpgei	zero,zero,2652
   28e1c:	00029708 	cmpgei	zero,zero,2652
   28e20:	00029708 	cmpgei	zero,zero,2652
   28e24:	00029708 	cmpgei	zero,zero,2652
   28e28:	00029530 	cmpltui	zero,zero,2644
   28e2c:	00029708 	cmpgei	zero,zero,2652
   28e30:	00029708 	cmpgei	zero,zero,2652
   28e34:	000295a0 	cmpeqi	zero,zero,2646
   28e38:	00029708 	cmpgei	zero,zero,2652
   28e3c:	00029708 	cmpgei	zero,zero,2652
   28e40:	00029708 	cmpgei	zero,zero,2652
   28e44:	00029708 	cmpgei	zero,zero,2652
   28e48:	00029708 	cmpgei	zero,zero,2652
   28e4c:	00029708 	cmpgei	zero,zero,2652
   28e50:	00029708 	cmpgei	zero,zero,2652
   28e54:	00029708 	cmpgei	zero,zero,2652
   28e58:	00029708 	cmpgei	zero,zero,2652
   28e5c:	00029708 	cmpgei	zero,zero,2652
   28e60:	0002934c 	andi	zero,zero,2637
   28e64:	00029378 	rdprs	zero,zero,2637
   28e68:	00029708 	cmpgei	zero,zero,2652
   28e6c:	00029708 	cmpgei	zero,zero,2652
   28e70:	00029708 	cmpgei	zero,zero,2652
   28e74:	000296b0 	cmpltui	zero,zero,2650
   28e78:	00029378 	rdprs	zero,zero,2637
   28e7c:	00029708 	cmpgei	zero,zero,2652
   28e80:	00029708 	cmpgei	zero,zero,2652
   28e84:	0002920c 	andi	zero,zero,2632
   28e88:	00029708 	cmpgei	zero,zero,2652
   28e8c:	0002921c 	xori	zero,zero,2632
   28e90:	00029258 	cmpnei	zero,zero,2633
   28e94:	00028f54 	movui	zero,2621
   28e98:	00029200 	call	2920 <__alt_mem_onchip_memory2_0-0x1d6e0>
   28e9c:	00029708 	cmpgei	zero,zero,2652
   28ea0:	000295dc 	xori	zero,zero,2647
   28ea4:	00029708 	cmpgei	zero,zero,2652
   28ea8:	00029634 	movhi	zero,2648
   28eac:	00029708 	cmpgei	zero,zero,2652
   28eb0:	00029708 	cmpgei	zero,zero,2652
   28eb4:	000292f8 	rdprs	zero,zero,2635
   28eb8:	42000204 	addi	r8,r8,8
   28ebc:	da802317 	ldw	r10,140(sp)
   28ec0:	5455883a 	add	r10,r10,r17
   28ec4:	da802315 	stw	r10,140(sp)
   28ec8:	003f8b06 	br	28cf8 <__alt_data_end+0xfffe8cf8>
   28ecc:	d9002017 	ldw	r4,128(sp)
   28ed0:	a00b883a 	mov	r5,r20
   28ed4:	002492c0 	call	2492c <__swsetup_r>
   28ed8:	1003b11e 	bne	r2,zero,29da0 <___vfiprintf_internal_r+0x11ec>
   28edc:	a080030b 	ldhu	r2,12(r20)
   28ee0:	00c00284 	movi	r3,10
   28ee4:	1080068c 	andi	r2,r2,26
   28ee8:	10ff541e 	bne	r2,r3,28c3c <__alt_data_end+0xfffe8c3c>
   28eec:	a080038f 	ldh	r2,14(r20)
   28ef0:	103f5216 	blt	r2,zero,28c3c <__alt_data_end+0xfffe8c3c>
   28ef4:	d9c02217 	ldw	r7,136(sp)
   28ef8:	d9002017 	ldw	r4,128(sp)
   28efc:	e00d883a 	mov	r6,fp
   28f00:	a00b883a 	mov	r5,r20
   28f04:	002a02c0 	call	2a02c <__sbprintf>
   28f08:	dfc03617 	ldw	ra,216(sp)
   28f0c:	df003517 	ldw	fp,212(sp)
   28f10:	ddc03417 	ldw	r23,208(sp)
   28f14:	dd803317 	ldw	r22,204(sp)
   28f18:	dd403217 	ldw	r21,200(sp)
   28f1c:	dd003117 	ldw	r20,196(sp)
   28f20:	dcc03017 	ldw	r19,192(sp)
   28f24:	dc802f17 	ldw	r18,188(sp)
   28f28:	dc402e17 	ldw	r17,184(sp)
   28f2c:	dc002d17 	ldw	r16,180(sp)
   28f30:	dec03704 	addi	sp,sp,220
   28f34:	f800283a 	ret
   28f38:	00208c80 	call	208c8 <__sinit>
   28f3c:	003f2f06 	br	28bfc <__alt_data_end+0xfffe8bfc>
   28f40:	0463c83a 	sub	r17,zero,r17
   28f44:	d8802215 	stw	r2,136(sp)
   28f48:	a5000114 	ori	r20,r20,4
   28f4c:	80c00007 	ldb	r3,0(r16)
   28f50:	003f7706 	br	28d30 <__alt_data_end+0xfffe8d30>
   28f54:	00800c04 	movi	r2,48
   28f58:	da802217 	ldw	r10,136(sp)
   28f5c:	d8801d05 	stb	r2,116(sp)
   28f60:	00801e04 	movi	r2,120
   28f64:	d8801d45 	stb	r2,117(sp)
   28f68:	d8001d85 	stb	zero,118(sp)
   28f6c:	50c00104 	addi	r3,r10,4
   28f70:	54800017 	ldw	r18,0(r10)
   28f74:	0027883a 	mov	r19,zero
   28f78:	a0800094 	ori	r2,r20,2
   28f7c:	48030b16 	blt	r9,zero,29bac <___vfiprintf_internal_r+0xff8>
   28f80:	00bfdfc4 	movi	r2,-129
   28f84:	a096703a 	and	r11,r20,r2
   28f88:	d8c02215 	stw	r3,136(sp)
   28f8c:	5d000094 	ori	r20,r11,2
   28f90:	90032b1e 	bne	r18,zero,29c40 <___vfiprintf_internal_r+0x108c>
   28f94:	008000f4 	movhi	r2,3
   28f98:	10836104 	addi	r2,r2,3460
   28f9c:	d8802615 	stw	r2,152(sp)
   28fa0:	0039883a 	mov	fp,zero
   28fa4:	48017b1e 	bne	r9,zero,29594 <___vfiprintf_internal_r+0x9e0>
   28fa8:	0013883a 	mov	r9,zero
   28fac:	0027883a 	mov	r19,zero
   28fb0:	dd401a04 	addi	r21,sp,104
   28fb4:	4825883a 	mov	r18,r9
   28fb8:	4cc0010e 	bge	r9,r19,28fc0 <___vfiprintf_internal_r+0x40c>
   28fbc:	9825883a 	mov	r18,r19
   28fc0:	e7003fcc 	andi	fp,fp,255
   28fc4:	e700201c 	xori	fp,fp,128
   28fc8:	e73fe004 	addi	fp,fp,-128
   28fcc:	e0000126 	beq	fp,zero,28fd4 <___vfiprintf_internal_r+0x420>
   28fd0:	94800044 	addi	r18,r18,1
   28fd4:	a380008c 	andi	r14,r20,2
   28fd8:	70000126 	beq	r14,zero,28fe0 <___vfiprintf_internal_r+0x42c>
   28fdc:	94800084 	addi	r18,r18,2
   28fe0:	a700210c 	andi	fp,r20,132
   28fe4:	e001df1e 	bne	fp,zero,29764 <___vfiprintf_internal_r+0xbb0>
   28fe8:	8c87c83a 	sub	r3,r17,r18
   28fec:	00c1dd0e 	bge	zero,r3,29764 <___vfiprintf_internal_r+0xbb0>
   28ff0:	01c00404 	movi	r7,16
   28ff4:	d8801c17 	ldw	r2,112(sp)
   28ff8:	38c3ad0e 	bge	r7,r3,29eb0 <___vfiprintf_internal_r+0x12fc>
   28ffc:	028000f4 	movhi	r10,3
   29000:	5283c504 	addi	r10,r10,3860
   29004:	dc002915 	stw	r16,164(sp)
   29008:	d9801b17 	ldw	r6,108(sp)
   2900c:	da802415 	stw	r10,144(sp)
   29010:	03c001c4 	movi	r15,7
   29014:	da402515 	stw	r9,148(sp)
   29018:	db802815 	stw	r14,160(sp)
   2901c:	1821883a 	mov	r16,r3
   29020:	00000506 	br	29038 <___vfiprintf_internal_r+0x484>
   29024:	31400084 	addi	r5,r6,2
   29028:	42000204 	addi	r8,r8,8
   2902c:	200d883a 	mov	r6,r4
   29030:	843ffc04 	addi	r16,r16,-16
   29034:	3c000d0e 	bge	r7,r16,2906c <___vfiprintf_internal_r+0x4b8>
   29038:	10800404 	addi	r2,r2,16
   2903c:	31000044 	addi	r4,r6,1
   29040:	45800015 	stw	r22,0(r8)
   29044:	41c00115 	stw	r7,4(r8)
   29048:	d8801c15 	stw	r2,112(sp)
   2904c:	d9001b15 	stw	r4,108(sp)
   29050:	793ff40e 	bge	r15,r4,29024 <__alt_data_end+0xfffe9024>
   29054:	1001b51e 	bne	r2,zero,2972c <___vfiprintf_internal_r+0xb78>
   29058:	843ffc04 	addi	r16,r16,-16
   2905c:	000d883a 	mov	r6,zero
   29060:	01400044 	movi	r5,1
   29064:	d811883a 	mov	r8,sp
   29068:	3c3ff316 	blt	r7,r16,29038 <__alt_data_end+0xfffe9038>
   2906c:	8007883a 	mov	r3,r16
   29070:	da402517 	ldw	r9,148(sp)
   29074:	db802817 	ldw	r14,160(sp)
   29078:	dc002917 	ldw	r16,164(sp)
   2907c:	da802417 	ldw	r10,144(sp)
   29080:	1885883a 	add	r2,r3,r2
   29084:	40c00115 	stw	r3,4(r8)
   29088:	42800015 	stw	r10,0(r8)
   2908c:	d8801c15 	stw	r2,112(sp)
   29090:	d9401b15 	stw	r5,108(sp)
   29094:	00c001c4 	movi	r3,7
   29098:	19426016 	blt	r3,r5,29a1c <___vfiprintf_internal_r+0xe68>
   2909c:	d8c01d87 	ldb	r3,118(sp)
   290a0:	42000204 	addi	r8,r8,8
   290a4:	29000044 	addi	r4,r5,1
   290a8:	1801b31e 	bne	r3,zero,29778 <___vfiprintf_internal_r+0xbc4>
   290ac:	7001c026 	beq	r14,zero,297b0 <___vfiprintf_internal_r+0xbfc>
   290b0:	d8c01d04 	addi	r3,sp,116
   290b4:	10800084 	addi	r2,r2,2
   290b8:	40c00015 	stw	r3,0(r8)
   290bc:	00c00084 	movi	r3,2
   290c0:	40c00115 	stw	r3,4(r8)
   290c4:	d8801c15 	stw	r2,112(sp)
   290c8:	d9001b15 	stw	r4,108(sp)
   290cc:	00c001c4 	movi	r3,7
   290d0:	1902650e 	bge	r3,r4,29a68 <___vfiprintf_internal_r+0xeb4>
   290d4:	10029a1e 	bne	r2,zero,29b40 <___vfiprintf_internal_r+0xf8c>
   290d8:	00c02004 	movi	r3,128
   290dc:	01000044 	movi	r4,1
   290e0:	000b883a 	mov	r5,zero
   290e4:	d811883a 	mov	r8,sp
   290e8:	e0c1b31e 	bne	fp,r3,297b8 <___vfiprintf_internal_r+0xc04>
   290ec:	8cb9c83a 	sub	fp,r17,r18
   290f0:	0701b10e 	bge	zero,fp,297b8 <___vfiprintf_internal_r+0xc04>
   290f4:	01c00404 	movi	r7,16
   290f8:	3f03890e 	bge	r7,fp,29f20 <___vfiprintf_internal_r+0x136c>
   290fc:	00c000f4 	movhi	r3,3
   29100:	18c3c104 	addi	r3,r3,3844
   29104:	d8c02415 	stw	r3,144(sp)
   29108:	8007883a 	mov	r3,r16
   2910c:	034001c4 	movi	r13,7
   29110:	e021883a 	mov	r16,fp
   29114:	da402515 	stw	r9,148(sp)
   29118:	1839883a 	mov	fp,r3
   2911c:	00000506 	br	29134 <___vfiprintf_internal_r+0x580>
   29120:	29800084 	addi	r6,r5,2
   29124:	42000204 	addi	r8,r8,8
   29128:	180b883a 	mov	r5,r3
   2912c:	843ffc04 	addi	r16,r16,-16
   29130:	3c000d0e 	bge	r7,r16,29168 <___vfiprintf_internal_r+0x5b4>
   29134:	10800404 	addi	r2,r2,16
   29138:	28c00044 	addi	r3,r5,1
   2913c:	45c00015 	stw	r23,0(r8)
   29140:	41c00115 	stw	r7,4(r8)
   29144:	d8801c15 	stw	r2,112(sp)
   29148:	d8c01b15 	stw	r3,108(sp)
   2914c:	68fff40e 	bge	r13,r3,29120 <__alt_data_end+0xfffe9120>
   29150:	1002241e 	bne	r2,zero,299e4 <___vfiprintf_internal_r+0xe30>
   29154:	843ffc04 	addi	r16,r16,-16
   29158:	01800044 	movi	r6,1
   2915c:	000b883a 	mov	r5,zero
   29160:	d811883a 	mov	r8,sp
   29164:	3c3ff316 	blt	r7,r16,29134 <__alt_data_end+0xfffe9134>
   29168:	da402517 	ldw	r9,148(sp)
   2916c:	e007883a 	mov	r3,fp
   29170:	8039883a 	mov	fp,r16
   29174:	1821883a 	mov	r16,r3
   29178:	d8c02417 	ldw	r3,144(sp)
   2917c:	1705883a 	add	r2,r2,fp
   29180:	47000115 	stw	fp,4(r8)
   29184:	40c00015 	stw	r3,0(r8)
   29188:	d8801c15 	stw	r2,112(sp)
   2918c:	d9801b15 	stw	r6,108(sp)
   29190:	00c001c4 	movi	r3,7
   29194:	19827616 	blt	r3,r6,29b70 <___vfiprintf_internal_r+0xfbc>
   29198:	4cf9c83a 	sub	fp,r9,r19
   2919c:	42000204 	addi	r8,r8,8
   291a0:	31000044 	addi	r4,r6,1
   291a4:	300b883a 	mov	r5,r6
   291a8:	07018516 	blt	zero,fp,297c0 <___vfiprintf_internal_r+0xc0c>
   291ac:	9885883a 	add	r2,r19,r2
   291b0:	45400015 	stw	r21,0(r8)
   291b4:	44c00115 	stw	r19,4(r8)
   291b8:	d8801c15 	stw	r2,112(sp)
   291bc:	d9001b15 	stw	r4,108(sp)
   291c0:	00c001c4 	movi	r3,7
   291c4:	1901dd0e 	bge	r3,r4,2993c <___vfiprintf_internal_r+0xd88>
   291c8:	1002401e 	bne	r2,zero,29acc <___vfiprintf_internal_r+0xf18>
   291cc:	d8001b15 	stw	zero,108(sp)
   291d0:	a2c0010c 	andi	r11,r20,4
   291d4:	58000226 	beq	r11,zero,291e0 <___vfiprintf_internal_r+0x62c>
   291d8:	8ca7c83a 	sub	r19,r17,r18
   291dc:	04c2f216 	blt	zero,r19,29da8 <___vfiprintf_internal_r+0x11f4>
   291e0:	8c80010e 	bge	r17,r18,291e8 <___vfiprintf_internal_r+0x634>
   291e4:	9023883a 	mov	r17,r18
   291e8:	da802317 	ldw	r10,140(sp)
   291ec:	5455883a 	add	r10,r10,r17
   291f0:	da802315 	stw	r10,140(sp)
   291f4:	d8001b15 	stw	zero,108(sp)
   291f8:	d811883a 	mov	r8,sp
   291fc:	003ea206 	br	28c88 <__alt_data_end+0xfffe8c88>
   29200:	a5000814 	ori	r20,r20,32
   29204:	80c00007 	ldb	r3,0(r16)
   29208:	003ec906 	br	28d30 <__alt_data_end+0xfffe8d30>
   2920c:	80c00007 	ldb	r3,0(r16)
   29210:	1b030926 	beq	r3,r12,29e38 <___vfiprintf_internal_r+0x1284>
   29214:	a5000414 	ori	r20,r20,16
   29218:	003ec506 	br	28d30 <__alt_data_end+0xfffe8d30>
   2921c:	21003fcc 	andi	r4,r4,255
   29220:	20035e1e 	bne	r4,zero,29f9c <___vfiprintf_internal_r+0x13e8>
   29224:	a080080c 	andi	r2,r20,32
   29228:	1002a526 	beq	r2,zero,29cc0 <___vfiprintf_internal_r+0x110c>
   2922c:	da802217 	ldw	r10,136(sp)
   29230:	50800017 	ldw	r2,0(r10)
   29234:	da802317 	ldw	r10,140(sp)
   29238:	5007d7fa 	srai	r3,r10,31
   2923c:	da802217 	ldw	r10,136(sp)
   29240:	10c00115 	stw	r3,4(r2)
   29244:	52800104 	addi	r10,r10,4
   29248:	da802215 	stw	r10,136(sp)
   2924c:	da802317 	ldw	r10,140(sp)
   29250:	12800015 	stw	r10,0(r2)
   29254:	003e8c06 	br	28c88 <__alt_data_end+0xfffe8c88>
   29258:	21003fcc 	andi	r4,r4,255
   2925c:	2003511e 	bne	r4,zero,29fa4 <___vfiprintf_internal_r+0x13f0>
   29260:	a080080c 	andi	r2,r20,32
   29264:	1000a126 	beq	r2,zero,294ec <___vfiprintf_internal_r+0x938>
   29268:	da802217 	ldw	r10,136(sp)
   2926c:	d8001d85 	stb	zero,118(sp)
   29270:	50800204 	addi	r2,r10,8
   29274:	54800017 	ldw	r18,0(r10)
   29278:	54c00117 	ldw	r19,4(r10)
   2927c:	4802b416 	blt	r9,zero,29d50 <___vfiprintf_internal_r+0x119c>
   29280:	013fdfc4 	movi	r4,-129
   29284:	94c6b03a 	or	r3,r18,r19
   29288:	d8802215 	stw	r2,136(sp)
   2928c:	a128703a 	and	r20,r20,r4
   29290:	1800a226 	beq	r3,zero,2951c <___vfiprintf_internal_r+0x968>
   29294:	0039883a 	mov	fp,zero
   29298:	dd401a04 	addi	r21,sp,104
   2929c:	9006d0fa 	srli	r3,r18,3
   292a0:	9808977a 	slli	r4,r19,29
   292a4:	9826d0fa 	srli	r19,r19,3
   292a8:	948001cc 	andi	r18,r18,7
   292ac:	90800c04 	addi	r2,r18,48
   292b0:	ad7fffc4 	addi	r21,r21,-1
   292b4:	20e4b03a 	or	r18,r4,r3
   292b8:	a8800005 	stb	r2,0(r21)
   292bc:	94c6b03a 	or	r3,r18,r19
   292c0:	183ff61e 	bne	r3,zero,2929c <__alt_data_end+0xfffe929c>
   292c4:	a0c0004c 	andi	r3,r20,1
   292c8:	18005926 	beq	r3,zero,29430 <___vfiprintf_internal_r+0x87c>
   292cc:	10803fcc 	andi	r2,r2,255
   292d0:	1080201c 	xori	r2,r2,128
   292d4:	10bfe004 	addi	r2,r2,-128
   292d8:	00c00c04 	movi	r3,48
   292dc:	10c05426 	beq	r2,r3,29430 <___vfiprintf_internal_r+0x87c>
   292e0:	da801e17 	ldw	r10,120(sp)
   292e4:	a8bfffc4 	addi	r2,r21,-1
   292e8:	a8ffffc5 	stb	r3,-1(r21)
   292ec:	50a7c83a 	sub	r19,r10,r2
   292f0:	102b883a 	mov	r21,r2
   292f4:	003f2f06 	br	28fb4 <__alt_data_end+0xfffe8fb4>
   292f8:	21003fcc 	andi	r4,r4,255
   292fc:	2003421e 	bne	r4,zero,2a008 <___vfiprintf_internal_r+0x1454>
   29300:	008000f4 	movhi	r2,3
   29304:	10836104 	addi	r2,r2,3460
   29308:	d8802615 	stw	r2,152(sp)
   2930c:	a080080c 	andi	r2,r20,32
   29310:	1000aa26 	beq	r2,zero,295bc <___vfiprintf_internal_r+0xa08>
   29314:	da802217 	ldw	r10,136(sp)
   29318:	54800017 	ldw	r18,0(r10)
   2931c:	54c00117 	ldw	r19,4(r10)
   29320:	52800204 	addi	r10,r10,8
   29324:	da802215 	stw	r10,136(sp)
   29328:	a080004c 	andi	r2,r20,1
   2932c:	1001d226 	beq	r2,zero,29a78 <___vfiprintf_internal_r+0xec4>
   29330:	94c4b03a 	or	r2,r18,r19
   29334:	1002351e 	bne	r2,zero,29c0c <___vfiprintf_internal_r+0x1058>
   29338:	d8001d85 	stb	zero,118(sp)
   2933c:	48022216 	blt	r9,zero,29bc8 <___vfiprintf_internal_r+0x1014>
   29340:	00bfdfc4 	movi	r2,-129
   29344:	a0a8703a 	and	r20,r20,r2
   29348:	003f1506 	br	28fa0 <__alt_data_end+0xfffe8fa0>
   2934c:	da802217 	ldw	r10,136(sp)
   29350:	04800044 	movi	r18,1
   29354:	d8001d85 	stb	zero,118(sp)
   29358:	50800017 	ldw	r2,0(r10)
   2935c:	52800104 	addi	r10,r10,4
   29360:	da802215 	stw	r10,136(sp)
   29364:	d8801005 	stb	r2,64(sp)
   29368:	9027883a 	mov	r19,r18
   2936c:	dd401004 	addi	r21,sp,64
   29370:	0013883a 	mov	r9,zero
   29374:	003f1706 	br	28fd4 <__alt_data_end+0xfffe8fd4>
   29378:	21003fcc 	andi	r4,r4,255
   2937c:	2003201e 	bne	r4,zero,2a000 <___vfiprintf_internal_r+0x144c>
   29380:	a080080c 	andi	r2,r20,32
   29384:	10004b26 	beq	r2,zero,294b4 <___vfiprintf_internal_r+0x900>
   29388:	da802217 	ldw	r10,136(sp)
   2938c:	50800117 	ldw	r2,4(r10)
   29390:	54800017 	ldw	r18,0(r10)
   29394:	52800204 	addi	r10,r10,8
   29398:	da802215 	stw	r10,136(sp)
   2939c:	1027883a 	mov	r19,r2
   293a0:	10022c16 	blt	r2,zero,29c54 <___vfiprintf_internal_r+0x10a0>
   293a4:	df001d83 	ldbu	fp,118(sp)
   293a8:	48007216 	blt	r9,zero,29574 <___vfiprintf_internal_r+0x9c0>
   293ac:	00ffdfc4 	movi	r3,-129
   293b0:	94c4b03a 	or	r2,r18,r19
   293b4:	a0e8703a 	and	r20,r20,r3
   293b8:	1000cc26 	beq	r2,zero,296ec <___vfiprintf_internal_r+0xb38>
   293bc:	98021026 	beq	r19,zero,29c00 <___vfiprintf_internal_r+0x104c>
   293c0:	dc402415 	stw	r17,144(sp)
   293c4:	dc002515 	stw	r16,148(sp)
   293c8:	9823883a 	mov	r17,r19
   293cc:	9021883a 	mov	r16,r18
   293d0:	dd401a04 	addi	r21,sp,104
   293d4:	4825883a 	mov	r18,r9
   293d8:	4027883a 	mov	r19,r8
   293dc:	8009883a 	mov	r4,r16
   293e0:	880b883a 	mov	r5,r17
   293e4:	01800284 	movi	r6,10
   293e8:	000f883a 	mov	r7,zero
   293ec:	002ac6c0 	call	2ac6c <__umoddi3>
   293f0:	10800c04 	addi	r2,r2,48
   293f4:	ad7fffc4 	addi	r21,r21,-1
   293f8:	8009883a 	mov	r4,r16
   293fc:	880b883a 	mov	r5,r17
   29400:	a8800005 	stb	r2,0(r21)
   29404:	01800284 	movi	r6,10
   29408:	000f883a 	mov	r7,zero
   2940c:	002a6f40 	call	2a6f4 <__udivdi3>
   29410:	1021883a 	mov	r16,r2
   29414:	10c4b03a 	or	r2,r2,r3
   29418:	1823883a 	mov	r17,r3
   2941c:	103fef1e 	bne	r2,zero,293dc <__alt_data_end+0xfffe93dc>
   29420:	dc402417 	ldw	r17,144(sp)
   29424:	dc002517 	ldw	r16,148(sp)
   29428:	9013883a 	mov	r9,r18
   2942c:	9811883a 	mov	r8,r19
   29430:	da801e17 	ldw	r10,120(sp)
   29434:	5567c83a 	sub	r19,r10,r21
   29438:	003ede06 	br	28fb4 <__alt_data_end+0xfffe8fb4>
   2943c:	38803fcc 	andi	r2,r7,255
   29440:	1080201c 	xori	r2,r2,128
   29444:	10bfe004 	addi	r2,r2,-128
   29448:	1002371e 	bne	r2,zero,29d28 <___vfiprintf_internal_r+0x1174>
   2944c:	01000044 	movi	r4,1
   29450:	01c00804 	movi	r7,32
   29454:	80c00007 	ldb	r3,0(r16)
   29458:	003e3506 	br	28d30 <__alt_data_end+0xfffe8d30>
   2945c:	a5000054 	ori	r20,r20,1
   29460:	80c00007 	ldb	r3,0(r16)
   29464:	003e3206 	br	28d30 <__alt_data_end+0xfffe8d30>
   29468:	a5002014 	ori	r20,r20,128
   2946c:	80c00007 	ldb	r3,0(r16)
   29470:	003e2f06 	br	28d30 <__alt_data_end+0xfffe8d30>
   29474:	8015883a 	mov	r10,r16
   29478:	0023883a 	mov	r17,zero
   2947c:	18bff404 	addi	r2,r3,-48
   29480:	50c00007 	ldb	r3,0(r10)
   29484:	8c4002a4 	muli	r17,r17,10
   29488:	84000044 	addi	r16,r16,1
   2948c:	8015883a 	mov	r10,r16
   29490:	1463883a 	add	r17,r2,r17
   29494:	18bff404 	addi	r2,r3,-48
   29498:	30bff92e 	bgeu	r6,r2,29480 <__alt_data_end+0xfffe9480>
   2949c:	003e2506 	br	28d34 <__alt_data_end+0xfffe8d34>
   294a0:	21003fcc 	andi	r4,r4,255
   294a4:	2002d41e 	bne	r4,zero,29ff8 <___vfiprintf_internal_r+0x1444>
   294a8:	a5000414 	ori	r20,r20,16
   294ac:	a080080c 	andi	r2,r20,32
   294b0:	103fb51e 	bne	r2,zero,29388 <__alt_data_end+0xfffe9388>
   294b4:	a080040c 	andi	r2,r20,16
   294b8:	1001f826 	beq	r2,zero,29c9c <___vfiprintf_internal_r+0x10e8>
   294bc:	da802217 	ldw	r10,136(sp)
   294c0:	54800017 	ldw	r18,0(r10)
   294c4:	52800104 	addi	r10,r10,4
   294c8:	da802215 	stw	r10,136(sp)
   294cc:	9027d7fa 	srai	r19,r18,31
   294d0:	9805883a 	mov	r2,r19
   294d4:	003fb206 	br	293a0 <__alt_data_end+0xfffe93a0>
   294d8:	21003fcc 	andi	r4,r4,255
   294dc:	2002c41e 	bne	r4,zero,29ff0 <___vfiprintf_internal_r+0x143c>
   294e0:	a5000414 	ori	r20,r20,16
   294e4:	a080080c 	andi	r2,r20,32
   294e8:	103f5f1e 	bne	r2,zero,29268 <__alt_data_end+0xfffe9268>
   294ec:	a080040c 	andi	r2,r20,16
   294f0:	10020f26 	beq	r2,zero,29d30 <___vfiprintf_internal_r+0x117c>
   294f4:	da802217 	ldw	r10,136(sp)
   294f8:	d8001d85 	stb	zero,118(sp)
   294fc:	0027883a 	mov	r19,zero
   29500:	50800104 	addi	r2,r10,4
   29504:	54800017 	ldw	r18,0(r10)
   29508:	48021116 	blt	r9,zero,29d50 <___vfiprintf_internal_r+0x119c>
   2950c:	00ffdfc4 	movi	r3,-129
   29510:	d8802215 	stw	r2,136(sp)
   29514:	a0e8703a 	and	r20,r20,r3
   29518:	903f5e1e 	bne	r18,zero,29294 <__alt_data_end+0xfffe9294>
   2951c:	0039883a 	mov	fp,zero
   29520:	4802a626 	beq	r9,zero,29fbc <___vfiprintf_internal_r+0x1408>
   29524:	0025883a 	mov	r18,zero
   29528:	0027883a 	mov	r19,zero
   2952c:	003f5a06 	br	29298 <__alt_data_end+0xfffe9298>
   29530:	21003fcc 	andi	r4,r4,255
   29534:	20029f1e 	bne	r4,zero,29fb4 <___vfiprintf_internal_r+0x1400>
   29538:	a5000414 	ori	r20,r20,16
   2953c:	a080080c 	andi	r2,r20,32
   29540:	10005e1e 	bne	r2,zero,296bc <___vfiprintf_internal_r+0xb08>
   29544:	a080040c 	andi	r2,r20,16
   29548:	1001a21e 	bne	r2,zero,29bd4 <___vfiprintf_internal_r+0x1020>
   2954c:	a080100c 	andi	r2,r20,64
   29550:	d8001d85 	stb	zero,118(sp)
   29554:	da802217 	ldw	r10,136(sp)
   29558:	1002231e 	bne	r2,zero,29de8 <___vfiprintf_internal_r+0x1234>
   2955c:	50800104 	addi	r2,r10,4
   29560:	54800017 	ldw	r18,0(r10)
   29564:	0027883a 	mov	r19,zero
   29568:	4801a00e 	bge	r9,zero,29bec <___vfiprintf_internal_r+0x1038>
   2956c:	d8802215 	stw	r2,136(sp)
   29570:	0039883a 	mov	fp,zero
   29574:	94c4b03a 	or	r2,r18,r19
   29578:	103f901e 	bne	r2,zero,293bc <__alt_data_end+0xfffe93bc>
   2957c:	00800044 	movi	r2,1
   29580:	10803fcc 	andi	r2,r2,255
   29584:	00c00044 	movi	r3,1
   29588:	10c05926 	beq	r2,r3,296f0 <___vfiprintf_internal_r+0xb3c>
   2958c:	00c00084 	movi	r3,2
   29590:	10ffe41e 	bne	r2,r3,29524 <__alt_data_end+0xfffe9524>
   29594:	0025883a 	mov	r18,zero
   29598:	0027883a 	mov	r19,zero
   2959c:	00013d06 	br	29a94 <___vfiprintf_internal_r+0xee0>
   295a0:	21003fcc 	andi	r4,r4,255
   295a4:	2002811e 	bne	r4,zero,29fac <___vfiprintf_internal_r+0x13f8>
   295a8:	008000f4 	movhi	r2,3
   295ac:	10835c04 	addi	r2,r2,3440
   295b0:	d8802615 	stw	r2,152(sp)
   295b4:	a080080c 	andi	r2,r20,32
   295b8:	103f561e 	bne	r2,zero,29314 <__alt_data_end+0xfffe9314>
   295bc:	a080040c 	andi	r2,r20,16
   295c0:	1001d126 	beq	r2,zero,29d08 <___vfiprintf_internal_r+0x1154>
   295c4:	da802217 	ldw	r10,136(sp)
   295c8:	0027883a 	mov	r19,zero
   295cc:	54800017 	ldw	r18,0(r10)
   295d0:	52800104 	addi	r10,r10,4
   295d4:	da802215 	stw	r10,136(sp)
   295d8:	003f5306 	br	29328 <__alt_data_end+0xfffe9328>
   295dc:	da802217 	ldw	r10,136(sp)
   295e0:	d8001d85 	stb	zero,118(sp)
   295e4:	55400017 	ldw	r21,0(r10)
   295e8:	50c00104 	addi	r3,r10,4
   295ec:	a8024226 	beq	r21,zero,29ef8 <___vfiprintf_internal_r+0x1344>
   295f0:	48021816 	blt	r9,zero,29e54 <___vfiprintf_internal_r+0x12a0>
   295f4:	480d883a 	mov	r6,r9
   295f8:	000b883a 	mov	r5,zero
   295fc:	a809883a 	mov	r4,r21
   29600:	d8c02a15 	stw	r3,168(sp)
   29604:	da002b15 	stw	r8,172(sp)
   29608:	da402c15 	stw	r9,176(sp)
   2960c:	0021a9c0 	call	21a9c <memchr>
   29610:	d8c02a17 	ldw	r3,168(sp)
   29614:	da002b17 	ldw	r8,172(sp)
   29618:	da402c17 	ldw	r9,176(sp)
   2961c:	10024826 	beq	r2,zero,29f40 <___vfiprintf_internal_r+0x138c>
   29620:	1567c83a 	sub	r19,r2,r21
   29624:	df001d83 	ldbu	fp,118(sp)
   29628:	d8c02215 	stw	r3,136(sp)
   2962c:	0013883a 	mov	r9,zero
   29630:	003e6006 	br	28fb4 <__alt_data_end+0xfffe8fb4>
   29634:	21003fcc 	andi	r4,r4,255
   29638:	203fc026 	beq	r4,zero,2953c <__alt_data_end+0xfffe953c>
   2963c:	d9c01d85 	stb	r7,118(sp)
   29640:	003fbe06 	br	2953c <__alt_data_end+0xfffe953c>
   29644:	da802217 	ldw	r10,136(sp)
   29648:	54400017 	ldw	r17,0(r10)
   2964c:	50800104 	addi	r2,r10,4
   29650:	883e3b16 	blt	r17,zero,28f40 <__alt_data_end+0xfffe8f40>
   29654:	d8802215 	stw	r2,136(sp)
   29658:	80c00007 	ldb	r3,0(r16)
   2965c:	003db406 	br	28d30 <__alt_data_end+0xfffe8d30>
   29660:	01000044 	movi	r4,1
   29664:	01c00ac4 	movi	r7,43
   29668:	80c00007 	ldb	r3,0(r16)
   2966c:	003db006 	br	28d30 <__alt_data_end+0xfffe8d30>
   29670:	80c00007 	ldb	r3,0(r16)
   29674:	82800044 	addi	r10,r16,1
   29678:	1b423c26 	beq	r3,r13,29f6c <___vfiprintf_internal_r+0x13b8>
   2967c:	18bff404 	addi	r2,r3,-48
   29680:	0013883a 	mov	r9,zero
   29684:	30822b36 	bltu	r6,r2,29f34 <___vfiprintf_internal_r+0x1380>
   29688:	50c00007 	ldb	r3,0(r10)
   2968c:	4a4002a4 	muli	r9,r9,10
   29690:	54000044 	addi	r16,r10,1
   29694:	8015883a 	mov	r10,r16
   29698:	4893883a 	add	r9,r9,r2
   2969c:	18bff404 	addi	r2,r3,-48
   296a0:	30bff92e 	bgeu	r6,r2,29688 <__alt_data_end+0xfffe9688>
   296a4:	483da30e 	bge	r9,zero,28d34 <__alt_data_end+0xfffe8d34>
   296a8:	027fffc4 	movi	r9,-1
   296ac:	003da106 	br	28d34 <__alt_data_end+0xfffe8d34>
   296b0:	a5001014 	ori	r20,r20,64
   296b4:	80c00007 	ldb	r3,0(r16)
   296b8:	003d9d06 	br	28d30 <__alt_data_end+0xfffe8d30>
   296bc:	da802217 	ldw	r10,136(sp)
   296c0:	d8001d85 	stb	zero,118(sp)
   296c4:	50c00204 	addi	r3,r10,8
   296c8:	54800017 	ldw	r18,0(r10)
   296cc:	54c00117 	ldw	r19,4(r10)
   296d0:	4801ca16 	blt	r9,zero,29dfc <___vfiprintf_internal_r+0x1248>
   296d4:	013fdfc4 	movi	r4,-129
   296d8:	94c4b03a 	or	r2,r18,r19
   296dc:	d8c02215 	stw	r3,136(sp)
   296e0:	a128703a 	and	r20,r20,r4
   296e4:	0039883a 	mov	fp,zero
   296e8:	103f341e 	bne	r2,zero,293bc <__alt_data_end+0xfffe93bc>
   296ec:	483e2e26 	beq	r9,zero,28fa8 <__alt_data_end+0xfffe8fa8>
   296f0:	0025883a 	mov	r18,zero
   296f4:	94800c04 	addi	r18,r18,48
   296f8:	dc8019c5 	stb	r18,103(sp)
   296fc:	dcc02717 	ldw	r19,156(sp)
   29700:	dd4019c4 	addi	r21,sp,103
   29704:	003e2b06 	br	28fb4 <__alt_data_end+0xfffe8fb4>
   29708:	21003fcc 	andi	r4,r4,255
   2970c:	2002361e 	bne	r4,zero,29fe8 <___vfiprintf_internal_r+0x1434>
   29710:	1801c126 	beq	r3,zero,29e18 <___vfiprintf_internal_r+0x1264>
   29714:	04800044 	movi	r18,1
   29718:	d8c01005 	stb	r3,64(sp)
   2971c:	d8001d85 	stb	zero,118(sp)
   29720:	9027883a 	mov	r19,r18
   29724:	dd401004 	addi	r21,sp,64
   29728:	003f1106 	br	29370 <__alt_data_end+0xfffe9370>
   2972c:	d9402117 	ldw	r5,132(sp)
   29730:	d9002017 	ldw	r4,128(sp)
   29734:	d9801a04 	addi	r6,sp,104
   29738:	d9c02b15 	stw	r7,172(sp)
   2973c:	dbc02a15 	stw	r15,168(sp)
   29740:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29744:	d9c02b17 	ldw	r7,172(sp)
   29748:	dbc02a17 	ldw	r15,168(sp)
   2974c:	10006d1e 	bne	r2,zero,29904 <___vfiprintf_internal_r+0xd50>
   29750:	d9801b17 	ldw	r6,108(sp)
   29754:	d8801c17 	ldw	r2,112(sp)
   29758:	d811883a 	mov	r8,sp
   2975c:	31400044 	addi	r5,r6,1
   29760:	003e3306 	br	29030 <__alt_data_end+0xfffe9030>
   29764:	d9401b17 	ldw	r5,108(sp)
   29768:	d8801c17 	ldw	r2,112(sp)
   2976c:	29000044 	addi	r4,r5,1
   29770:	d8c01d87 	ldb	r3,118(sp)
   29774:	183e4d26 	beq	r3,zero,290ac <__alt_data_end+0xfffe90ac>
   29778:	00c00044 	movi	r3,1
   2977c:	d9401d84 	addi	r5,sp,118
   29780:	10c5883a 	add	r2,r2,r3
   29784:	41400015 	stw	r5,0(r8)
   29788:	40c00115 	stw	r3,4(r8)
   2978c:	d8801c15 	stw	r2,112(sp)
   29790:	d9001b15 	stw	r4,108(sp)
   29794:	014001c4 	movi	r5,7
   29798:	2900a90e 	bge	r5,r4,29a40 <___vfiprintf_internal_r+0xe8c>
   2979c:	1000da1e 	bne	r2,zero,29b08 <___vfiprintf_internal_r+0xf54>
   297a0:	7000ab1e 	bne	r14,zero,29a50 <___vfiprintf_internal_r+0xe9c>
   297a4:	000b883a 	mov	r5,zero
   297a8:	1809883a 	mov	r4,r3
   297ac:	d811883a 	mov	r8,sp
   297b0:	00c02004 	movi	r3,128
   297b4:	e0fe4d26 	beq	fp,r3,290ec <__alt_data_end+0xfffe90ec>
   297b8:	4cf9c83a 	sub	fp,r9,r19
   297bc:	073e7b0e 	bge	zero,fp,291ac <__alt_data_end+0xfffe91ac>
   297c0:	01c00404 	movi	r7,16
   297c4:	3f01900e 	bge	r7,fp,29e08 <___vfiprintf_internal_r+0x1254>
   297c8:	00c000f4 	movhi	r3,3
   297cc:	18c3c104 	addi	r3,r3,3844
   297d0:	d8c02415 	stw	r3,144(sp)
   297d4:	034001c4 	movi	r13,7
   297d8:	00000506 	br	297f0 <___vfiprintf_internal_r+0xc3c>
   297dc:	29000084 	addi	r4,r5,2
   297e0:	42000204 	addi	r8,r8,8
   297e4:	180b883a 	mov	r5,r3
   297e8:	e73ffc04 	addi	fp,fp,-16
   297ec:	3f000d0e 	bge	r7,fp,29824 <___vfiprintf_internal_r+0xc70>
   297f0:	10800404 	addi	r2,r2,16
   297f4:	28c00044 	addi	r3,r5,1
   297f8:	45c00015 	stw	r23,0(r8)
   297fc:	41c00115 	stw	r7,4(r8)
   29800:	d8801c15 	stw	r2,112(sp)
   29804:	d8c01b15 	stw	r3,108(sp)
   29808:	68fff40e 	bge	r13,r3,297dc <__alt_data_end+0xfffe97dc>
   2980c:	1000101e 	bne	r2,zero,29850 <___vfiprintf_internal_r+0xc9c>
   29810:	e73ffc04 	addi	fp,fp,-16
   29814:	01000044 	movi	r4,1
   29818:	000b883a 	mov	r5,zero
   2981c:	d811883a 	mov	r8,sp
   29820:	3f3ff316 	blt	r7,fp,297f0 <__alt_data_end+0xfffe97f0>
   29824:	da802417 	ldw	r10,144(sp)
   29828:	1705883a 	add	r2,r2,fp
   2982c:	47000115 	stw	fp,4(r8)
   29830:	42800015 	stw	r10,0(r8)
   29834:	d8801c15 	stw	r2,112(sp)
   29838:	d9001b15 	stw	r4,108(sp)
   2983c:	00c001c4 	movi	r3,7
   29840:	19003616 	blt	r3,r4,2991c <___vfiprintf_internal_r+0xd68>
   29844:	42000204 	addi	r8,r8,8
   29848:	21000044 	addi	r4,r4,1
   2984c:	003e5706 	br	291ac <__alt_data_end+0xfffe91ac>
   29850:	d9402117 	ldw	r5,132(sp)
   29854:	d9002017 	ldw	r4,128(sp)
   29858:	d9801a04 	addi	r6,sp,104
   2985c:	d9c02b15 	stw	r7,172(sp)
   29860:	db402a15 	stw	r13,168(sp)
   29864:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29868:	d9c02b17 	ldw	r7,172(sp)
   2986c:	db402a17 	ldw	r13,168(sp)
   29870:	1000241e 	bne	r2,zero,29904 <___vfiprintf_internal_r+0xd50>
   29874:	d9401b17 	ldw	r5,108(sp)
   29878:	d8801c17 	ldw	r2,112(sp)
   2987c:	d811883a 	mov	r8,sp
   29880:	29000044 	addi	r4,r5,1
   29884:	003fd806 	br	297e8 <__alt_data_end+0xfffe97e8>
   29888:	d9401b17 	ldw	r5,108(sp)
   2988c:	00c000f4 	movhi	r3,3
   29890:	18c3c504 	addi	r3,r3,3860
   29894:	d8c02415 	stw	r3,144(sp)
   29898:	29400044 	addi	r5,r5,1
   2989c:	d8c02417 	ldw	r3,144(sp)
   298a0:	14c5883a 	add	r2,r2,r19
   298a4:	44c00115 	stw	r19,4(r8)
   298a8:	40c00015 	stw	r3,0(r8)
   298ac:	d8801c15 	stw	r2,112(sp)
   298b0:	d9401b15 	stw	r5,108(sp)
   298b4:	00c001c4 	movi	r3,7
   298b8:	1940070e 	bge	r3,r5,298d8 <___vfiprintf_internal_r+0xd24>
   298bc:	103e4826 	beq	r2,zero,291e0 <__alt_data_end+0xfffe91e0>
   298c0:	d9402117 	ldw	r5,132(sp)
   298c4:	d9002017 	ldw	r4,128(sp)
   298c8:	d9801a04 	addi	r6,sp,104
   298cc:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   298d0:	10000c1e 	bne	r2,zero,29904 <___vfiprintf_internal_r+0xd50>
   298d4:	d8801c17 	ldw	r2,112(sp)
   298d8:	8c80010e 	bge	r17,r18,298e0 <___vfiprintf_internal_r+0xd2c>
   298dc:	9023883a 	mov	r17,r18
   298e0:	da802317 	ldw	r10,140(sp)
   298e4:	5455883a 	add	r10,r10,r17
   298e8:	da802315 	stw	r10,140(sp)
   298ec:	103e4126 	beq	r2,zero,291f4 <__alt_data_end+0xfffe91f4>
   298f0:	d9402117 	ldw	r5,132(sp)
   298f4:	d9002017 	ldw	r4,128(sp)
   298f8:	d9801a04 	addi	r6,sp,104
   298fc:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29900:	103e3c26 	beq	r2,zero,291f4 <__alt_data_end+0xfffe91f4>
   29904:	dd002117 	ldw	r20,132(sp)
   29908:	a080030b 	ldhu	r2,12(r20)
   2990c:	1080100c 	andi	r2,r2,64
   29910:	1001231e 	bne	r2,zero,29da0 <___vfiprintf_internal_r+0x11ec>
   29914:	d8802317 	ldw	r2,140(sp)
   29918:	003d7b06 	br	28f08 <__alt_data_end+0xfffe8f08>
   2991c:	1000991e 	bne	r2,zero,29b84 <___vfiprintf_internal_r+0xfd0>
   29920:	00c00044 	movi	r3,1
   29924:	9805883a 	mov	r2,r19
   29928:	dd400015 	stw	r21,0(sp)
   2992c:	dcc00115 	stw	r19,4(sp)
   29930:	dcc01c15 	stw	r19,112(sp)
   29934:	d8c01b15 	stw	r3,108(sp)
   29938:	d811883a 	mov	r8,sp
   2993c:	42000204 	addi	r8,r8,8
   29940:	a2c0010c 	andi	r11,r20,4
   29944:	583fe426 	beq	r11,zero,298d8 <__alt_data_end+0xfffe98d8>
   29948:	8ca7c83a 	sub	r19,r17,r18
   2994c:	04ffe20e 	bge	zero,r19,298d8 <__alt_data_end+0xfffe98d8>
   29950:	01c00404 	movi	r7,16
   29954:	3cffcc0e 	bge	r7,r19,29888 <__alt_data_end+0xfffe9888>
   29958:	028000f4 	movhi	r10,3
   2995c:	5283c504 	addi	r10,r10,3860
   29960:	d9001b17 	ldw	r4,108(sp)
   29964:	da802415 	stw	r10,144(sp)
   29968:	382b883a 	mov	r21,r7
   2996c:	050001c4 	movi	r20,7
   29970:	df002017 	ldw	fp,128(sp)
   29974:	00000506 	br	2998c <___vfiprintf_internal_r+0xdd8>
   29978:	21400084 	addi	r5,r4,2
   2997c:	42000204 	addi	r8,r8,8
   29980:	1809883a 	mov	r4,r3
   29984:	9cfffc04 	addi	r19,r19,-16
   29988:	acffc40e 	bge	r21,r19,2989c <__alt_data_end+0xfffe989c>
   2998c:	10800404 	addi	r2,r2,16
   29990:	20c00044 	addi	r3,r4,1
   29994:	45800015 	stw	r22,0(r8)
   29998:	45400115 	stw	r21,4(r8)
   2999c:	d8801c15 	stw	r2,112(sp)
   299a0:	d8c01b15 	stw	r3,108(sp)
   299a4:	a0fff40e 	bge	r20,r3,29978 <__alt_data_end+0xfffe9978>
   299a8:	1000041e 	bne	r2,zero,299bc <___vfiprintf_internal_r+0xe08>
   299ac:	01400044 	movi	r5,1
   299b0:	0009883a 	mov	r4,zero
   299b4:	d811883a 	mov	r8,sp
   299b8:	003ff206 	br	29984 <__alt_data_end+0xfffe9984>
   299bc:	d9402117 	ldw	r5,132(sp)
   299c0:	d9801a04 	addi	r6,sp,104
   299c4:	e009883a 	mov	r4,fp
   299c8:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   299cc:	103fcd1e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   299d0:	d9001b17 	ldw	r4,108(sp)
   299d4:	d8801c17 	ldw	r2,112(sp)
   299d8:	d811883a 	mov	r8,sp
   299dc:	21400044 	addi	r5,r4,1
   299e0:	003fe806 	br	29984 <__alt_data_end+0xfffe9984>
   299e4:	d9402117 	ldw	r5,132(sp)
   299e8:	d9002017 	ldw	r4,128(sp)
   299ec:	d9801a04 	addi	r6,sp,104
   299f0:	d9c02b15 	stw	r7,172(sp)
   299f4:	db402a15 	stw	r13,168(sp)
   299f8:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   299fc:	d9c02b17 	ldw	r7,172(sp)
   29a00:	db402a17 	ldw	r13,168(sp)
   29a04:	103fbf1e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   29a08:	d9401b17 	ldw	r5,108(sp)
   29a0c:	d8801c17 	ldw	r2,112(sp)
   29a10:	d811883a 	mov	r8,sp
   29a14:	29800044 	addi	r6,r5,1
   29a18:	003dc406 	br	2912c <__alt_data_end+0xfffe912c>
   29a1c:	1000d21e 	bne	r2,zero,29d68 <___vfiprintf_internal_r+0x11b4>
   29a20:	d8c01d87 	ldb	r3,118(sp)
   29a24:	18009526 	beq	r3,zero,29c7c <___vfiprintf_internal_r+0x10c8>
   29a28:	00800044 	movi	r2,1
   29a2c:	d8c01d84 	addi	r3,sp,118
   29a30:	1009883a 	mov	r4,r2
   29a34:	d8c00015 	stw	r3,0(sp)
   29a38:	d8800115 	stw	r2,4(sp)
   29a3c:	d811883a 	mov	r8,sp
   29a40:	200b883a 	mov	r5,r4
   29a44:	42000204 	addi	r8,r8,8
   29a48:	21000044 	addi	r4,r4,1
   29a4c:	003d9706 	br	290ac <__alt_data_end+0xfffe90ac>
   29a50:	d9001d04 	addi	r4,sp,116
   29a54:	00800084 	movi	r2,2
   29a58:	d9000015 	stw	r4,0(sp)
   29a5c:	d8800115 	stw	r2,4(sp)
   29a60:	1809883a 	mov	r4,r3
   29a64:	d811883a 	mov	r8,sp
   29a68:	200b883a 	mov	r5,r4
   29a6c:	42000204 	addi	r8,r8,8
   29a70:	21000044 	addi	r4,r4,1
   29a74:	003f4e06 	br	297b0 <__alt_data_end+0xfffe97b0>
   29a78:	d8001d85 	stb	zero,118(sp)
   29a7c:	48005016 	blt	r9,zero,29bc0 <___vfiprintf_internal_r+0x100c>
   29a80:	00ffdfc4 	movi	r3,-129
   29a84:	94c4b03a 	or	r2,r18,r19
   29a88:	a0e8703a 	and	r20,r20,r3
   29a8c:	103d4426 	beq	r2,zero,28fa0 <__alt_data_end+0xfffe8fa0>
   29a90:	0039883a 	mov	fp,zero
   29a94:	d9002617 	ldw	r4,152(sp)
   29a98:	dd401a04 	addi	r21,sp,104
   29a9c:	908003cc 	andi	r2,r18,15
   29aa0:	9806973a 	slli	r3,r19,28
   29aa4:	2085883a 	add	r2,r4,r2
   29aa8:	9024d13a 	srli	r18,r18,4
   29aac:	10800003 	ldbu	r2,0(r2)
   29ab0:	9826d13a 	srli	r19,r19,4
   29ab4:	ad7fffc4 	addi	r21,r21,-1
   29ab8:	1ca4b03a 	or	r18,r3,r18
   29abc:	a8800005 	stb	r2,0(r21)
   29ac0:	94c4b03a 	or	r2,r18,r19
   29ac4:	103ff51e 	bne	r2,zero,29a9c <__alt_data_end+0xfffe9a9c>
   29ac8:	003e5906 	br	29430 <__alt_data_end+0xfffe9430>
   29acc:	d9402117 	ldw	r5,132(sp)
   29ad0:	d9002017 	ldw	r4,128(sp)
   29ad4:	d9801a04 	addi	r6,sp,104
   29ad8:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29adc:	103f891e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   29ae0:	d8801c17 	ldw	r2,112(sp)
   29ae4:	d811883a 	mov	r8,sp
   29ae8:	003f9506 	br	29940 <__alt_data_end+0xfffe9940>
   29aec:	d9402117 	ldw	r5,132(sp)
   29af0:	d9002017 	ldw	r4,128(sp)
   29af4:	d9801a04 	addi	r6,sp,104
   29af8:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29afc:	103f811e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   29b00:	d811883a 	mov	r8,sp
   29b04:	003ced06 	br	28ebc <__alt_data_end+0xfffe8ebc>
   29b08:	d9402117 	ldw	r5,132(sp)
   29b0c:	d9002017 	ldw	r4,128(sp)
   29b10:	d9801a04 	addi	r6,sp,104
   29b14:	da402c15 	stw	r9,176(sp)
   29b18:	db802a15 	stw	r14,168(sp)
   29b1c:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29b20:	da402c17 	ldw	r9,176(sp)
   29b24:	db802a17 	ldw	r14,168(sp)
   29b28:	103f761e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   29b2c:	d9401b17 	ldw	r5,108(sp)
   29b30:	d8801c17 	ldw	r2,112(sp)
   29b34:	d811883a 	mov	r8,sp
   29b38:	29000044 	addi	r4,r5,1
   29b3c:	003d5b06 	br	290ac <__alt_data_end+0xfffe90ac>
   29b40:	d9402117 	ldw	r5,132(sp)
   29b44:	d9002017 	ldw	r4,128(sp)
   29b48:	d9801a04 	addi	r6,sp,104
   29b4c:	da402c15 	stw	r9,176(sp)
   29b50:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29b54:	da402c17 	ldw	r9,176(sp)
   29b58:	103f6a1e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   29b5c:	d9401b17 	ldw	r5,108(sp)
   29b60:	d8801c17 	ldw	r2,112(sp)
   29b64:	d811883a 	mov	r8,sp
   29b68:	29000044 	addi	r4,r5,1
   29b6c:	003f1006 	br	297b0 <__alt_data_end+0xfffe97b0>
   29b70:	1000c31e 	bne	r2,zero,29e80 <___vfiprintf_internal_r+0x12cc>
   29b74:	01000044 	movi	r4,1
   29b78:	000b883a 	mov	r5,zero
   29b7c:	d811883a 	mov	r8,sp
   29b80:	003f0d06 	br	297b8 <__alt_data_end+0xfffe97b8>
   29b84:	d9402117 	ldw	r5,132(sp)
   29b88:	d9002017 	ldw	r4,128(sp)
   29b8c:	d9801a04 	addi	r6,sp,104
   29b90:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29b94:	103f5b1e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   29b98:	d9001b17 	ldw	r4,108(sp)
   29b9c:	d8801c17 	ldw	r2,112(sp)
   29ba0:	d811883a 	mov	r8,sp
   29ba4:	21000044 	addi	r4,r4,1
   29ba8:	003d8006 	br	291ac <__alt_data_end+0xfffe91ac>
   29bac:	010000f4 	movhi	r4,3
   29bb0:	21036104 	addi	r4,r4,3460
   29bb4:	d9002615 	stw	r4,152(sp)
   29bb8:	d8c02215 	stw	r3,136(sp)
   29bbc:	1029883a 	mov	r20,r2
   29bc0:	94c4b03a 	or	r2,r18,r19
   29bc4:	103fb21e 	bne	r2,zero,29a90 <__alt_data_end+0xfffe9a90>
   29bc8:	0039883a 	mov	fp,zero
   29bcc:	00800084 	movi	r2,2
   29bd0:	003e6b06 	br	29580 <__alt_data_end+0xfffe9580>
   29bd4:	da802217 	ldw	r10,136(sp)
   29bd8:	d8001d85 	stb	zero,118(sp)
   29bdc:	0027883a 	mov	r19,zero
   29be0:	50800104 	addi	r2,r10,4
   29be4:	54800017 	ldw	r18,0(r10)
   29be8:	483e6016 	blt	r9,zero,2956c <__alt_data_end+0xfffe956c>
   29bec:	00ffdfc4 	movi	r3,-129
   29bf0:	d8802215 	stw	r2,136(sp)
   29bf4:	a0e8703a 	and	r20,r20,r3
   29bf8:	0039883a 	mov	fp,zero
   29bfc:	903ebb26 	beq	r18,zero,296ec <__alt_data_end+0xfffe96ec>
   29c00:	00800244 	movi	r2,9
   29c04:	14bdee36 	bltu	r2,r18,293c0 <__alt_data_end+0xfffe93c0>
   29c08:	003eba06 	br	296f4 <__alt_data_end+0xfffe96f4>
   29c0c:	00800c04 	movi	r2,48
   29c10:	d8c01d45 	stb	r3,117(sp)
   29c14:	d8801d05 	stb	r2,116(sp)
   29c18:	d8001d85 	stb	zero,118(sp)
   29c1c:	a0c00094 	ori	r3,r20,2
   29c20:	4800a916 	blt	r9,zero,29ec8 <___vfiprintf_internal_r+0x1314>
   29c24:	00bfdfc4 	movi	r2,-129
   29c28:	a096703a 	and	r11,r20,r2
   29c2c:	5d000094 	ori	r20,r11,2
   29c30:	0039883a 	mov	fp,zero
   29c34:	003f9706 	br	29a94 <__alt_data_end+0xfffe9a94>
   29c38:	8025883a 	mov	r18,r16
   29c3c:	003c2e06 	br	28cf8 <__alt_data_end+0xfffe8cf8>
   29c40:	008000f4 	movhi	r2,3
   29c44:	10836104 	addi	r2,r2,3460
   29c48:	0039883a 	mov	fp,zero
   29c4c:	d8802615 	stw	r2,152(sp)
   29c50:	003f9006 	br	29a94 <__alt_data_end+0xfffe9a94>
   29c54:	04a5c83a 	sub	r18,zero,r18
   29c58:	07000b44 	movi	fp,45
   29c5c:	9004c03a 	cmpne	r2,r18,zero
   29c60:	04e7c83a 	sub	r19,zero,r19
   29c64:	df001d85 	stb	fp,118(sp)
   29c68:	98a7c83a 	sub	r19,r19,r2
   29c6c:	48009f16 	blt	r9,zero,29eec <___vfiprintf_internal_r+0x1338>
   29c70:	00bfdfc4 	movi	r2,-129
   29c74:	a0a8703a 	and	r20,r20,r2
   29c78:	003dd006 	br	293bc <__alt_data_end+0xfffe93bc>
   29c7c:	70004c26 	beq	r14,zero,29db0 <___vfiprintf_internal_r+0x11fc>
   29c80:	00800084 	movi	r2,2
   29c84:	d8c01d04 	addi	r3,sp,116
   29c88:	d8c00015 	stw	r3,0(sp)
   29c8c:	d8800115 	stw	r2,4(sp)
   29c90:	01000044 	movi	r4,1
   29c94:	d811883a 	mov	r8,sp
   29c98:	003f7306 	br	29a68 <__alt_data_end+0xfffe9a68>
   29c9c:	a080100c 	andi	r2,r20,64
   29ca0:	da802217 	ldw	r10,136(sp)
   29ca4:	103e0626 	beq	r2,zero,294c0 <__alt_data_end+0xfffe94c0>
   29ca8:	5480000f 	ldh	r18,0(r10)
   29cac:	52800104 	addi	r10,r10,4
   29cb0:	da802215 	stw	r10,136(sp)
   29cb4:	9027d7fa 	srai	r19,r18,31
   29cb8:	9805883a 	mov	r2,r19
   29cbc:	003db806 	br	293a0 <__alt_data_end+0xfffe93a0>
   29cc0:	a080040c 	andi	r2,r20,16
   29cc4:	1000091e 	bne	r2,zero,29cec <___vfiprintf_internal_r+0x1138>
   29cc8:	a2c0100c 	andi	r11,r20,64
   29ccc:	58000726 	beq	r11,zero,29cec <___vfiprintf_internal_r+0x1138>
   29cd0:	da802217 	ldw	r10,136(sp)
   29cd4:	50800017 	ldw	r2,0(r10)
   29cd8:	52800104 	addi	r10,r10,4
   29cdc:	da802215 	stw	r10,136(sp)
   29ce0:	da802317 	ldw	r10,140(sp)
   29ce4:	1280000d 	sth	r10,0(r2)
   29ce8:	003be706 	br	28c88 <__alt_data_end+0xfffe8c88>
   29cec:	da802217 	ldw	r10,136(sp)
   29cf0:	50800017 	ldw	r2,0(r10)
   29cf4:	52800104 	addi	r10,r10,4
   29cf8:	da802215 	stw	r10,136(sp)
   29cfc:	da802317 	ldw	r10,140(sp)
   29d00:	12800015 	stw	r10,0(r2)
   29d04:	003be006 	br	28c88 <__alt_data_end+0xfffe8c88>
   29d08:	a080100c 	andi	r2,r20,64
   29d0c:	da802217 	ldw	r10,136(sp)
   29d10:	10003026 	beq	r2,zero,29dd4 <___vfiprintf_internal_r+0x1220>
   29d14:	5480000b 	ldhu	r18,0(r10)
   29d18:	52800104 	addi	r10,r10,4
   29d1c:	0027883a 	mov	r19,zero
   29d20:	da802215 	stw	r10,136(sp)
   29d24:	003d8006 	br	29328 <__alt_data_end+0xfffe9328>
   29d28:	80c00007 	ldb	r3,0(r16)
   29d2c:	003c0006 	br	28d30 <__alt_data_end+0xfffe8d30>
   29d30:	a080100c 	andi	r2,r20,64
   29d34:	d8001d85 	stb	zero,118(sp)
   29d38:	da802217 	ldw	r10,136(sp)
   29d3c:	1000201e 	bne	r2,zero,29dc0 <___vfiprintf_internal_r+0x120c>
   29d40:	50800104 	addi	r2,r10,4
   29d44:	54800017 	ldw	r18,0(r10)
   29d48:	0027883a 	mov	r19,zero
   29d4c:	483def0e 	bge	r9,zero,2950c <__alt_data_end+0xfffe950c>
   29d50:	94c6b03a 	or	r3,r18,r19
   29d54:	d8802215 	stw	r2,136(sp)
   29d58:	183d4e1e 	bne	r3,zero,29294 <__alt_data_end+0xfffe9294>
   29d5c:	0039883a 	mov	fp,zero
   29d60:	0005883a 	mov	r2,zero
   29d64:	003e0606 	br	29580 <__alt_data_end+0xfffe9580>
   29d68:	d9402117 	ldw	r5,132(sp)
   29d6c:	d9002017 	ldw	r4,128(sp)
   29d70:	d9801a04 	addi	r6,sp,104
   29d74:	da402c15 	stw	r9,176(sp)
   29d78:	db802a15 	stw	r14,168(sp)
   29d7c:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29d80:	da402c17 	ldw	r9,176(sp)
   29d84:	db802a17 	ldw	r14,168(sp)
   29d88:	103ede1e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   29d8c:	d9401b17 	ldw	r5,108(sp)
   29d90:	d8801c17 	ldw	r2,112(sp)
   29d94:	d811883a 	mov	r8,sp
   29d98:	29000044 	addi	r4,r5,1
   29d9c:	003e7406 	br	29770 <__alt_data_end+0xfffe9770>
   29da0:	00bfffc4 	movi	r2,-1
   29da4:	003c5806 	br	28f08 <__alt_data_end+0xfffe8f08>
   29da8:	d811883a 	mov	r8,sp
   29dac:	003ee806 	br	29950 <__alt_data_end+0xfffe9950>
   29db0:	000b883a 	mov	r5,zero
   29db4:	01000044 	movi	r4,1
   29db8:	d811883a 	mov	r8,sp
   29dbc:	003e7c06 	br	297b0 <__alt_data_end+0xfffe97b0>
   29dc0:	50800104 	addi	r2,r10,4
   29dc4:	5480000b 	ldhu	r18,0(r10)
   29dc8:	0027883a 	mov	r19,zero
   29dcc:	483dcf0e 	bge	r9,zero,2950c <__alt_data_end+0xfffe950c>
   29dd0:	003fdf06 	br	29d50 <__alt_data_end+0xfffe9d50>
   29dd4:	54800017 	ldw	r18,0(r10)
   29dd8:	52800104 	addi	r10,r10,4
   29ddc:	0027883a 	mov	r19,zero
   29de0:	da802215 	stw	r10,136(sp)
   29de4:	003d5006 	br	29328 <__alt_data_end+0xfffe9328>
   29de8:	50800104 	addi	r2,r10,4
   29dec:	5480000b 	ldhu	r18,0(r10)
   29df0:	0027883a 	mov	r19,zero
   29df4:	483f7d0e 	bge	r9,zero,29bec <__alt_data_end+0xfffe9bec>
   29df8:	003ddc06 	br	2956c <__alt_data_end+0xfffe956c>
   29dfc:	d8c02215 	stw	r3,136(sp)
   29e00:	0039883a 	mov	fp,zero
   29e04:	003ddb06 	br	29574 <__alt_data_end+0xfffe9574>
   29e08:	028000f4 	movhi	r10,3
   29e0c:	5283c104 	addi	r10,r10,3844
   29e10:	da802415 	stw	r10,144(sp)
   29e14:	003e8306 	br	29824 <__alt_data_end+0xfffe9824>
   29e18:	d8801c17 	ldw	r2,112(sp)
   29e1c:	dd002117 	ldw	r20,132(sp)
   29e20:	103eb926 	beq	r2,zero,29908 <__alt_data_end+0xfffe9908>
   29e24:	d9002017 	ldw	r4,128(sp)
   29e28:	d9801a04 	addi	r6,sp,104
   29e2c:	a00b883a 	mov	r5,r20
   29e30:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29e34:	003eb406 	br	29908 <__alt_data_end+0xfffe9908>
   29e38:	80c00043 	ldbu	r3,1(r16)
   29e3c:	a5000814 	ori	r20,r20,32
   29e40:	84000044 	addi	r16,r16,1
   29e44:	18c03fcc 	andi	r3,r3,255
   29e48:	18c0201c 	xori	r3,r3,128
   29e4c:	18ffe004 	addi	r3,r3,-128
   29e50:	003bb706 	br	28d30 <__alt_data_end+0xfffe8d30>
   29e54:	a809883a 	mov	r4,r21
   29e58:	d8c02a15 	stw	r3,168(sp)
   29e5c:	da002b15 	stw	r8,172(sp)
   29e60:	00223100 	call	22310 <strlen>
   29e64:	d8c02a17 	ldw	r3,168(sp)
   29e68:	1027883a 	mov	r19,r2
   29e6c:	df001d83 	ldbu	fp,118(sp)
   29e70:	d8c02215 	stw	r3,136(sp)
   29e74:	0013883a 	mov	r9,zero
   29e78:	da002b17 	ldw	r8,172(sp)
   29e7c:	003c4d06 	br	28fb4 <__alt_data_end+0xfffe8fb4>
   29e80:	d9402117 	ldw	r5,132(sp)
   29e84:	d9002017 	ldw	r4,128(sp)
   29e88:	d9801a04 	addi	r6,sp,104
   29e8c:	da402c15 	stw	r9,176(sp)
   29e90:	0028aa00 	call	28aa0 <__sprint_r.part.0>
   29e94:	da402c17 	ldw	r9,176(sp)
   29e98:	103e9a1e 	bne	r2,zero,29904 <__alt_data_end+0xfffe9904>
   29e9c:	d9401b17 	ldw	r5,108(sp)
   29ea0:	d8801c17 	ldw	r2,112(sp)
   29ea4:	d811883a 	mov	r8,sp
   29ea8:	29000044 	addi	r4,r5,1
   29eac:	003e4206 	br	297b8 <__alt_data_end+0xfffe97b8>
   29eb0:	d9401b17 	ldw	r5,108(sp)
   29eb4:	010000f4 	movhi	r4,3
   29eb8:	2103c504 	addi	r4,r4,3860
   29ebc:	d9002415 	stw	r4,144(sp)
   29ec0:	29400044 	addi	r5,r5,1
   29ec4:	003c6d06 	br	2907c <__alt_data_end+0xfffe907c>
   29ec8:	0039883a 	mov	fp,zero
   29ecc:	00800084 	movi	r2,2
   29ed0:	10803fcc 	andi	r2,r2,255
   29ed4:	01000044 	movi	r4,1
   29ed8:	11001e26 	beq	r2,r4,29f54 <___vfiprintf_internal_r+0x13a0>
   29edc:	01000084 	movi	r4,2
   29ee0:	11001e1e 	bne	r2,r4,29f5c <___vfiprintf_internal_r+0x13a8>
   29ee4:	1829883a 	mov	r20,r3
   29ee8:	003eea06 	br	29a94 <__alt_data_end+0xfffe9a94>
   29eec:	a007883a 	mov	r3,r20
   29ef0:	00800044 	movi	r2,1
   29ef4:	003ff606 	br	29ed0 <__alt_data_end+0xfffe9ed0>
   29ef8:	00800184 	movi	r2,6
   29efc:	1240012e 	bgeu	r2,r9,29f04 <___vfiprintf_internal_r+0x1350>
   29f00:	1013883a 	mov	r9,r2
   29f04:	4827883a 	mov	r19,r9
   29f08:	4825883a 	mov	r18,r9
   29f0c:	48001516 	blt	r9,zero,29f64 <___vfiprintf_internal_r+0x13b0>
   29f10:	054000f4 	movhi	r21,3
   29f14:	d8c02215 	stw	r3,136(sp)
   29f18:	ad436604 	addi	r21,r21,3480
   29f1c:	003d1406 	br	29370 <__alt_data_end+0xfffe9370>
   29f20:	028000f4 	movhi	r10,3
   29f24:	5283c104 	addi	r10,r10,3844
   29f28:	da802415 	stw	r10,144(sp)
   29f2c:	200d883a 	mov	r6,r4
   29f30:	003c9106 	br	29178 <__alt_data_end+0xfffe9178>
   29f34:	5021883a 	mov	r16,r10
   29f38:	0013883a 	mov	r9,zero
   29f3c:	003b7d06 	br	28d34 <__alt_data_end+0xfffe8d34>
   29f40:	4827883a 	mov	r19,r9
   29f44:	df001d83 	ldbu	fp,118(sp)
   29f48:	d8c02215 	stw	r3,136(sp)
   29f4c:	0013883a 	mov	r9,zero
   29f50:	003c1806 	br	28fb4 <__alt_data_end+0xfffe8fb4>
   29f54:	1829883a 	mov	r20,r3
   29f58:	003d1806 	br	293bc <__alt_data_end+0xfffe93bc>
   29f5c:	1829883a 	mov	r20,r3
   29f60:	003ccd06 	br	29298 <__alt_data_end+0xfffe9298>
   29f64:	0025883a 	mov	r18,zero
   29f68:	003fe906 	br	29f10 <__alt_data_end+0xfffe9f10>
   29f6c:	d8802217 	ldw	r2,136(sp)
   29f70:	80c00043 	ldbu	r3,1(r16)
   29f74:	5021883a 	mov	r16,r10
   29f78:	12400017 	ldw	r9,0(r2)
   29f7c:	10800104 	addi	r2,r2,4
   29f80:	d8802215 	stw	r2,136(sp)
   29f84:	483faf0e 	bge	r9,zero,29e44 <__alt_data_end+0xfffe9e44>
   29f88:	18c03fcc 	andi	r3,r3,255
   29f8c:	18c0201c 	xori	r3,r3,128
   29f90:	027fffc4 	movi	r9,-1
   29f94:	18ffe004 	addi	r3,r3,-128
   29f98:	003b6506 	br	28d30 <__alt_data_end+0xfffe8d30>
   29f9c:	d9c01d85 	stb	r7,118(sp)
   29fa0:	003ca006 	br	29224 <__alt_data_end+0xfffe9224>
   29fa4:	d9c01d85 	stb	r7,118(sp)
   29fa8:	003cad06 	br	29260 <__alt_data_end+0xfffe9260>
   29fac:	d9c01d85 	stb	r7,118(sp)
   29fb0:	003d7d06 	br	295a8 <__alt_data_end+0xfffe95a8>
   29fb4:	d9c01d85 	stb	r7,118(sp)
   29fb8:	003d5f06 	br	29538 <__alt_data_end+0xfffe9538>
   29fbc:	a080004c 	andi	r2,r20,1
   29fc0:	0039883a 	mov	fp,zero
   29fc4:	10000526 	beq	r2,zero,29fdc <___vfiprintf_internal_r+0x1428>
   29fc8:	00800c04 	movi	r2,48
   29fcc:	d88019c5 	stb	r2,103(sp)
   29fd0:	dcc02717 	ldw	r19,156(sp)
   29fd4:	dd4019c4 	addi	r21,sp,103
   29fd8:	003bf606 	br	28fb4 <__alt_data_end+0xfffe8fb4>
   29fdc:	0027883a 	mov	r19,zero
   29fe0:	dd401a04 	addi	r21,sp,104
   29fe4:	003bf306 	br	28fb4 <__alt_data_end+0xfffe8fb4>
   29fe8:	d9c01d85 	stb	r7,118(sp)
   29fec:	003dc806 	br	29710 <__alt_data_end+0xfffe9710>
   29ff0:	d9c01d85 	stb	r7,118(sp)
   29ff4:	003d3a06 	br	294e0 <__alt_data_end+0xfffe94e0>
   29ff8:	d9c01d85 	stb	r7,118(sp)
   29ffc:	003d2a06 	br	294a8 <__alt_data_end+0xfffe94a8>
   2a000:	d9c01d85 	stb	r7,118(sp)
   2a004:	003cde06 	br	29380 <__alt_data_end+0xfffe9380>
   2a008:	d9c01d85 	stb	r7,118(sp)
   2a00c:	003cbc06 	br	29300 <__alt_data_end+0xfffe9300>

0002a010 <__vfiprintf_internal>:
   2a010:	008000f4 	movhi	r2,3
   2a014:	108af504 	addi	r2,r2,11220
   2a018:	300f883a 	mov	r7,r6
   2a01c:	280d883a 	mov	r6,r5
   2a020:	200b883a 	mov	r5,r4
   2a024:	11000017 	ldw	r4,0(r2)
   2a028:	0028bb41 	jmpi	28bb4 <___vfiprintf_internal_r>

0002a02c <__sbprintf>:
   2a02c:	2880030b 	ldhu	r2,12(r5)
   2a030:	2ac01917 	ldw	r11,100(r5)
   2a034:	2a80038b 	ldhu	r10,14(r5)
   2a038:	2a400717 	ldw	r9,28(r5)
   2a03c:	2a000917 	ldw	r8,36(r5)
   2a040:	defee204 	addi	sp,sp,-1144
   2a044:	00c10004 	movi	r3,1024
   2a048:	dc011a15 	stw	r16,1128(sp)
   2a04c:	10bfff4c 	andi	r2,r2,65533
   2a050:	2821883a 	mov	r16,r5
   2a054:	d8cb883a 	add	r5,sp,r3
   2a058:	dc811c15 	stw	r18,1136(sp)
   2a05c:	dc411b15 	stw	r17,1132(sp)
   2a060:	dfc11d15 	stw	ra,1140(sp)
   2a064:	2025883a 	mov	r18,r4
   2a068:	d881030d 	sth	r2,1036(sp)
   2a06c:	dac11915 	stw	r11,1124(sp)
   2a070:	da81038d 	sth	r10,1038(sp)
   2a074:	da410715 	stw	r9,1052(sp)
   2a078:	da010915 	stw	r8,1060(sp)
   2a07c:	dec10015 	stw	sp,1024(sp)
   2a080:	dec10415 	stw	sp,1040(sp)
   2a084:	d8c10215 	stw	r3,1032(sp)
   2a088:	d8c10515 	stw	r3,1044(sp)
   2a08c:	d8010615 	stw	zero,1048(sp)
   2a090:	0028bb40 	call	28bb4 <___vfiprintf_internal_r>
   2a094:	1023883a 	mov	r17,r2
   2a098:	10000416 	blt	r2,zero,2a0ac <__sbprintf+0x80>
   2a09c:	d9410004 	addi	r5,sp,1024
   2a0a0:	9009883a 	mov	r4,r18
   2a0a4:	002667c0 	call	2667c <_fflush_r>
   2a0a8:	10000d1e 	bne	r2,zero,2a0e0 <__sbprintf+0xb4>
   2a0ac:	d881030b 	ldhu	r2,1036(sp)
   2a0b0:	1080100c 	andi	r2,r2,64
   2a0b4:	10000326 	beq	r2,zero,2a0c4 <__sbprintf+0x98>
   2a0b8:	8080030b 	ldhu	r2,12(r16)
   2a0bc:	10801014 	ori	r2,r2,64
   2a0c0:	8080030d 	sth	r2,12(r16)
   2a0c4:	8805883a 	mov	r2,r17
   2a0c8:	dfc11d17 	ldw	ra,1140(sp)
   2a0cc:	dc811c17 	ldw	r18,1136(sp)
   2a0d0:	dc411b17 	ldw	r17,1132(sp)
   2a0d4:	dc011a17 	ldw	r16,1128(sp)
   2a0d8:	dec11e04 	addi	sp,sp,1144
   2a0dc:	f800283a 	ret
   2a0e0:	047fffc4 	movi	r17,-1
   2a0e4:	003ff106 	br	2a0ac <__alt_data_end+0xfffea0ac>

0002a0e8 <_calloc_r>:
   2a0e8:	298b383a 	mul	r5,r5,r6
   2a0ec:	defffe04 	addi	sp,sp,-8
   2a0f0:	dfc00115 	stw	ra,4(sp)
   2a0f4:	dc000015 	stw	r16,0(sp)
   2a0f8:	00212900 	call	21290 <_malloc_r>
   2a0fc:	10002926 	beq	r2,zero,2a1a4 <_calloc_r+0xbc>
   2a100:	11bfff17 	ldw	r6,-4(r2)
   2a104:	1021883a 	mov	r16,r2
   2a108:	00bfff04 	movi	r2,-4
   2a10c:	308c703a 	and	r6,r6,r2
   2a110:	00c00904 	movi	r3,36
   2a114:	308d883a 	add	r6,r6,r2
   2a118:	19801636 	bltu	r3,r6,2a174 <_calloc_r+0x8c>
   2a11c:	008004c4 	movi	r2,19
   2a120:	11800b2e 	bgeu	r2,r6,2a150 <_calloc_r+0x68>
   2a124:	80000015 	stw	zero,0(r16)
   2a128:	80000115 	stw	zero,4(r16)
   2a12c:	008006c4 	movi	r2,27
   2a130:	11801a2e 	bgeu	r2,r6,2a19c <_calloc_r+0xb4>
   2a134:	80000215 	stw	zero,8(r16)
   2a138:	80000315 	stw	zero,12(r16)
   2a13c:	30c0151e 	bne	r6,r3,2a194 <_calloc_r+0xac>
   2a140:	80000415 	stw	zero,16(r16)
   2a144:	80800604 	addi	r2,r16,24
   2a148:	80000515 	stw	zero,20(r16)
   2a14c:	00000106 	br	2a154 <_calloc_r+0x6c>
   2a150:	8005883a 	mov	r2,r16
   2a154:	10000015 	stw	zero,0(r2)
   2a158:	10000115 	stw	zero,4(r2)
   2a15c:	10000215 	stw	zero,8(r2)
   2a160:	8005883a 	mov	r2,r16
   2a164:	dfc00117 	ldw	ra,4(sp)
   2a168:	dc000017 	ldw	r16,0(sp)
   2a16c:	dec00204 	addi	sp,sp,8
   2a170:	f800283a 	ret
   2a174:	000b883a 	mov	r5,zero
   2a178:	8009883a 	mov	r4,r16
   2a17c:	0021cc80 	call	21cc8 <memset>
   2a180:	8005883a 	mov	r2,r16
   2a184:	dfc00117 	ldw	ra,4(sp)
   2a188:	dc000017 	ldw	r16,0(sp)
   2a18c:	dec00204 	addi	sp,sp,8
   2a190:	f800283a 	ret
   2a194:	80800404 	addi	r2,r16,16
   2a198:	003fee06 	br	2a154 <__alt_data_end+0xfffea154>
   2a19c:	80800204 	addi	r2,r16,8
   2a1a0:	003fec06 	br	2a154 <__alt_data_end+0xfffea154>
   2a1a4:	0005883a 	mov	r2,zero
   2a1a8:	003fee06 	br	2a164 <__alt_data_end+0xfffea164>

0002a1ac <__fputwc>:
   2a1ac:	defff804 	addi	sp,sp,-32
   2a1b0:	dcc00415 	stw	r19,16(sp)
   2a1b4:	dc800315 	stw	r18,12(sp)
   2a1b8:	dc000115 	stw	r16,4(sp)
   2a1bc:	dfc00715 	stw	ra,28(sp)
   2a1c0:	dd400615 	stw	r21,24(sp)
   2a1c4:	dd000515 	stw	r20,20(sp)
   2a1c8:	dc400215 	stw	r17,8(sp)
   2a1cc:	2027883a 	mov	r19,r4
   2a1d0:	2825883a 	mov	r18,r5
   2a1d4:	3021883a 	mov	r16,r6
   2a1d8:	00271800 	call	27180 <__locale_mb_cur_max>
   2a1dc:	00c00044 	movi	r3,1
   2a1e0:	10c03e26 	beq	r2,r3,2a2dc <__fputwc+0x130>
   2a1e4:	81c01704 	addi	r7,r16,92
   2a1e8:	900d883a 	mov	r6,r18
   2a1ec:	d80b883a 	mov	r5,sp
   2a1f0:	9809883a 	mov	r4,r19
   2a1f4:	002a50c0 	call	2a50c <_wcrtomb_r>
   2a1f8:	1029883a 	mov	r20,r2
   2a1fc:	00bfffc4 	movi	r2,-1
   2a200:	a0802026 	beq	r20,r2,2a284 <__fputwc+0xd8>
   2a204:	d9400003 	ldbu	r5,0(sp)
   2a208:	a0001c26 	beq	r20,zero,2a27c <__fputwc+0xd0>
   2a20c:	0023883a 	mov	r17,zero
   2a210:	05400284 	movi	r21,10
   2a214:	00000906 	br	2a23c <__fputwc+0x90>
   2a218:	80800017 	ldw	r2,0(r16)
   2a21c:	11400005 	stb	r5,0(r2)
   2a220:	80c00017 	ldw	r3,0(r16)
   2a224:	18c00044 	addi	r3,r3,1
   2a228:	80c00015 	stw	r3,0(r16)
   2a22c:	8c400044 	addi	r17,r17,1
   2a230:	dc45883a 	add	r2,sp,r17
   2a234:	8d00112e 	bgeu	r17,r20,2a27c <__fputwc+0xd0>
   2a238:	11400003 	ldbu	r5,0(r2)
   2a23c:	80c00217 	ldw	r3,8(r16)
   2a240:	18ffffc4 	addi	r3,r3,-1
   2a244:	80c00215 	stw	r3,8(r16)
   2a248:	183ff30e 	bge	r3,zero,2a218 <__alt_data_end+0xfffea218>
   2a24c:	80800617 	ldw	r2,24(r16)
   2a250:	18801916 	blt	r3,r2,2a2b8 <__fputwc+0x10c>
   2a254:	80800017 	ldw	r2,0(r16)
   2a258:	11400005 	stb	r5,0(r2)
   2a25c:	80800017 	ldw	r2,0(r16)
   2a260:	10c00003 	ldbu	r3,0(r2)
   2a264:	10800044 	addi	r2,r2,1
   2a268:	1d402326 	beq	r3,r21,2a2f8 <__fputwc+0x14c>
   2a26c:	80800015 	stw	r2,0(r16)
   2a270:	8c400044 	addi	r17,r17,1
   2a274:	dc45883a 	add	r2,sp,r17
   2a278:	8d3fef36 	bltu	r17,r20,2a238 <__alt_data_end+0xfffea238>
   2a27c:	9005883a 	mov	r2,r18
   2a280:	00000406 	br	2a294 <__fputwc+0xe8>
   2a284:	80c0030b 	ldhu	r3,12(r16)
   2a288:	a005883a 	mov	r2,r20
   2a28c:	18c01014 	ori	r3,r3,64
   2a290:	80c0030d 	sth	r3,12(r16)
   2a294:	dfc00717 	ldw	ra,28(sp)
   2a298:	dd400617 	ldw	r21,24(sp)
   2a29c:	dd000517 	ldw	r20,20(sp)
   2a2a0:	dcc00417 	ldw	r19,16(sp)
   2a2a4:	dc800317 	ldw	r18,12(sp)
   2a2a8:	dc400217 	ldw	r17,8(sp)
   2a2ac:	dc000117 	ldw	r16,4(sp)
   2a2b0:	dec00804 	addi	sp,sp,32
   2a2b4:	f800283a 	ret
   2a2b8:	800d883a 	mov	r6,r16
   2a2bc:	29403fcc 	andi	r5,r5,255
   2a2c0:	9809883a 	mov	r4,r19
   2a2c4:	002a3b40 	call	2a3b4 <__swbuf_r>
   2a2c8:	10bfffe0 	cmpeqi	r2,r2,-1
   2a2cc:	10803fcc 	andi	r2,r2,255
   2a2d0:	103fd626 	beq	r2,zero,2a22c <__alt_data_end+0xfffea22c>
   2a2d4:	00bfffc4 	movi	r2,-1
   2a2d8:	003fee06 	br	2a294 <__alt_data_end+0xfffea294>
   2a2dc:	90ffffc4 	addi	r3,r18,-1
   2a2e0:	01003f84 	movi	r4,254
   2a2e4:	20ffbf36 	bltu	r4,r3,2a1e4 <__alt_data_end+0xfffea1e4>
   2a2e8:	900b883a 	mov	r5,r18
   2a2ec:	dc800005 	stb	r18,0(sp)
   2a2f0:	1029883a 	mov	r20,r2
   2a2f4:	003fc506 	br	2a20c <__alt_data_end+0xfffea20c>
   2a2f8:	800d883a 	mov	r6,r16
   2a2fc:	a80b883a 	mov	r5,r21
   2a300:	9809883a 	mov	r4,r19
   2a304:	002a3b40 	call	2a3b4 <__swbuf_r>
   2a308:	10bfffe0 	cmpeqi	r2,r2,-1
   2a30c:	003fef06 	br	2a2cc <__alt_data_end+0xfffea2cc>

0002a310 <_fputwc_r>:
   2a310:	3080030b 	ldhu	r2,12(r6)
   2a314:	10c8000c 	andi	r3,r2,8192
   2a318:	1800051e 	bne	r3,zero,2a330 <_fputwc_r+0x20>
   2a31c:	30c01917 	ldw	r3,100(r6)
   2a320:	10880014 	ori	r2,r2,8192
   2a324:	3080030d 	sth	r2,12(r6)
   2a328:	18880014 	ori	r2,r3,8192
   2a32c:	30801915 	stw	r2,100(r6)
   2a330:	002a1ac1 	jmpi	2a1ac <__fputwc>

0002a334 <fputwc>:
   2a334:	008000f4 	movhi	r2,3
   2a338:	defffc04 	addi	sp,sp,-16
   2a33c:	108af504 	addi	r2,r2,11220
   2a340:	dc000115 	stw	r16,4(sp)
   2a344:	14000017 	ldw	r16,0(r2)
   2a348:	dc400215 	stw	r17,8(sp)
   2a34c:	dfc00315 	stw	ra,12(sp)
   2a350:	2023883a 	mov	r17,r4
   2a354:	80000226 	beq	r16,zero,2a360 <fputwc+0x2c>
   2a358:	80800e17 	ldw	r2,56(r16)
   2a35c:	10001026 	beq	r2,zero,2a3a0 <fputwc+0x6c>
   2a360:	2880030b 	ldhu	r2,12(r5)
   2a364:	10c8000c 	andi	r3,r2,8192
   2a368:	1800051e 	bne	r3,zero,2a380 <fputwc+0x4c>
   2a36c:	28c01917 	ldw	r3,100(r5)
   2a370:	10880014 	ori	r2,r2,8192
   2a374:	2880030d 	sth	r2,12(r5)
   2a378:	18880014 	ori	r2,r3,8192
   2a37c:	28801915 	stw	r2,100(r5)
   2a380:	280d883a 	mov	r6,r5
   2a384:	8009883a 	mov	r4,r16
   2a388:	880b883a 	mov	r5,r17
   2a38c:	dfc00317 	ldw	ra,12(sp)
   2a390:	dc400217 	ldw	r17,8(sp)
   2a394:	dc000117 	ldw	r16,4(sp)
   2a398:	dec00404 	addi	sp,sp,16
   2a39c:	002a1ac1 	jmpi	2a1ac <__fputwc>
   2a3a0:	8009883a 	mov	r4,r16
   2a3a4:	d9400015 	stw	r5,0(sp)
   2a3a8:	00208c80 	call	208c8 <__sinit>
   2a3ac:	d9400017 	ldw	r5,0(sp)
   2a3b0:	003feb06 	br	2a360 <__alt_data_end+0xfffea360>

0002a3b4 <__swbuf_r>:
   2a3b4:	defffb04 	addi	sp,sp,-20
   2a3b8:	dcc00315 	stw	r19,12(sp)
   2a3bc:	dc800215 	stw	r18,8(sp)
   2a3c0:	dc000015 	stw	r16,0(sp)
   2a3c4:	dfc00415 	stw	ra,16(sp)
   2a3c8:	dc400115 	stw	r17,4(sp)
   2a3cc:	2025883a 	mov	r18,r4
   2a3d0:	2827883a 	mov	r19,r5
   2a3d4:	3021883a 	mov	r16,r6
   2a3d8:	20000226 	beq	r4,zero,2a3e4 <__swbuf_r+0x30>
   2a3dc:	20800e17 	ldw	r2,56(r4)
   2a3e0:	10004226 	beq	r2,zero,2a4ec <__swbuf_r+0x138>
   2a3e4:	80800617 	ldw	r2,24(r16)
   2a3e8:	8100030b 	ldhu	r4,12(r16)
   2a3ec:	80800215 	stw	r2,8(r16)
   2a3f0:	2080020c 	andi	r2,r4,8
   2a3f4:	10003626 	beq	r2,zero,2a4d0 <__swbuf_r+0x11c>
   2a3f8:	80c00417 	ldw	r3,16(r16)
   2a3fc:	18003426 	beq	r3,zero,2a4d0 <__swbuf_r+0x11c>
   2a400:	2088000c 	andi	r2,r4,8192
   2a404:	9c403fcc 	andi	r17,r19,255
   2a408:	10001a26 	beq	r2,zero,2a474 <__swbuf_r+0xc0>
   2a40c:	80800017 	ldw	r2,0(r16)
   2a410:	81000517 	ldw	r4,20(r16)
   2a414:	10c7c83a 	sub	r3,r2,r3
   2a418:	1900200e 	bge	r3,r4,2a49c <__swbuf_r+0xe8>
   2a41c:	18c00044 	addi	r3,r3,1
   2a420:	81000217 	ldw	r4,8(r16)
   2a424:	11400044 	addi	r5,r2,1
   2a428:	81400015 	stw	r5,0(r16)
   2a42c:	213fffc4 	addi	r4,r4,-1
   2a430:	81000215 	stw	r4,8(r16)
   2a434:	14c00005 	stb	r19,0(r2)
   2a438:	80800517 	ldw	r2,20(r16)
   2a43c:	10c01e26 	beq	r2,r3,2a4b8 <__swbuf_r+0x104>
   2a440:	8080030b 	ldhu	r2,12(r16)
   2a444:	1080004c 	andi	r2,r2,1
   2a448:	10000226 	beq	r2,zero,2a454 <__swbuf_r+0xa0>
   2a44c:	00800284 	movi	r2,10
   2a450:	88801926 	beq	r17,r2,2a4b8 <__swbuf_r+0x104>
   2a454:	8805883a 	mov	r2,r17
   2a458:	dfc00417 	ldw	ra,16(sp)
   2a45c:	dcc00317 	ldw	r19,12(sp)
   2a460:	dc800217 	ldw	r18,8(sp)
   2a464:	dc400117 	ldw	r17,4(sp)
   2a468:	dc000017 	ldw	r16,0(sp)
   2a46c:	dec00504 	addi	sp,sp,20
   2a470:	f800283a 	ret
   2a474:	81401917 	ldw	r5,100(r16)
   2a478:	00b7ffc4 	movi	r2,-8193
   2a47c:	21080014 	ori	r4,r4,8192
   2a480:	2884703a 	and	r2,r5,r2
   2a484:	80801915 	stw	r2,100(r16)
   2a488:	80800017 	ldw	r2,0(r16)
   2a48c:	8100030d 	sth	r4,12(r16)
   2a490:	81000517 	ldw	r4,20(r16)
   2a494:	10c7c83a 	sub	r3,r2,r3
   2a498:	193fe016 	blt	r3,r4,2a41c <__alt_data_end+0xfffea41c>
   2a49c:	800b883a 	mov	r5,r16
   2a4a0:	9009883a 	mov	r4,r18
   2a4a4:	002667c0 	call	2667c <_fflush_r>
   2a4a8:	1000071e 	bne	r2,zero,2a4c8 <__swbuf_r+0x114>
   2a4ac:	80800017 	ldw	r2,0(r16)
   2a4b0:	00c00044 	movi	r3,1
   2a4b4:	003fda06 	br	2a420 <__alt_data_end+0xfffea420>
   2a4b8:	800b883a 	mov	r5,r16
   2a4bc:	9009883a 	mov	r4,r18
   2a4c0:	002667c0 	call	2667c <_fflush_r>
   2a4c4:	103fe326 	beq	r2,zero,2a454 <__alt_data_end+0xfffea454>
   2a4c8:	00bfffc4 	movi	r2,-1
   2a4cc:	003fe206 	br	2a458 <__alt_data_end+0xfffea458>
   2a4d0:	800b883a 	mov	r5,r16
   2a4d4:	9009883a 	mov	r4,r18
   2a4d8:	002492c0 	call	2492c <__swsetup_r>
   2a4dc:	103ffa1e 	bne	r2,zero,2a4c8 <__alt_data_end+0xfffea4c8>
   2a4e0:	8100030b 	ldhu	r4,12(r16)
   2a4e4:	80c00417 	ldw	r3,16(r16)
   2a4e8:	003fc506 	br	2a400 <__alt_data_end+0xfffea400>
   2a4ec:	00208c80 	call	208c8 <__sinit>
   2a4f0:	003fbc06 	br	2a3e4 <__alt_data_end+0xfffea3e4>

0002a4f4 <__swbuf>:
   2a4f4:	008000f4 	movhi	r2,3
   2a4f8:	108af504 	addi	r2,r2,11220
   2a4fc:	280d883a 	mov	r6,r5
   2a500:	200b883a 	mov	r5,r4
   2a504:	11000017 	ldw	r4,0(r2)
   2a508:	002a3b41 	jmpi	2a3b4 <__swbuf_r>

0002a50c <_wcrtomb_r>:
   2a50c:	defff604 	addi	sp,sp,-40
   2a510:	008000f4 	movhi	r2,3
   2a514:	dc800815 	stw	r18,32(sp)
   2a518:	dc400715 	stw	r17,28(sp)
   2a51c:	dc000615 	stw	r16,24(sp)
   2a520:	108af904 	addi	r2,r2,11236
   2a524:	dfc00915 	stw	ra,36(sp)
   2a528:	2021883a 	mov	r16,r4
   2a52c:	3823883a 	mov	r17,r7
   2a530:	14800017 	ldw	r18,0(r2)
   2a534:	28001426 	beq	r5,zero,2a588 <_wcrtomb_r+0x7c>
   2a538:	d9400415 	stw	r5,16(sp)
   2a53c:	d9800515 	stw	r6,20(sp)
   2a540:	00271740 	call	27174 <__locale_charset>
   2a544:	d9800517 	ldw	r6,20(sp)
   2a548:	d9400417 	ldw	r5,16(sp)
   2a54c:	100f883a 	mov	r7,r2
   2a550:	dc400015 	stw	r17,0(sp)
   2a554:	8009883a 	mov	r4,r16
   2a558:	903ee83a 	callr	r18
   2a55c:	00ffffc4 	movi	r3,-1
   2a560:	10c0031e 	bne	r2,r3,2a570 <_wcrtomb_r+0x64>
   2a564:	88000015 	stw	zero,0(r17)
   2a568:	00c02284 	movi	r3,138
   2a56c:	80c00015 	stw	r3,0(r16)
   2a570:	dfc00917 	ldw	ra,36(sp)
   2a574:	dc800817 	ldw	r18,32(sp)
   2a578:	dc400717 	ldw	r17,28(sp)
   2a57c:	dc000617 	ldw	r16,24(sp)
   2a580:	dec00a04 	addi	sp,sp,40
   2a584:	f800283a 	ret
   2a588:	00271740 	call	27174 <__locale_charset>
   2a58c:	100f883a 	mov	r7,r2
   2a590:	dc400015 	stw	r17,0(sp)
   2a594:	000d883a 	mov	r6,zero
   2a598:	d9400104 	addi	r5,sp,4
   2a59c:	8009883a 	mov	r4,r16
   2a5a0:	903ee83a 	callr	r18
   2a5a4:	003fed06 	br	2a55c <__alt_data_end+0xfffea55c>

0002a5a8 <wcrtomb>:
   2a5a8:	defff604 	addi	sp,sp,-40
   2a5ac:	008000f4 	movhi	r2,3
   2a5b0:	dc800615 	stw	r18,24(sp)
   2a5b4:	dc400515 	stw	r17,20(sp)
   2a5b8:	108af504 	addi	r2,r2,11220
   2a5bc:	dfc00915 	stw	ra,36(sp)
   2a5c0:	dd000815 	stw	r20,32(sp)
   2a5c4:	dcc00715 	stw	r19,28(sp)
   2a5c8:	dc000415 	stw	r16,16(sp)
   2a5cc:	3025883a 	mov	r18,r6
   2a5d0:	14400017 	ldw	r17,0(r2)
   2a5d4:	20001926 	beq	r4,zero,2a63c <wcrtomb+0x94>
   2a5d8:	008000f4 	movhi	r2,3
   2a5dc:	108af904 	addi	r2,r2,11236
   2a5e0:	15000017 	ldw	r20,0(r2)
   2a5e4:	2021883a 	mov	r16,r4
   2a5e8:	2827883a 	mov	r19,r5
   2a5ec:	00271740 	call	27174 <__locale_charset>
   2a5f0:	100f883a 	mov	r7,r2
   2a5f4:	dc800015 	stw	r18,0(sp)
   2a5f8:	980d883a 	mov	r6,r19
   2a5fc:	800b883a 	mov	r5,r16
   2a600:	8809883a 	mov	r4,r17
   2a604:	a03ee83a 	callr	r20
   2a608:	00ffffc4 	movi	r3,-1
   2a60c:	10c0031e 	bne	r2,r3,2a61c <wcrtomb+0x74>
   2a610:	90000015 	stw	zero,0(r18)
   2a614:	00c02284 	movi	r3,138
   2a618:	88c00015 	stw	r3,0(r17)
   2a61c:	dfc00917 	ldw	ra,36(sp)
   2a620:	dd000817 	ldw	r20,32(sp)
   2a624:	dcc00717 	ldw	r19,28(sp)
   2a628:	dc800617 	ldw	r18,24(sp)
   2a62c:	dc400517 	ldw	r17,20(sp)
   2a630:	dc000417 	ldw	r16,16(sp)
   2a634:	dec00a04 	addi	sp,sp,40
   2a638:	f800283a 	ret
   2a63c:	008000f4 	movhi	r2,3
   2a640:	108af904 	addi	r2,r2,11236
   2a644:	14000017 	ldw	r16,0(r2)
   2a648:	00271740 	call	27174 <__locale_charset>
   2a64c:	100f883a 	mov	r7,r2
   2a650:	dc800015 	stw	r18,0(sp)
   2a654:	000d883a 	mov	r6,zero
   2a658:	d9400104 	addi	r5,sp,4
   2a65c:	8809883a 	mov	r4,r17
   2a660:	803ee83a 	callr	r16
   2a664:	003fe806 	br	2a608 <__alt_data_end+0xfffea608>

0002a668 <__ascii_wctomb>:
   2a668:	28000526 	beq	r5,zero,2a680 <__ascii_wctomb+0x18>
   2a66c:	00803fc4 	movi	r2,255
   2a670:	11800536 	bltu	r2,r6,2a688 <__ascii_wctomb+0x20>
   2a674:	29800005 	stb	r6,0(r5)
   2a678:	00800044 	movi	r2,1
   2a67c:	f800283a 	ret
   2a680:	0005883a 	mov	r2,zero
   2a684:	f800283a 	ret
   2a688:	00802284 	movi	r2,138
   2a68c:	20800015 	stw	r2,0(r4)
   2a690:	00bfffc4 	movi	r2,-1
   2a694:	f800283a 	ret

0002a698 <_wctomb_r>:
   2a698:	008000f4 	movhi	r2,3
   2a69c:	defff904 	addi	sp,sp,-28
   2a6a0:	108af904 	addi	r2,r2,11236
   2a6a4:	dfc00615 	stw	ra,24(sp)
   2a6a8:	dc400515 	stw	r17,20(sp)
   2a6ac:	dc000415 	stw	r16,16(sp)
   2a6b0:	3823883a 	mov	r17,r7
   2a6b4:	14000017 	ldw	r16,0(r2)
   2a6b8:	d9000115 	stw	r4,4(sp)
   2a6bc:	d9400215 	stw	r5,8(sp)
   2a6c0:	d9800315 	stw	r6,12(sp)
   2a6c4:	00271740 	call	27174 <__locale_charset>
   2a6c8:	d9800317 	ldw	r6,12(sp)
   2a6cc:	d9400217 	ldw	r5,8(sp)
   2a6d0:	d9000117 	ldw	r4,4(sp)
   2a6d4:	100f883a 	mov	r7,r2
   2a6d8:	dc400015 	stw	r17,0(sp)
   2a6dc:	803ee83a 	callr	r16
   2a6e0:	dfc00617 	ldw	ra,24(sp)
   2a6e4:	dc400517 	ldw	r17,20(sp)
   2a6e8:	dc000417 	ldw	r16,16(sp)
   2a6ec:	dec00704 	addi	sp,sp,28
   2a6f0:	f800283a 	ret

0002a6f4 <__udivdi3>:
   2a6f4:	defff504 	addi	sp,sp,-44
   2a6f8:	dcc00415 	stw	r19,16(sp)
   2a6fc:	dc000115 	stw	r16,4(sp)
   2a700:	dfc00a15 	stw	ra,40(sp)
   2a704:	df000915 	stw	fp,36(sp)
   2a708:	ddc00815 	stw	r23,32(sp)
   2a70c:	dd800715 	stw	r22,28(sp)
   2a710:	dd400615 	stw	r21,24(sp)
   2a714:	dd000515 	stw	r20,20(sp)
   2a718:	dc800315 	stw	r18,12(sp)
   2a71c:	dc400215 	stw	r17,8(sp)
   2a720:	2027883a 	mov	r19,r4
   2a724:	2821883a 	mov	r16,r5
   2a728:	3800411e 	bne	r7,zero,2a830 <__udivdi3+0x13c>
   2a72c:	3023883a 	mov	r17,r6
   2a730:	2025883a 	mov	r18,r4
   2a734:	2980522e 	bgeu	r5,r6,2a880 <__udivdi3+0x18c>
   2a738:	00bfffd4 	movui	r2,65535
   2a73c:	282d883a 	mov	r22,r5
   2a740:	1180a836 	bltu	r2,r6,2a9e4 <__udivdi3+0x2f0>
   2a744:	00803fc4 	movi	r2,255
   2a748:	1185803a 	cmpltu	r2,r2,r6
   2a74c:	100490fa 	slli	r2,r2,3
   2a750:	3086d83a 	srl	r3,r6,r2
   2a754:	010000f4 	movhi	r4,3
   2a758:	2103c904 	addi	r4,r4,3876
   2a75c:	20c7883a 	add	r3,r4,r3
   2a760:	18c00003 	ldbu	r3,0(r3)
   2a764:	1885883a 	add	r2,r3,r2
   2a768:	00c00804 	movi	r3,32
   2a76c:	1887c83a 	sub	r3,r3,r2
   2a770:	18000526 	beq	r3,zero,2a788 <__udivdi3+0x94>
   2a774:	80e0983a 	sll	r16,r16,r3
   2a778:	9884d83a 	srl	r2,r19,r2
   2a77c:	30e2983a 	sll	r17,r6,r3
   2a780:	98e4983a 	sll	r18,r19,r3
   2a784:	142cb03a 	or	r22,r2,r16
   2a788:	882ad43a 	srli	r21,r17,16
   2a78c:	b009883a 	mov	r4,r22
   2a790:	8d3fffcc 	andi	r20,r17,65535
   2a794:	a80b883a 	mov	r5,r21
   2a798:	002b3000 	call	2b300 <__umodsi3>
   2a79c:	b009883a 	mov	r4,r22
   2a7a0:	a80b883a 	mov	r5,r21
   2a7a4:	1027883a 	mov	r19,r2
   2a7a8:	002b29c0 	call	2b29c <__udivsi3>
   2a7ac:	102d883a 	mov	r22,r2
   2a7b0:	9826943a 	slli	r19,r19,16
   2a7b4:	9004d43a 	srli	r2,r18,16
   2a7b8:	a5a1383a 	mul	r16,r20,r22
   2a7bc:	14c4b03a 	or	r2,r2,r19
   2a7c0:	1400052e 	bgeu	r2,r16,2a7d8 <__udivdi3+0xe4>
   2a7c4:	1445883a 	add	r2,r2,r17
   2a7c8:	b0ffffc4 	addi	r3,r22,-1
   2a7cc:	14400136 	bltu	r2,r17,2a7d4 <__udivdi3+0xe0>
   2a7d0:	14012336 	bltu	r2,r16,2ac60 <__udivdi3+0x56c>
   2a7d4:	182d883a 	mov	r22,r3
   2a7d8:	1421c83a 	sub	r16,r2,r16
   2a7dc:	a80b883a 	mov	r5,r21
   2a7e0:	8009883a 	mov	r4,r16
   2a7e4:	002b3000 	call	2b300 <__umodsi3>
   2a7e8:	1027883a 	mov	r19,r2
   2a7ec:	a80b883a 	mov	r5,r21
   2a7f0:	8009883a 	mov	r4,r16
   2a7f4:	002b29c0 	call	2b29c <__udivsi3>
   2a7f8:	9826943a 	slli	r19,r19,16
   2a7fc:	a0a9383a 	mul	r20,r20,r2
   2a800:	94bfffcc 	andi	r18,r18,65535
   2a804:	94e4b03a 	or	r18,r18,r19
   2a808:	9500052e 	bgeu	r18,r20,2a820 <__udivdi3+0x12c>
   2a80c:	8ca5883a 	add	r18,r17,r18
   2a810:	10ffffc4 	addi	r3,r2,-1
   2a814:	9440f136 	bltu	r18,r17,2abdc <__udivdi3+0x4e8>
   2a818:	9500f02e 	bgeu	r18,r20,2abdc <__udivdi3+0x4e8>
   2a81c:	10bfff84 	addi	r2,r2,-2
   2a820:	b00c943a 	slli	r6,r22,16
   2a824:	0007883a 	mov	r3,zero
   2a828:	3084b03a 	or	r2,r6,r2
   2a82c:	00005906 	br	2a994 <__udivdi3+0x2a0>
   2a830:	29c05636 	bltu	r5,r7,2a98c <__udivdi3+0x298>
   2a834:	00bfffd4 	movui	r2,65535
   2a838:	11c0622e 	bgeu	r2,r7,2a9c4 <__udivdi3+0x2d0>
   2a83c:	00804034 	movhi	r2,256
   2a840:	10bfffc4 	addi	r2,r2,-1
   2a844:	11c0ee36 	bltu	r2,r7,2ac00 <__udivdi3+0x50c>
   2a848:	00800404 	movi	r2,16
   2a84c:	3886d83a 	srl	r3,r7,r2
   2a850:	010000f4 	movhi	r4,3
   2a854:	2103c904 	addi	r4,r4,3876
   2a858:	20c7883a 	add	r3,r4,r3
   2a85c:	18c00003 	ldbu	r3,0(r3)
   2a860:	05400804 	movi	r21,32
   2a864:	1885883a 	add	r2,r3,r2
   2a868:	a8abc83a 	sub	r21,r21,r2
   2a86c:	a800621e 	bne	r21,zero,2a9f8 <__udivdi3+0x304>
   2a870:	3c00e936 	bltu	r7,r16,2ac18 <__udivdi3+0x524>
   2a874:	9985403a 	cmpgeu	r2,r19,r6
   2a878:	0007883a 	mov	r3,zero
   2a87c:	00004506 	br	2a994 <__udivdi3+0x2a0>
   2a880:	3000041e 	bne	r6,zero,2a894 <__udivdi3+0x1a0>
   2a884:	000b883a 	mov	r5,zero
   2a888:	01000044 	movi	r4,1
   2a88c:	002b29c0 	call	2b29c <__udivsi3>
   2a890:	1023883a 	mov	r17,r2
   2a894:	00bfffd4 	movui	r2,65535
   2a898:	14404e2e 	bgeu	r2,r17,2a9d4 <__udivdi3+0x2e0>
   2a89c:	00804034 	movhi	r2,256
   2a8a0:	10bfffc4 	addi	r2,r2,-1
   2a8a4:	1440d836 	bltu	r2,r17,2ac08 <__udivdi3+0x514>
   2a8a8:	00800404 	movi	r2,16
   2a8ac:	8886d83a 	srl	r3,r17,r2
   2a8b0:	010000f4 	movhi	r4,3
   2a8b4:	2103c904 	addi	r4,r4,3876
   2a8b8:	20c7883a 	add	r3,r4,r3
   2a8bc:	18c00003 	ldbu	r3,0(r3)
   2a8c0:	1885883a 	add	r2,r3,r2
   2a8c4:	00c00804 	movi	r3,32
   2a8c8:	1887c83a 	sub	r3,r3,r2
   2a8cc:	18008f1e 	bne	r3,zero,2ab0c <__udivdi3+0x418>
   2a8d0:	882ad43a 	srli	r21,r17,16
   2a8d4:	8461c83a 	sub	r16,r16,r17
   2a8d8:	8d3fffcc 	andi	r20,r17,65535
   2a8dc:	00c00044 	movi	r3,1
   2a8e0:	8009883a 	mov	r4,r16
   2a8e4:	a80b883a 	mov	r5,r21
   2a8e8:	d8c00015 	stw	r3,0(sp)
   2a8ec:	002b3000 	call	2b300 <__umodsi3>
   2a8f0:	8009883a 	mov	r4,r16
   2a8f4:	a80b883a 	mov	r5,r21
   2a8f8:	1027883a 	mov	r19,r2
   2a8fc:	002b29c0 	call	2b29c <__udivsi3>
   2a900:	9826943a 	slli	r19,r19,16
   2a904:	9008d43a 	srli	r4,r18,16
   2a908:	1521383a 	mul	r16,r2,r20
   2a90c:	102d883a 	mov	r22,r2
   2a910:	24c8b03a 	or	r4,r4,r19
   2a914:	d8c00017 	ldw	r3,0(sp)
   2a918:	2400052e 	bgeu	r4,r16,2a930 <__udivdi3+0x23c>
   2a91c:	2449883a 	add	r4,r4,r17
   2a920:	b0bfffc4 	addi	r2,r22,-1
   2a924:	24400136 	bltu	r4,r17,2a92c <__udivdi3+0x238>
   2a928:	2400ca36 	bltu	r4,r16,2ac54 <__udivdi3+0x560>
   2a92c:	102d883a 	mov	r22,r2
   2a930:	2421c83a 	sub	r16,r4,r16
   2a934:	a80b883a 	mov	r5,r21
   2a938:	8009883a 	mov	r4,r16
   2a93c:	d8c00015 	stw	r3,0(sp)
   2a940:	002b3000 	call	2b300 <__umodsi3>
   2a944:	1027883a 	mov	r19,r2
   2a948:	a80b883a 	mov	r5,r21
   2a94c:	8009883a 	mov	r4,r16
   2a950:	002b29c0 	call	2b29c <__udivsi3>
   2a954:	9826943a 	slli	r19,r19,16
   2a958:	1529383a 	mul	r20,r2,r20
   2a95c:	94bfffcc 	andi	r18,r18,65535
   2a960:	94e4b03a 	or	r18,r18,r19
   2a964:	d8c00017 	ldw	r3,0(sp)
   2a968:	9500052e 	bgeu	r18,r20,2a980 <__udivdi3+0x28c>
   2a96c:	8ca5883a 	add	r18,r17,r18
   2a970:	113fffc4 	addi	r4,r2,-1
   2a974:	94409736 	bltu	r18,r17,2abd4 <__udivdi3+0x4e0>
   2a978:	9500962e 	bgeu	r18,r20,2abd4 <__udivdi3+0x4e0>
   2a97c:	10bfff84 	addi	r2,r2,-2
   2a980:	b00c943a 	slli	r6,r22,16
   2a984:	3084b03a 	or	r2,r6,r2
   2a988:	00000206 	br	2a994 <__udivdi3+0x2a0>
   2a98c:	0007883a 	mov	r3,zero
   2a990:	0005883a 	mov	r2,zero
   2a994:	dfc00a17 	ldw	ra,40(sp)
   2a998:	df000917 	ldw	fp,36(sp)
   2a99c:	ddc00817 	ldw	r23,32(sp)
   2a9a0:	dd800717 	ldw	r22,28(sp)
   2a9a4:	dd400617 	ldw	r21,24(sp)
   2a9a8:	dd000517 	ldw	r20,20(sp)
   2a9ac:	dcc00417 	ldw	r19,16(sp)
   2a9b0:	dc800317 	ldw	r18,12(sp)
   2a9b4:	dc400217 	ldw	r17,8(sp)
   2a9b8:	dc000117 	ldw	r16,4(sp)
   2a9bc:	dec00b04 	addi	sp,sp,44
   2a9c0:	f800283a 	ret
   2a9c4:	00803fc4 	movi	r2,255
   2a9c8:	11c5803a 	cmpltu	r2,r2,r7
   2a9cc:	100490fa 	slli	r2,r2,3
   2a9d0:	003f9e06 	br	2a84c <__alt_data_end+0xfffea84c>
   2a9d4:	00803fc4 	movi	r2,255
   2a9d8:	1445803a 	cmpltu	r2,r2,r17
   2a9dc:	100490fa 	slli	r2,r2,3
   2a9e0:	003fb206 	br	2a8ac <__alt_data_end+0xfffea8ac>
   2a9e4:	00804034 	movhi	r2,256
   2a9e8:	10bfffc4 	addi	r2,r2,-1
   2a9ec:	11808836 	bltu	r2,r6,2ac10 <__udivdi3+0x51c>
   2a9f0:	00800404 	movi	r2,16
   2a9f4:	003f5606 	br	2a750 <__alt_data_end+0xfffea750>
   2a9f8:	30aed83a 	srl	r23,r6,r2
   2a9fc:	3d4e983a 	sll	r7,r7,r21
   2aa00:	80acd83a 	srl	r22,r16,r2
   2aa04:	9884d83a 	srl	r2,r19,r2
   2aa08:	3deeb03a 	or	r23,r7,r23
   2aa0c:	b824d43a 	srli	r18,r23,16
   2aa10:	8560983a 	sll	r16,r16,r21
   2aa14:	b009883a 	mov	r4,r22
   2aa18:	900b883a 	mov	r5,r18
   2aa1c:	3568983a 	sll	r20,r6,r21
   2aa20:	1420b03a 	or	r16,r2,r16
   2aa24:	002b3000 	call	2b300 <__umodsi3>
   2aa28:	b009883a 	mov	r4,r22
   2aa2c:	900b883a 	mov	r5,r18
   2aa30:	1023883a 	mov	r17,r2
   2aa34:	002b29c0 	call	2b29c <__udivsi3>
   2aa38:	8808943a 	slli	r4,r17,16
   2aa3c:	bf3fffcc 	andi	fp,r23,65535
   2aa40:	8006d43a 	srli	r3,r16,16
   2aa44:	e0a3383a 	mul	r17,fp,r2
   2aa48:	100d883a 	mov	r6,r2
   2aa4c:	1906b03a 	or	r3,r3,r4
   2aa50:	1c40042e 	bgeu	r3,r17,2aa64 <__udivdi3+0x370>
   2aa54:	1dc7883a 	add	r3,r3,r23
   2aa58:	10bfffc4 	addi	r2,r2,-1
   2aa5c:	1dc0752e 	bgeu	r3,r23,2ac34 <__udivdi3+0x540>
   2aa60:	100d883a 	mov	r6,r2
   2aa64:	1c63c83a 	sub	r17,r3,r17
   2aa68:	900b883a 	mov	r5,r18
   2aa6c:	8809883a 	mov	r4,r17
   2aa70:	d9800015 	stw	r6,0(sp)
   2aa74:	002b3000 	call	2b300 <__umodsi3>
   2aa78:	102d883a 	mov	r22,r2
   2aa7c:	8809883a 	mov	r4,r17
   2aa80:	900b883a 	mov	r5,r18
   2aa84:	002b29c0 	call	2b29c <__udivsi3>
   2aa88:	b02c943a 	slli	r22,r22,16
   2aa8c:	e089383a 	mul	r4,fp,r2
   2aa90:	843fffcc 	andi	r16,r16,65535
   2aa94:	85a0b03a 	or	r16,r16,r22
   2aa98:	d9800017 	ldw	r6,0(sp)
   2aa9c:	8100042e 	bgeu	r16,r4,2aab0 <__udivdi3+0x3bc>
   2aaa0:	85e1883a 	add	r16,r16,r23
   2aaa4:	10ffffc4 	addi	r3,r2,-1
   2aaa8:	85c05e2e 	bgeu	r16,r23,2ac24 <__udivdi3+0x530>
   2aaac:	1805883a 	mov	r2,r3
   2aab0:	300c943a 	slli	r6,r6,16
   2aab4:	a17fffcc 	andi	r5,r20,65535
   2aab8:	a028d43a 	srli	r20,r20,16
   2aabc:	3084b03a 	or	r2,r6,r2
   2aac0:	10ffffcc 	andi	r3,r2,65535
   2aac4:	100cd43a 	srli	r6,r2,16
   2aac8:	194f383a 	mul	r7,r3,r5
   2aacc:	1d07383a 	mul	r3,r3,r20
   2aad0:	314b383a 	mul	r5,r6,r5
   2aad4:	3810d43a 	srli	r8,r7,16
   2aad8:	8121c83a 	sub	r16,r16,r4
   2aadc:	1947883a 	add	r3,r3,r5
   2aae0:	40c7883a 	add	r3,r8,r3
   2aae4:	350d383a 	mul	r6,r6,r20
   2aae8:	1940022e 	bgeu	r3,r5,2aaf4 <__udivdi3+0x400>
   2aaec:	01000074 	movhi	r4,1
   2aaf0:	310d883a 	add	r6,r6,r4
   2aaf4:	1828d43a 	srli	r20,r3,16
   2aaf8:	a18d883a 	add	r6,r20,r6
   2aafc:	81803e36 	bltu	r16,r6,2abf8 <__udivdi3+0x504>
   2ab00:	81803826 	beq	r16,r6,2abe4 <__udivdi3+0x4f0>
   2ab04:	0007883a 	mov	r3,zero
   2ab08:	003fa206 	br	2a994 <__alt_data_end+0xfffea994>
   2ab0c:	88e2983a 	sll	r17,r17,r3
   2ab10:	80a8d83a 	srl	r20,r16,r2
   2ab14:	80e0983a 	sll	r16,r16,r3
   2ab18:	882ad43a 	srli	r21,r17,16
   2ab1c:	9884d83a 	srl	r2,r19,r2
   2ab20:	a009883a 	mov	r4,r20
   2ab24:	a80b883a 	mov	r5,r21
   2ab28:	142eb03a 	or	r23,r2,r16
   2ab2c:	98e4983a 	sll	r18,r19,r3
   2ab30:	002b3000 	call	2b300 <__umodsi3>
   2ab34:	a009883a 	mov	r4,r20
   2ab38:	a80b883a 	mov	r5,r21
   2ab3c:	1021883a 	mov	r16,r2
   2ab40:	002b29c0 	call	2b29c <__udivsi3>
   2ab44:	1039883a 	mov	fp,r2
   2ab48:	8d3fffcc 	andi	r20,r17,65535
   2ab4c:	8020943a 	slli	r16,r16,16
   2ab50:	b804d43a 	srli	r2,r23,16
   2ab54:	a72d383a 	mul	r22,r20,fp
   2ab58:	1404b03a 	or	r2,r2,r16
   2ab5c:	1580062e 	bgeu	r2,r22,2ab78 <__udivdi3+0x484>
   2ab60:	1445883a 	add	r2,r2,r17
   2ab64:	e0ffffc4 	addi	r3,fp,-1
   2ab68:	14403836 	bltu	r2,r17,2ac4c <__udivdi3+0x558>
   2ab6c:	1580372e 	bgeu	r2,r22,2ac4c <__udivdi3+0x558>
   2ab70:	e73fff84 	addi	fp,fp,-2
   2ab74:	1445883a 	add	r2,r2,r17
   2ab78:	15adc83a 	sub	r22,r2,r22
   2ab7c:	a80b883a 	mov	r5,r21
   2ab80:	b009883a 	mov	r4,r22
   2ab84:	002b3000 	call	2b300 <__umodsi3>
   2ab88:	1027883a 	mov	r19,r2
   2ab8c:	b009883a 	mov	r4,r22
   2ab90:	a80b883a 	mov	r5,r21
   2ab94:	002b29c0 	call	2b29c <__udivsi3>
   2ab98:	9826943a 	slli	r19,r19,16
   2ab9c:	a0a1383a 	mul	r16,r20,r2
   2aba0:	b93fffcc 	andi	r4,r23,65535
   2aba4:	24c8b03a 	or	r4,r4,r19
   2aba8:	2400062e 	bgeu	r4,r16,2abc4 <__udivdi3+0x4d0>
   2abac:	2449883a 	add	r4,r4,r17
   2abb0:	10ffffc4 	addi	r3,r2,-1
   2abb4:	24402336 	bltu	r4,r17,2ac44 <__udivdi3+0x550>
   2abb8:	2400222e 	bgeu	r4,r16,2ac44 <__udivdi3+0x550>
   2abbc:	10bfff84 	addi	r2,r2,-2
   2abc0:	2449883a 	add	r4,r4,r17
   2abc4:	e038943a 	slli	fp,fp,16
   2abc8:	2421c83a 	sub	r16,r4,r16
   2abcc:	e086b03a 	or	r3,fp,r2
   2abd0:	003f4306 	br	2a8e0 <__alt_data_end+0xfffea8e0>
   2abd4:	2005883a 	mov	r2,r4
   2abd8:	003f6906 	br	2a980 <__alt_data_end+0xfffea980>
   2abdc:	1805883a 	mov	r2,r3
   2abe0:	003f0f06 	br	2a820 <__alt_data_end+0xfffea820>
   2abe4:	1806943a 	slli	r3,r3,16
   2abe8:	9d66983a 	sll	r19,r19,r21
   2abec:	39ffffcc 	andi	r7,r7,65535
   2abf0:	19c7883a 	add	r3,r3,r7
   2abf4:	98ffc32e 	bgeu	r19,r3,2ab04 <__alt_data_end+0xfffeab04>
   2abf8:	10bfffc4 	addi	r2,r2,-1
   2abfc:	003fc106 	br	2ab04 <__alt_data_end+0xfffeab04>
   2ac00:	00800604 	movi	r2,24
   2ac04:	003f1106 	br	2a84c <__alt_data_end+0xfffea84c>
   2ac08:	00800604 	movi	r2,24
   2ac0c:	003f2706 	br	2a8ac <__alt_data_end+0xfffea8ac>
   2ac10:	00800604 	movi	r2,24
   2ac14:	003ece06 	br	2a750 <__alt_data_end+0xfffea750>
   2ac18:	0007883a 	mov	r3,zero
   2ac1c:	00800044 	movi	r2,1
   2ac20:	003f5c06 	br	2a994 <__alt_data_end+0xfffea994>
   2ac24:	813fa12e 	bgeu	r16,r4,2aaac <__alt_data_end+0xfffeaaac>
   2ac28:	10bfff84 	addi	r2,r2,-2
   2ac2c:	85e1883a 	add	r16,r16,r23
   2ac30:	003f9f06 	br	2aab0 <__alt_data_end+0xfffeaab0>
   2ac34:	1c7f8a2e 	bgeu	r3,r17,2aa60 <__alt_data_end+0xfffeaa60>
   2ac38:	31bfff84 	addi	r6,r6,-2
   2ac3c:	1dc7883a 	add	r3,r3,r23
   2ac40:	003f8806 	br	2aa64 <__alt_data_end+0xfffeaa64>
   2ac44:	1805883a 	mov	r2,r3
   2ac48:	003fde06 	br	2abc4 <__alt_data_end+0xfffeabc4>
   2ac4c:	1839883a 	mov	fp,r3
   2ac50:	003fc906 	br	2ab78 <__alt_data_end+0xfffeab78>
   2ac54:	b5bfff84 	addi	r22,r22,-2
   2ac58:	2449883a 	add	r4,r4,r17
   2ac5c:	003f3406 	br	2a930 <__alt_data_end+0xfffea930>
   2ac60:	b5bfff84 	addi	r22,r22,-2
   2ac64:	1445883a 	add	r2,r2,r17
   2ac68:	003edb06 	br	2a7d8 <__alt_data_end+0xfffea7d8>

0002ac6c <__umoddi3>:
   2ac6c:	defff404 	addi	sp,sp,-48
   2ac70:	df000a15 	stw	fp,40(sp)
   2ac74:	dc400315 	stw	r17,12(sp)
   2ac78:	dc000215 	stw	r16,8(sp)
   2ac7c:	dfc00b15 	stw	ra,44(sp)
   2ac80:	ddc00915 	stw	r23,36(sp)
   2ac84:	dd800815 	stw	r22,32(sp)
   2ac88:	dd400715 	stw	r21,28(sp)
   2ac8c:	dd000615 	stw	r20,24(sp)
   2ac90:	dcc00515 	stw	r19,20(sp)
   2ac94:	dc800415 	stw	r18,16(sp)
   2ac98:	2021883a 	mov	r16,r4
   2ac9c:	2823883a 	mov	r17,r5
   2aca0:	2839883a 	mov	fp,r5
   2aca4:	38003c1e 	bne	r7,zero,2ad98 <__umoddi3+0x12c>
   2aca8:	3027883a 	mov	r19,r6
   2acac:	2029883a 	mov	r20,r4
   2acb0:	2980512e 	bgeu	r5,r6,2adf8 <__umoddi3+0x18c>
   2acb4:	00bfffd4 	movui	r2,65535
   2acb8:	11809a36 	bltu	r2,r6,2af24 <__umoddi3+0x2b8>
   2acbc:	01003fc4 	movi	r4,255
   2acc0:	2189803a 	cmpltu	r4,r4,r6
   2acc4:	200890fa 	slli	r4,r4,3
   2acc8:	3104d83a 	srl	r2,r6,r4
   2accc:	00c000f4 	movhi	r3,3
   2acd0:	18c3c904 	addi	r3,r3,3876
   2acd4:	1885883a 	add	r2,r3,r2
   2acd8:	10c00003 	ldbu	r3,0(r2)
   2acdc:	00800804 	movi	r2,32
   2ace0:	1909883a 	add	r4,r3,r4
   2ace4:	1125c83a 	sub	r18,r2,r4
   2ace8:	90000526 	beq	r18,zero,2ad00 <__umoddi3+0x94>
   2acec:	8ca2983a 	sll	r17,r17,r18
   2acf0:	8108d83a 	srl	r4,r16,r4
   2acf4:	34a6983a 	sll	r19,r6,r18
   2acf8:	84a8983a 	sll	r20,r16,r18
   2acfc:	2478b03a 	or	fp,r4,r17
   2ad00:	982ed43a 	srli	r23,r19,16
   2ad04:	e009883a 	mov	r4,fp
   2ad08:	9dbfffcc 	andi	r22,r19,65535
   2ad0c:	b80b883a 	mov	r5,r23
   2ad10:	002b3000 	call	2b300 <__umodsi3>
   2ad14:	e009883a 	mov	r4,fp
   2ad18:	b80b883a 	mov	r5,r23
   2ad1c:	102b883a 	mov	r21,r2
   2ad20:	002b29c0 	call	2b29c <__udivsi3>
   2ad24:	a806943a 	slli	r3,r21,16
   2ad28:	a008d43a 	srli	r4,r20,16
   2ad2c:	b085383a 	mul	r2,r22,r2
   2ad30:	20c8b03a 	or	r4,r4,r3
   2ad34:	2080032e 	bgeu	r4,r2,2ad44 <__umoddi3+0xd8>
   2ad38:	24c9883a 	add	r4,r4,r19
   2ad3c:	24c00136 	bltu	r4,r19,2ad44 <__umoddi3+0xd8>
   2ad40:	20811036 	bltu	r4,r2,2b184 <__umoddi3+0x518>
   2ad44:	20abc83a 	sub	r21,r4,r2
   2ad48:	b80b883a 	mov	r5,r23
   2ad4c:	a809883a 	mov	r4,r21
   2ad50:	002b3000 	call	2b300 <__umodsi3>
   2ad54:	1023883a 	mov	r17,r2
   2ad58:	b80b883a 	mov	r5,r23
   2ad5c:	a809883a 	mov	r4,r21
   2ad60:	002b29c0 	call	2b29c <__udivsi3>
   2ad64:	8822943a 	slli	r17,r17,16
   2ad68:	b085383a 	mul	r2,r22,r2
   2ad6c:	a0ffffcc 	andi	r3,r20,65535
   2ad70:	1c46b03a 	or	r3,r3,r17
   2ad74:	1880042e 	bgeu	r3,r2,2ad88 <__umoddi3+0x11c>
   2ad78:	1cc7883a 	add	r3,r3,r19
   2ad7c:	1cc00236 	bltu	r3,r19,2ad88 <__umoddi3+0x11c>
   2ad80:	1880012e 	bgeu	r3,r2,2ad88 <__umoddi3+0x11c>
   2ad84:	1cc7883a 	add	r3,r3,r19
   2ad88:	1885c83a 	sub	r2,r3,r2
   2ad8c:	1484d83a 	srl	r2,r2,r18
   2ad90:	0007883a 	mov	r3,zero
   2ad94:	00004f06 	br	2aed4 <__umoddi3+0x268>
   2ad98:	29c04c36 	bltu	r5,r7,2aecc <__umoddi3+0x260>
   2ad9c:	00bfffd4 	movui	r2,65535
   2ada0:	11c0582e 	bgeu	r2,r7,2af04 <__umoddi3+0x298>
   2ada4:	00804034 	movhi	r2,256
   2ada8:	10bfffc4 	addi	r2,r2,-1
   2adac:	11c0e736 	bltu	r2,r7,2b14c <__umoddi3+0x4e0>
   2adb0:	01000404 	movi	r4,16
   2adb4:	3904d83a 	srl	r2,r7,r4
   2adb8:	00c000f4 	movhi	r3,3
   2adbc:	18c3c904 	addi	r3,r3,3876
   2adc0:	1885883a 	add	r2,r3,r2
   2adc4:	14c00003 	ldbu	r19,0(r2)
   2adc8:	00c00804 	movi	r3,32
   2adcc:	9927883a 	add	r19,r19,r4
   2add0:	1ce9c83a 	sub	r20,r3,r19
   2add4:	a000581e 	bne	r20,zero,2af38 <__umoddi3+0x2cc>
   2add8:	3c400136 	bltu	r7,r17,2ade0 <__umoddi3+0x174>
   2addc:	8180eb36 	bltu	r16,r6,2b18c <__umoddi3+0x520>
   2ade0:	8185c83a 	sub	r2,r16,r6
   2ade4:	89e3c83a 	sub	r17,r17,r7
   2ade8:	8089803a 	cmpltu	r4,r16,r2
   2adec:	8939c83a 	sub	fp,r17,r4
   2adf0:	e007883a 	mov	r3,fp
   2adf4:	00003706 	br	2aed4 <__umoddi3+0x268>
   2adf8:	3000041e 	bne	r6,zero,2ae0c <__umoddi3+0x1a0>
   2adfc:	000b883a 	mov	r5,zero
   2ae00:	01000044 	movi	r4,1
   2ae04:	002b29c0 	call	2b29c <__udivsi3>
   2ae08:	1027883a 	mov	r19,r2
   2ae0c:	00bfffd4 	movui	r2,65535
   2ae10:	14c0402e 	bgeu	r2,r19,2af14 <__umoddi3+0x2a8>
   2ae14:	00804034 	movhi	r2,256
   2ae18:	10bfffc4 	addi	r2,r2,-1
   2ae1c:	14c0cd36 	bltu	r2,r19,2b154 <__umoddi3+0x4e8>
   2ae20:	00800404 	movi	r2,16
   2ae24:	9886d83a 	srl	r3,r19,r2
   2ae28:	010000f4 	movhi	r4,3
   2ae2c:	2103c904 	addi	r4,r4,3876
   2ae30:	20c7883a 	add	r3,r4,r3
   2ae34:	18c00003 	ldbu	r3,0(r3)
   2ae38:	1887883a 	add	r3,r3,r2
   2ae3c:	00800804 	movi	r2,32
   2ae40:	10e5c83a 	sub	r18,r2,r3
   2ae44:	9000901e 	bne	r18,zero,2b088 <__umoddi3+0x41c>
   2ae48:	982cd43a 	srli	r22,r19,16
   2ae4c:	8ce3c83a 	sub	r17,r17,r19
   2ae50:	9d7fffcc 	andi	r21,r19,65535
   2ae54:	b00b883a 	mov	r5,r22
   2ae58:	8809883a 	mov	r4,r17
   2ae5c:	002b3000 	call	2b300 <__umodsi3>
   2ae60:	8809883a 	mov	r4,r17
   2ae64:	b00b883a 	mov	r5,r22
   2ae68:	1021883a 	mov	r16,r2
   2ae6c:	002b29c0 	call	2b29c <__udivsi3>
   2ae70:	8006943a 	slli	r3,r16,16
   2ae74:	a008d43a 	srli	r4,r20,16
   2ae78:	1545383a 	mul	r2,r2,r21
   2ae7c:	20c8b03a 	or	r4,r4,r3
   2ae80:	2080042e 	bgeu	r4,r2,2ae94 <__umoddi3+0x228>
   2ae84:	24c9883a 	add	r4,r4,r19
   2ae88:	24c00236 	bltu	r4,r19,2ae94 <__umoddi3+0x228>
   2ae8c:	2080012e 	bgeu	r4,r2,2ae94 <__umoddi3+0x228>
   2ae90:	24c9883a 	add	r4,r4,r19
   2ae94:	20a1c83a 	sub	r16,r4,r2
   2ae98:	b00b883a 	mov	r5,r22
   2ae9c:	8009883a 	mov	r4,r16
   2aea0:	002b3000 	call	2b300 <__umodsi3>
   2aea4:	1023883a 	mov	r17,r2
   2aea8:	b00b883a 	mov	r5,r22
   2aeac:	8009883a 	mov	r4,r16
   2aeb0:	002b29c0 	call	2b29c <__udivsi3>
   2aeb4:	8822943a 	slli	r17,r17,16
   2aeb8:	1545383a 	mul	r2,r2,r21
   2aebc:	a53fffcc 	andi	r20,r20,65535
   2aec0:	a446b03a 	or	r3,r20,r17
   2aec4:	18bfb02e 	bgeu	r3,r2,2ad88 <__alt_data_end+0xfffead88>
   2aec8:	003fab06 	br	2ad78 <__alt_data_end+0xfffead78>
   2aecc:	2005883a 	mov	r2,r4
   2aed0:	2807883a 	mov	r3,r5
   2aed4:	dfc00b17 	ldw	ra,44(sp)
   2aed8:	df000a17 	ldw	fp,40(sp)
   2aedc:	ddc00917 	ldw	r23,36(sp)
   2aee0:	dd800817 	ldw	r22,32(sp)
   2aee4:	dd400717 	ldw	r21,28(sp)
   2aee8:	dd000617 	ldw	r20,24(sp)
   2aeec:	dcc00517 	ldw	r19,20(sp)
   2aef0:	dc800417 	ldw	r18,16(sp)
   2aef4:	dc400317 	ldw	r17,12(sp)
   2aef8:	dc000217 	ldw	r16,8(sp)
   2aefc:	dec00c04 	addi	sp,sp,48
   2af00:	f800283a 	ret
   2af04:	04c03fc4 	movi	r19,255
   2af08:	99c9803a 	cmpltu	r4,r19,r7
   2af0c:	200890fa 	slli	r4,r4,3
   2af10:	003fa806 	br	2adb4 <__alt_data_end+0xfffeadb4>
   2af14:	00803fc4 	movi	r2,255
   2af18:	14c5803a 	cmpltu	r2,r2,r19
   2af1c:	100490fa 	slli	r2,r2,3
   2af20:	003fc006 	br	2ae24 <__alt_data_end+0xfffeae24>
   2af24:	00804034 	movhi	r2,256
   2af28:	10bfffc4 	addi	r2,r2,-1
   2af2c:	11808b36 	bltu	r2,r6,2b15c <__umoddi3+0x4f0>
   2af30:	01000404 	movi	r4,16
   2af34:	003f6406 	br	2acc8 <__alt_data_end+0xfffeacc8>
   2af38:	34c4d83a 	srl	r2,r6,r19
   2af3c:	3d0e983a 	sll	r7,r7,r20
   2af40:	8cf8d83a 	srl	fp,r17,r19
   2af44:	8d10983a 	sll	r8,r17,r20
   2af48:	38aab03a 	or	r21,r7,r2
   2af4c:	a82cd43a 	srli	r22,r21,16
   2af50:	84e2d83a 	srl	r17,r16,r19
   2af54:	e009883a 	mov	r4,fp
   2af58:	b00b883a 	mov	r5,r22
   2af5c:	8a22b03a 	or	r17,r17,r8
   2af60:	3524983a 	sll	r18,r6,r20
   2af64:	002b3000 	call	2b300 <__umodsi3>
   2af68:	e009883a 	mov	r4,fp
   2af6c:	b00b883a 	mov	r5,r22
   2af70:	102f883a 	mov	r23,r2
   2af74:	002b29c0 	call	2b29c <__udivsi3>
   2af78:	100d883a 	mov	r6,r2
   2af7c:	b808943a 	slli	r4,r23,16
   2af80:	aa3fffcc 	andi	r8,r21,65535
   2af84:	8804d43a 	srli	r2,r17,16
   2af88:	41af383a 	mul	r23,r8,r6
   2af8c:	8520983a 	sll	r16,r16,r20
   2af90:	1104b03a 	or	r2,r2,r4
   2af94:	15c0042e 	bgeu	r2,r23,2afa8 <__umoddi3+0x33c>
   2af98:	1545883a 	add	r2,r2,r21
   2af9c:	30ffffc4 	addi	r3,r6,-1
   2afa0:	1540742e 	bgeu	r2,r21,2b174 <__umoddi3+0x508>
   2afa4:	180d883a 	mov	r6,r3
   2afa8:	15efc83a 	sub	r23,r2,r23
   2afac:	b00b883a 	mov	r5,r22
   2afb0:	b809883a 	mov	r4,r23
   2afb4:	d9800115 	stw	r6,4(sp)
   2afb8:	da000015 	stw	r8,0(sp)
   2afbc:	002b3000 	call	2b300 <__umodsi3>
   2afc0:	b00b883a 	mov	r5,r22
   2afc4:	b809883a 	mov	r4,r23
   2afc8:	1039883a 	mov	fp,r2
   2afcc:	002b29c0 	call	2b29c <__udivsi3>
   2afd0:	da000017 	ldw	r8,0(sp)
   2afd4:	e038943a 	slli	fp,fp,16
   2afd8:	100b883a 	mov	r5,r2
   2afdc:	4089383a 	mul	r4,r8,r2
   2afe0:	8a3fffcc 	andi	r8,r17,65535
   2afe4:	4710b03a 	or	r8,r8,fp
   2afe8:	d9800117 	ldw	r6,4(sp)
   2afec:	4100042e 	bgeu	r8,r4,2b000 <__umoddi3+0x394>
   2aff0:	4551883a 	add	r8,r8,r21
   2aff4:	10bfffc4 	addi	r2,r2,-1
   2aff8:	45405a2e 	bgeu	r8,r21,2b164 <__umoddi3+0x4f8>
   2affc:	100b883a 	mov	r5,r2
   2b000:	300c943a 	slli	r6,r6,16
   2b004:	91ffffcc 	andi	r7,r18,65535
   2b008:	9004d43a 	srli	r2,r18,16
   2b00c:	314cb03a 	or	r6,r6,r5
   2b010:	317fffcc 	andi	r5,r6,65535
   2b014:	300cd43a 	srli	r6,r6,16
   2b018:	29d3383a 	mul	r9,r5,r7
   2b01c:	288b383a 	mul	r5,r5,r2
   2b020:	31cf383a 	mul	r7,r6,r7
   2b024:	4806d43a 	srli	r3,r9,16
   2b028:	4111c83a 	sub	r8,r8,r4
   2b02c:	29cb883a 	add	r5,r5,r7
   2b030:	194b883a 	add	r5,r3,r5
   2b034:	3085383a 	mul	r2,r6,r2
   2b038:	29c0022e 	bgeu	r5,r7,2b044 <__umoddi3+0x3d8>
   2b03c:	00c00074 	movhi	r3,1
   2b040:	10c5883a 	add	r2,r2,r3
   2b044:	2808d43a 	srli	r4,r5,16
   2b048:	280a943a 	slli	r5,r5,16
   2b04c:	4a7fffcc 	andi	r9,r9,65535
   2b050:	2085883a 	add	r2,r4,r2
   2b054:	2a4b883a 	add	r5,r5,r9
   2b058:	40803636 	bltu	r8,r2,2b134 <__umoddi3+0x4c8>
   2b05c:	40804d26 	beq	r8,r2,2b194 <__umoddi3+0x528>
   2b060:	4089c83a 	sub	r4,r8,r2
   2b064:	280f883a 	mov	r7,r5
   2b068:	81cfc83a 	sub	r7,r16,r7
   2b06c:	81c7803a 	cmpltu	r3,r16,r7
   2b070:	20c7c83a 	sub	r3,r4,r3
   2b074:	1cc4983a 	sll	r2,r3,r19
   2b078:	3d0ed83a 	srl	r7,r7,r20
   2b07c:	1d06d83a 	srl	r3,r3,r20
   2b080:	11c4b03a 	or	r2,r2,r7
   2b084:	003f9306 	br	2aed4 <__alt_data_end+0xfffeaed4>
   2b088:	9ca6983a 	sll	r19,r19,r18
   2b08c:	88e8d83a 	srl	r20,r17,r3
   2b090:	80c4d83a 	srl	r2,r16,r3
   2b094:	982cd43a 	srli	r22,r19,16
   2b098:	8ca2983a 	sll	r17,r17,r18
   2b09c:	a009883a 	mov	r4,r20
   2b0a0:	b00b883a 	mov	r5,r22
   2b0a4:	1478b03a 	or	fp,r2,r17
   2b0a8:	002b3000 	call	2b300 <__umodsi3>
   2b0ac:	a009883a 	mov	r4,r20
   2b0b0:	b00b883a 	mov	r5,r22
   2b0b4:	1023883a 	mov	r17,r2
   2b0b8:	002b29c0 	call	2b29c <__udivsi3>
   2b0bc:	9d7fffcc 	andi	r21,r19,65535
   2b0c0:	880a943a 	slli	r5,r17,16
   2b0c4:	e008d43a 	srli	r4,fp,16
   2b0c8:	a885383a 	mul	r2,r21,r2
   2b0cc:	84a8983a 	sll	r20,r16,r18
   2b0d0:	2148b03a 	or	r4,r4,r5
   2b0d4:	2080042e 	bgeu	r4,r2,2b0e8 <__umoddi3+0x47c>
   2b0d8:	24c9883a 	add	r4,r4,r19
   2b0dc:	24c00236 	bltu	r4,r19,2b0e8 <__umoddi3+0x47c>
   2b0e0:	2080012e 	bgeu	r4,r2,2b0e8 <__umoddi3+0x47c>
   2b0e4:	24c9883a 	add	r4,r4,r19
   2b0e8:	20a3c83a 	sub	r17,r4,r2
   2b0ec:	b00b883a 	mov	r5,r22
   2b0f0:	8809883a 	mov	r4,r17
   2b0f4:	002b3000 	call	2b300 <__umodsi3>
   2b0f8:	102f883a 	mov	r23,r2
   2b0fc:	8809883a 	mov	r4,r17
   2b100:	b00b883a 	mov	r5,r22
   2b104:	002b29c0 	call	2b29c <__udivsi3>
   2b108:	b82e943a 	slli	r23,r23,16
   2b10c:	a885383a 	mul	r2,r21,r2
   2b110:	e13fffcc 	andi	r4,fp,65535
   2b114:	25c8b03a 	or	r4,r4,r23
   2b118:	2080042e 	bgeu	r4,r2,2b12c <__umoddi3+0x4c0>
   2b11c:	24c9883a 	add	r4,r4,r19
   2b120:	24c00236 	bltu	r4,r19,2b12c <__umoddi3+0x4c0>
   2b124:	2080012e 	bgeu	r4,r2,2b12c <__umoddi3+0x4c0>
   2b128:	24c9883a 	add	r4,r4,r19
   2b12c:	20a3c83a 	sub	r17,r4,r2
   2b130:	003f4806 	br	2ae54 <__alt_data_end+0xfffeae54>
   2b134:	2c8fc83a 	sub	r7,r5,r18
   2b138:	1545c83a 	sub	r2,r2,r21
   2b13c:	29cb803a 	cmpltu	r5,r5,r7
   2b140:	1145c83a 	sub	r2,r2,r5
   2b144:	4089c83a 	sub	r4,r8,r2
   2b148:	003fc706 	br	2b068 <__alt_data_end+0xfffeb068>
   2b14c:	01000604 	movi	r4,24
   2b150:	003f1806 	br	2adb4 <__alt_data_end+0xfffeadb4>
   2b154:	00800604 	movi	r2,24
   2b158:	003f3206 	br	2ae24 <__alt_data_end+0xfffeae24>
   2b15c:	01000604 	movi	r4,24
   2b160:	003ed906 	br	2acc8 <__alt_data_end+0xfffeacc8>
   2b164:	413fa52e 	bgeu	r8,r4,2affc <__alt_data_end+0xfffeaffc>
   2b168:	297fff84 	addi	r5,r5,-2
   2b16c:	4551883a 	add	r8,r8,r21
   2b170:	003fa306 	br	2b000 <__alt_data_end+0xfffeb000>
   2b174:	15ff8b2e 	bgeu	r2,r23,2afa4 <__alt_data_end+0xfffeafa4>
   2b178:	31bfff84 	addi	r6,r6,-2
   2b17c:	1545883a 	add	r2,r2,r21
   2b180:	003f8906 	br	2afa8 <__alt_data_end+0xfffeafa8>
   2b184:	24c9883a 	add	r4,r4,r19
   2b188:	003eee06 	br	2ad44 <__alt_data_end+0xfffead44>
   2b18c:	8005883a 	mov	r2,r16
   2b190:	003f1706 	br	2adf0 <__alt_data_end+0xfffeadf0>
   2b194:	817fe736 	bltu	r16,r5,2b134 <__alt_data_end+0xfffeb134>
   2b198:	280f883a 	mov	r7,r5
   2b19c:	0009883a 	mov	r4,zero
   2b1a0:	003fb106 	br	2b068 <__alt_data_end+0xfffeb068>

0002b1a4 <__divsi3>:
   2b1a4:	20001b16 	blt	r4,zero,2b214 <__divsi3+0x70>
   2b1a8:	000f883a 	mov	r7,zero
   2b1ac:	28001616 	blt	r5,zero,2b208 <__divsi3+0x64>
   2b1b0:	200d883a 	mov	r6,r4
   2b1b4:	29001a2e 	bgeu	r5,r4,2b220 <__divsi3+0x7c>
   2b1b8:	00800804 	movi	r2,32
   2b1bc:	00c00044 	movi	r3,1
   2b1c0:	00000106 	br	2b1c8 <__divsi3+0x24>
   2b1c4:	10000d26 	beq	r2,zero,2b1fc <__divsi3+0x58>
   2b1c8:	294b883a 	add	r5,r5,r5
   2b1cc:	10bfffc4 	addi	r2,r2,-1
   2b1d0:	18c7883a 	add	r3,r3,r3
   2b1d4:	293ffb36 	bltu	r5,r4,2b1c4 <__alt_data_end+0xfffeb1c4>
   2b1d8:	0005883a 	mov	r2,zero
   2b1dc:	18000726 	beq	r3,zero,2b1fc <__divsi3+0x58>
   2b1e0:	0005883a 	mov	r2,zero
   2b1e4:	31400236 	bltu	r6,r5,2b1f0 <__divsi3+0x4c>
   2b1e8:	314dc83a 	sub	r6,r6,r5
   2b1ec:	10c4b03a 	or	r2,r2,r3
   2b1f0:	1806d07a 	srli	r3,r3,1
   2b1f4:	280ad07a 	srli	r5,r5,1
   2b1f8:	183ffa1e 	bne	r3,zero,2b1e4 <__alt_data_end+0xfffeb1e4>
   2b1fc:	38000126 	beq	r7,zero,2b204 <__divsi3+0x60>
   2b200:	0085c83a 	sub	r2,zero,r2
   2b204:	f800283a 	ret
   2b208:	014bc83a 	sub	r5,zero,r5
   2b20c:	39c0005c 	xori	r7,r7,1
   2b210:	003fe706 	br	2b1b0 <__alt_data_end+0xfffeb1b0>
   2b214:	0109c83a 	sub	r4,zero,r4
   2b218:	01c00044 	movi	r7,1
   2b21c:	003fe306 	br	2b1ac <__alt_data_end+0xfffeb1ac>
   2b220:	00c00044 	movi	r3,1
   2b224:	003fee06 	br	2b1e0 <__alt_data_end+0xfffeb1e0>

0002b228 <__modsi3>:
   2b228:	20001716 	blt	r4,zero,2b288 <__modsi3+0x60>
   2b22c:	000f883a 	mov	r7,zero
   2b230:	2005883a 	mov	r2,r4
   2b234:	28001216 	blt	r5,zero,2b280 <__modsi3+0x58>
   2b238:	2900162e 	bgeu	r5,r4,2b294 <__modsi3+0x6c>
   2b23c:	01800804 	movi	r6,32
   2b240:	00c00044 	movi	r3,1
   2b244:	00000106 	br	2b24c <__modsi3+0x24>
   2b248:	30000a26 	beq	r6,zero,2b274 <__modsi3+0x4c>
   2b24c:	294b883a 	add	r5,r5,r5
   2b250:	31bfffc4 	addi	r6,r6,-1
   2b254:	18c7883a 	add	r3,r3,r3
   2b258:	293ffb36 	bltu	r5,r4,2b248 <__alt_data_end+0xfffeb248>
   2b25c:	18000526 	beq	r3,zero,2b274 <__modsi3+0x4c>
   2b260:	1806d07a 	srli	r3,r3,1
   2b264:	11400136 	bltu	r2,r5,2b26c <__modsi3+0x44>
   2b268:	1145c83a 	sub	r2,r2,r5
   2b26c:	280ad07a 	srli	r5,r5,1
   2b270:	183ffb1e 	bne	r3,zero,2b260 <__alt_data_end+0xfffeb260>
   2b274:	38000126 	beq	r7,zero,2b27c <__modsi3+0x54>
   2b278:	0085c83a 	sub	r2,zero,r2
   2b27c:	f800283a 	ret
   2b280:	014bc83a 	sub	r5,zero,r5
   2b284:	003fec06 	br	2b238 <__alt_data_end+0xfffeb238>
   2b288:	0109c83a 	sub	r4,zero,r4
   2b28c:	01c00044 	movi	r7,1
   2b290:	003fe706 	br	2b230 <__alt_data_end+0xfffeb230>
   2b294:	00c00044 	movi	r3,1
   2b298:	003ff106 	br	2b260 <__alt_data_end+0xfffeb260>

0002b29c <__udivsi3>:
   2b29c:	200d883a 	mov	r6,r4
   2b2a0:	2900152e 	bgeu	r5,r4,2b2f8 <__udivsi3+0x5c>
   2b2a4:	28001416 	blt	r5,zero,2b2f8 <__udivsi3+0x5c>
   2b2a8:	00800804 	movi	r2,32
   2b2ac:	00c00044 	movi	r3,1
   2b2b0:	00000206 	br	2b2bc <__udivsi3+0x20>
   2b2b4:	10000e26 	beq	r2,zero,2b2f0 <__udivsi3+0x54>
   2b2b8:	28000516 	blt	r5,zero,2b2d0 <__udivsi3+0x34>
   2b2bc:	294b883a 	add	r5,r5,r5
   2b2c0:	10bfffc4 	addi	r2,r2,-1
   2b2c4:	18c7883a 	add	r3,r3,r3
   2b2c8:	293ffa36 	bltu	r5,r4,2b2b4 <__alt_data_end+0xfffeb2b4>
   2b2cc:	18000826 	beq	r3,zero,2b2f0 <__udivsi3+0x54>
   2b2d0:	0005883a 	mov	r2,zero
   2b2d4:	31400236 	bltu	r6,r5,2b2e0 <__udivsi3+0x44>
   2b2d8:	314dc83a 	sub	r6,r6,r5
   2b2dc:	10c4b03a 	or	r2,r2,r3
   2b2e0:	1806d07a 	srli	r3,r3,1
   2b2e4:	280ad07a 	srli	r5,r5,1
   2b2e8:	183ffa1e 	bne	r3,zero,2b2d4 <__alt_data_end+0xfffeb2d4>
   2b2ec:	f800283a 	ret
   2b2f0:	0005883a 	mov	r2,zero
   2b2f4:	f800283a 	ret
   2b2f8:	00c00044 	movi	r3,1
   2b2fc:	003ff406 	br	2b2d0 <__alt_data_end+0xfffeb2d0>

0002b300 <__umodsi3>:
   2b300:	2005883a 	mov	r2,r4
   2b304:	2900122e 	bgeu	r5,r4,2b350 <__umodsi3+0x50>
   2b308:	28001116 	blt	r5,zero,2b350 <__umodsi3+0x50>
   2b30c:	01800804 	movi	r6,32
   2b310:	00c00044 	movi	r3,1
   2b314:	00000206 	br	2b320 <__umodsi3+0x20>
   2b318:	30000c26 	beq	r6,zero,2b34c <__umodsi3+0x4c>
   2b31c:	28000516 	blt	r5,zero,2b334 <__umodsi3+0x34>
   2b320:	294b883a 	add	r5,r5,r5
   2b324:	31bfffc4 	addi	r6,r6,-1
   2b328:	18c7883a 	add	r3,r3,r3
   2b32c:	293ffa36 	bltu	r5,r4,2b318 <__alt_data_end+0xfffeb318>
   2b330:	18000626 	beq	r3,zero,2b34c <__umodsi3+0x4c>
   2b334:	1806d07a 	srli	r3,r3,1
   2b338:	11400136 	bltu	r2,r5,2b340 <__umodsi3+0x40>
   2b33c:	1145c83a 	sub	r2,r2,r5
   2b340:	280ad07a 	srli	r5,r5,1
   2b344:	183ffb1e 	bne	r3,zero,2b334 <__alt_data_end+0xfffeb334>
   2b348:	f800283a 	ret
   2b34c:	f800283a 	ret
   2b350:	00c00044 	movi	r3,1
   2b354:	003ff706 	br	2b334 <__alt_data_end+0xfffeb334>

0002b358 <__adddf3>:
   2b358:	02c00434 	movhi	r11,16
   2b35c:	5affffc4 	addi	r11,r11,-1
   2b360:	2806d7fa 	srli	r3,r5,31
   2b364:	2ad4703a 	and	r10,r5,r11
   2b368:	3ad2703a 	and	r9,r7,r11
   2b36c:	3804d53a 	srli	r2,r7,20
   2b370:	3018d77a 	srli	r12,r6,29
   2b374:	280ad53a 	srli	r5,r5,20
   2b378:	501490fa 	slli	r10,r10,3
   2b37c:	2010d77a 	srli	r8,r4,29
   2b380:	481290fa 	slli	r9,r9,3
   2b384:	380ed7fa 	srli	r7,r7,31
   2b388:	defffb04 	addi	sp,sp,-20
   2b38c:	dc800215 	stw	r18,8(sp)
   2b390:	dc400115 	stw	r17,4(sp)
   2b394:	dc000015 	stw	r16,0(sp)
   2b398:	dfc00415 	stw	ra,16(sp)
   2b39c:	dcc00315 	stw	r19,12(sp)
   2b3a0:	1c803fcc 	andi	r18,r3,255
   2b3a4:	2c01ffcc 	andi	r16,r5,2047
   2b3a8:	5210b03a 	or	r8,r10,r8
   2b3ac:	202290fa 	slli	r17,r4,3
   2b3b0:	1081ffcc 	andi	r2,r2,2047
   2b3b4:	4b12b03a 	or	r9,r9,r12
   2b3b8:	300c90fa 	slli	r6,r6,3
   2b3bc:	91c07526 	beq	r18,r7,2b594 <__adddf3+0x23c>
   2b3c0:	8087c83a 	sub	r3,r16,r2
   2b3c4:	00c0ab0e 	bge	zero,r3,2b674 <__adddf3+0x31c>
   2b3c8:	10002a1e 	bne	r2,zero,2b474 <__adddf3+0x11c>
   2b3cc:	4984b03a 	or	r2,r9,r6
   2b3d0:	1000961e 	bne	r2,zero,2b62c <__adddf3+0x2d4>
   2b3d4:	888001cc 	andi	r2,r17,7
   2b3d8:	10000726 	beq	r2,zero,2b3f8 <__adddf3+0xa0>
   2b3dc:	888003cc 	andi	r2,r17,15
   2b3e0:	00c00104 	movi	r3,4
   2b3e4:	10c00426 	beq	r2,r3,2b3f8 <__adddf3+0xa0>
   2b3e8:	88c7883a 	add	r3,r17,r3
   2b3ec:	1c63803a 	cmpltu	r17,r3,r17
   2b3f0:	4451883a 	add	r8,r8,r17
   2b3f4:	1823883a 	mov	r17,r3
   2b3f8:	4080202c 	andhi	r2,r8,128
   2b3fc:	10005926 	beq	r2,zero,2b564 <__adddf3+0x20c>
   2b400:	84000044 	addi	r16,r16,1
   2b404:	0081ffc4 	movi	r2,2047
   2b408:	8080ba26 	beq	r16,r2,2b6f4 <__adddf3+0x39c>
   2b40c:	00bfe034 	movhi	r2,65408
   2b410:	10bfffc4 	addi	r2,r2,-1
   2b414:	4090703a 	and	r8,r8,r2
   2b418:	4004977a 	slli	r2,r8,29
   2b41c:	4010927a 	slli	r8,r8,9
   2b420:	8822d0fa 	srli	r17,r17,3
   2b424:	8401ffcc 	andi	r16,r16,2047
   2b428:	4010d33a 	srli	r8,r8,12
   2b42c:	9007883a 	mov	r3,r18
   2b430:	1444b03a 	or	r2,r2,r17
   2b434:	8401ffcc 	andi	r16,r16,2047
   2b438:	8020953a 	slli	r16,r16,20
   2b43c:	18c03fcc 	andi	r3,r3,255
   2b440:	01000434 	movhi	r4,16
   2b444:	213fffc4 	addi	r4,r4,-1
   2b448:	180697fa 	slli	r3,r3,31
   2b44c:	4110703a 	and	r8,r8,r4
   2b450:	4410b03a 	or	r8,r8,r16
   2b454:	40c6b03a 	or	r3,r8,r3
   2b458:	dfc00417 	ldw	ra,16(sp)
   2b45c:	dcc00317 	ldw	r19,12(sp)
   2b460:	dc800217 	ldw	r18,8(sp)
   2b464:	dc400117 	ldw	r17,4(sp)
   2b468:	dc000017 	ldw	r16,0(sp)
   2b46c:	dec00504 	addi	sp,sp,20
   2b470:	f800283a 	ret
   2b474:	0081ffc4 	movi	r2,2047
   2b478:	80bfd626 	beq	r16,r2,2b3d4 <__alt_data_end+0xfffeb3d4>
   2b47c:	4a402034 	orhi	r9,r9,128
   2b480:	00800e04 	movi	r2,56
   2b484:	10c09f16 	blt	r2,r3,2b704 <__adddf3+0x3ac>
   2b488:	008007c4 	movi	r2,31
   2b48c:	10c0c216 	blt	r2,r3,2b798 <__adddf3+0x440>
   2b490:	00800804 	movi	r2,32
   2b494:	10c5c83a 	sub	r2,r2,r3
   2b498:	488a983a 	sll	r5,r9,r2
   2b49c:	30c8d83a 	srl	r4,r6,r3
   2b4a0:	3084983a 	sll	r2,r6,r2
   2b4a4:	48c6d83a 	srl	r3,r9,r3
   2b4a8:	290cb03a 	or	r6,r5,r4
   2b4ac:	1004c03a 	cmpne	r2,r2,zero
   2b4b0:	308cb03a 	or	r6,r6,r2
   2b4b4:	898dc83a 	sub	r6,r17,r6
   2b4b8:	89a3803a 	cmpltu	r17,r17,r6
   2b4bc:	40d1c83a 	sub	r8,r8,r3
   2b4c0:	4451c83a 	sub	r8,r8,r17
   2b4c4:	3023883a 	mov	r17,r6
   2b4c8:	4080202c 	andhi	r2,r8,128
   2b4cc:	10002326 	beq	r2,zero,2b55c <__adddf3+0x204>
   2b4d0:	04c02034 	movhi	r19,128
   2b4d4:	9cffffc4 	addi	r19,r19,-1
   2b4d8:	44e6703a 	and	r19,r8,r19
   2b4dc:	98007626 	beq	r19,zero,2b6b8 <__adddf3+0x360>
   2b4e0:	9809883a 	mov	r4,r19
   2b4e4:	002d95c0 	call	2d95c <__clzsi2>
   2b4e8:	10fffe04 	addi	r3,r2,-8
   2b4ec:	010007c4 	movi	r4,31
   2b4f0:	20c07716 	blt	r4,r3,2b6d0 <__adddf3+0x378>
   2b4f4:	00800804 	movi	r2,32
   2b4f8:	10c5c83a 	sub	r2,r2,r3
   2b4fc:	8884d83a 	srl	r2,r17,r2
   2b500:	98d0983a 	sll	r8,r19,r3
   2b504:	88e2983a 	sll	r17,r17,r3
   2b508:	1204b03a 	or	r2,r2,r8
   2b50c:	1c007416 	blt	r3,r16,2b6e0 <__adddf3+0x388>
   2b510:	1c21c83a 	sub	r16,r3,r16
   2b514:	82000044 	addi	r8,r16,1
   2b518:	00c007c4 	movi	r3,31
   2b51c:	1a009116 	blt	r3,r8,2b764 <__adddf3+0x40c>
   2b520:	00c00804 	movi	r3,32
   2b524:	1a07c83a 	sub	r3,r3,r8
   2b528:	8a08d83a 	srl	r4,r17,r8
   2b52c:	88e2983a 	sll	r17,r17,r3
   2b530:	10c6983a 	sll	r3,r2,r3
   2b534:	1210d83a 	srl	r8,r2,r8
   2b538:	8804c03a 	cmpne	r2,r17,zero
   2b53c:	1906b03a 	or	r3,r3,r4
   2b540:	18a2b03a 	or	r17,r3,r2
   2b544:	0021883a 	mov	r16,zero
   2b548:	003fa206 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b54c:	1890b03a 	or	r8,r3,r2
   2b550:	40017d26 	beq	r8,zero,2bb48 <__adddf3+0x7f0>
   2b554:	1011883a 	mov	r8,r2
   2b558:	1823883a 	mov	r17,r3
   2b55c:	888001cc 	andi	r2,r17,7
   2b560:	103f9e1e 	bne	r2,zero,2b3dc <__alt_data_end+0xfffeb3dc>
   2b564:	4004977a 	slli	r2,r8,29
   2b568:	8822d0fa 	srli	r17,r17,3
   2b56c:	4010d0fa 	srli	r8,r8,3
   2b570:	9007883a 	mov	r3,r18
   2b574:	1444b03a 	or	r2,r2,r17
   2b578:	0101ffc4 	movi	r4,2047
   2b57c:	81002426 	beq	r16,r4,2b610 <__adddf3+0x2b8>
   2b580:	8120703a 	and	r16,r16,r4
   2b584:	01000434 	movhi	r4,16
   2b588:	213fffc4 	addi	r4,r4,-1
   2b58c:	4110703a 	and	r8,r8,r4
   2b590:	003fa806 	br	2b434 <__alt_data_end+0xfffeb434>
   2b594:	8089c83a 	sub	r4,r16,r2
   2b598:	01005e0e 	bge	zero,r4,2b714 <__adddf3+0x3bc>
   2b59c:	10002b26 	beq	r2,zero,2b64c <__adddf3+0x2f4>
   2b5a0:	0081ffc4 	movi	r2,2047
   2b5a4:	80bf8b26 	beq	r16,r2,2b3d4 <__alt_data_end+0xfffeb3d4>
   2b5a8:	4a402034 	orhi	r9,r9,128
   2b5ac:	00800e04 	movi	r2,56
   2b5b0:	1100a40e 	bge	r2,r4,2b844 <__adddf3+0x4ec>
   2b5b4:	498cb03a 	or	r6,r9,r6
   2b5b8:	300ac03a 	cmpne	r5,r6,zero
   2b5bc:	0013883a 	mov	r9,zero
   2b5c0:	2c4b883a 	add	r5,r5,r17
   2b5c4:	2c63803a 	cmpltu	r17,r5,r17
   2b5c8:	4a11883a 	add	r8,r9,r8
   2b5cc:	8a11883a 	add	r8,r17,r8
   2b5d0:	2823883a 	mov	r17,r5
   2b5d4:	4080202c 	andhi	r2,r8,128
   2b5d8:	103fe026 	beq	r2,zero,2b55c <__alt_data_end+0xfffeb55c>
   2b5dc:	84000044 	addi	r16,r16,1
   2b5e0:	0081ffc4 	movi	r2,2047
   2b5e4:	8080d226 	beq	r16,r2,2b930 <__adddf3+0x5d8>
   2b5e8:	00bfe034 	movhi	r2,65408
   2b5ec:	10bfffc4 	addi	r2,r2,-1
   2b5f0:	4090703a 	and	r8,r8,r2
   2b5f4:	880ad07a 	srli	r5,r17,1
   2b5f8:	400897fa 	slli	r4,r8,31
   2b5fc:	88c0004c 	andi	r3,r17,1
   2b600:	28e2b03a 	or	r17,r5,r3
   2b604:	4010d07a 	srli	r8,r8,1
   2b608:	2462b03a 	or	r17,r4,r17
   2b60c:	003f7106 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b610:	4088b03a 	or	r4,r8,r2
   2b614:	20014526 	beq	r4,zero,2bb2c <__adddf3+0x7d4>
   2b618:	01000434 	movhi	r4,16
   2b61c:	42000234 	orhi	r8,r8,8
   2b620:	213fffc4 	addi	r4,r4,-1
   2b624:	4110703a 	and	r8,r8,r4
   2b628:	003f8206 	br	2b434 <__alt_data_end+0xfffeb434>
   2b62c:	18ffffc4 	addi	r3,r3,-1
   2b630:	1800491e 	bne	r3,zero,2b758 <__adddf3+0x400>
   2b634:	898bc83a 	sub	r5,r17,r6
   2b638:	8963803a 	cmpltu	r17,r17,r5
   2b63c:	4251c83a 	sub	r8,r8,r9
   2b640:	4451c83a 	sub	r8,r8,r17
   2b644:	2823883a 	mov	r17,r5
   2b648:	003f9f06 	br	2b4c8 <__alt_data_end+0xfffeb4c8>
   2b64c:	4984b03a 	or	r2,r9,r6
   2b650:	103f6026 	beq	r2,zero,2b3d4 <__alt_data_end+0xfffeb3d4>
   2b654:	213fffc4 	addi	r4,r4,-1
   2b658:	2000931e 	bne	r4,zero,2b8a8 <__adddf3+0x550>
   2b65c:	898d883a 	add	r6,r17,r6
   2b660:	3463803a 	cmpltu	r17,r6,r17
   2b664:	4251883a 	add	r8,r8,r9
   2b668:	8a11883a 	add	r8,r17,r8
   2b66c:	3023883a 	mov	r17,r6
   2b670:	003fd806 	br	2b5d4 <__alt_data_end+0xfffeb5d4>
   2b674:	1800541e 	bne	r3,zero,2b7c8 <__adddf3+0x470>
   2b678:	80800044 	addi	r2,r16,1
   2b67c:	1081ffcc 	andi	r2,r2,2047
   2b680:	00c00044 	movi	r3,1
   2b684:	1880a00e 	bge	r3,r2,2b908 <__adddf3+0x5b0>
   2b688:	8989c83a 	sub	r4,r17,r6
   2b68c:	8905803a 	cmpltu	r2,r17,r4
   2b690:	4267c83a 	sub	r19,r8,r9
   2b694:	98a7c83a 	sub	r19,r19,r2
   2b698:	9880202c 	andhi	r2,r19,128
   2b69c:	10006326 	beq	r2,zero,2b82c <__adddf3+0x4d4>
   2b6a0:	3463c83a 	sub	r17,r6,r17
   2b6a4:	4a07c83a 	sub	r3,r9,r8
   2b6a8:	344d803a 	cmpltu	r6,r6,r17
   2b6ac:	19a7c83a 	sub	r19,r3,r6
   2b6b0:	3825883a 	mov	r18,r7
   2b6b4:	983f8a1e 	bne	r19,zero,2b4e0 <__alt_data_end+0xfffeb4e0>
   2b6b8:	8809883a 	mov	r4,r17
   2b6bc:	002d95c0 	call	2d95c <__clzsi2>
   2b6c0:	10800804 	addi	r2,r2,32
   2b6c4:	10fffe04 	addi	r3,r2,-8
   2b6c8:	010007c4 	movi	r4,31
   2b6cc:	20ff890e 	bge	r4,r3,2b4f4 <__alt_data_end+0xfffeb4f4>
   2b6d0:	10bff604 	addi	r2,r2,-40
   2b6d4:	8884983a 	sll	r2,r17,r2
   2b6d8:	0023883a 	mov	r17,zero
   2b6dc:	1c3f8c0e 	bge	r3,r16,2b510 <__alt_data_end+0xfffeb510>
   2b6e0:	023fe034 	movhi	r8,65408
   2b6e4:	423fffc4 	addi	r8,r8,-1
   2b6e8:	80e1c83a 	sub	r16,r16,r3
   2b6ec:	1210703a 	and	r8,r2,r8
   2b6f0:	003f3806 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b6f4:	9007883a 	mov	r3,r18
   2b6f8:	0011883a 	mov	r8,zero
   2b6fc:	0005883a 	mov	r2,zero
   2b700:	003f4c06 	br	2b434 <__alt_data_end+0xfffeb434>
   2b704:	498cb03a 	or	r6,r9,r6
   2b708:	300cc03a 	cmpne	r6,r6,zero
   2b70c:	0007883a 	mov	r3,zero
   2b710:	003f6806 	br	2b4b4 <__alt_data_end+0xfffeb4b4>
   2b714:	20009c1e 	bne	r4,zero,2b988 <__adddf3+0x630>
   2b718:	80800044 	addi	r2,r16,1
   2b71c:	1141ffcc 	andi	r5,r2,2047
   2b720:	01000044 	movi	r4,1
   2b724:	2140670e 	bge	r4,r5,2b8c4 <__adddf3+0x56c>
   2b728:	0101ffc4 	movi	r4,2047
   2b72c:	11007f26 	beq	r2,r4,2b92c <__adddf3+0x5d4>
   2b730:	898d883a 	add	r6,r17,r6
   2b734:	4247883a 	add	r3,r8,r9
   2b738:	3451803a 	cmpltu	r8,r6,r17
   2b73c:	40d1883a 	add	r8,r8,r3
   2b740:	402297fa 	slli	r17,r8,31
   2b744:	300cd07a 	srli	r6,r6,1
   2b748:	4010d07a 	srli	r8,r8,1
   2b74c:	1021883a 	mov	r16,r2
   2b750:	89a2b03a 	or	r17,r17,r6
   2b754:	003f1f06 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b758:	0081ffc4 	movi	r2,2047
   2b75c:	80bf481e 	bne	r16,r2,2b480 <__alt_data_end+0xfffeb480>
   2b760:	003f1c06 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b764:	843ff844 	addi	r16,r16,-31
   2b768:	01000804 	movi	r4,32
   2b76c:	1406d83a 	srl	r3,r2,r16
   2b770:	41005026 	beq	r8,r4,2b8b4 <__adddf3+0x55c>
   2b774:	01001004 	movi	r4,64
   2b778:	2211c83a 	sub	r8,r4,r8
   2b77c:	1204983a 	sll	r2,r2,r8
   2b780:	88a2b03a 	or	r17,r17,r2
   2b784:	8822c03a 	cmpne	r17,r17,zero
   2b788:	1c62b03a 	or	r17,r3,r17
   2b78c:	0011883a 	mov	r8,zero
   2b790:	0021883a 	mov	r16,zero
   2b794:	003f7106 	br	2b55c <__alt_data_end+0xfffeb55c>
   2b798:	193ff804 	addi	r4,r3,-32
   2b79c:	00800804 	movi	r2,32
   2b7a0:	4908d83a 	srl	r4,r9,r4
   2b7a4:	18804526 	beq	r3,r2,2b8bc <__adddf3+0x564>
   2b7a8:	00801004 	movi	r2,64
   2b7ac:	10c5c83a 	sub	r2,r2,r3
   2b7b0:	4886983a 	sll	r3,r9,r2
   2b7b4:	198cb03a 	or	r6,r3,r6
   2b7b8:	300cc03a 	cmpne	r6,r6,zero
   2b7bc:	218cb03a 	or	r6,r4,r6
   2b7c0:	0007883a 	mov	r3,zero
   2b7c4:	003f3b06 	br	2b4b4 <__alt_data_end+0xfffeb4b4>
   2b7c8:	80002a26 	beq	r16,zero,2b874 <__adddf3+0x51c>
   2b7cc:	0101ffc4 	movi	r4,2047
   2b7d0:	11006826 	beq	r2,r4,2b974 <__adddf3+0x61c>
   2b7d4:	00c7c83a 	sub	r3,zero,r3
   2b7d8:	42002034 	orhi	r8,r8,128
   2b7dc:	01000e04 	movi	r4,56
   2b7e0:	20c07c16 	blt	r4,r3,2b9d4 <__adddf3+0x67c>
   2b7e4:	010007c4 	movi	r4,31
   2b7e8:	20c0da16 	blt	r4,r3,2bb54 <__adddf3+0x7fc>
   2b7ec:	01000804 	movi	r4,32
   2b7f0:	20c9c83a 	sub	r4,r4,r3
   2b7f4:	4114983a 	sll	r10,r8,r4
   2b7f8:	88cad83a 	srl	r5,r17,r3
   2b7fc:	8908983a 	sll	r4,r17,r4
   2b800:	40c6d83a 	srl	r3,r8,r3
   2b804:	5162b03a 	or	r17,r10,r5
   2b808:	2008c03a 	cmpne	r4,r4,zero
   2b80c:	8922b03a 	or	r17,r17,r4
   2b810:	3463c83a 	sub	r17,r6,r17
   2b814:	48c7c83a 	sub	r3,r9,r3
   2b818:	344d803a 	cmpltu	r6,r6,r17
   2b81c:	1991c83a 	sub	r8,r3,r6
   2b820:	1021883a 	mov	r16,r2
   2b824:	3825883a 	mov	r18,r7
   2b828:	003f2706 	br	2b4c8 <__alt_data_end+0xfffeb4c8>
   2b82c:	24d0b03a 	or	r8,r4,r19
   2b830:	40001b1e 	bne	r8,zero,2b8a0 <__adddf3+0x548>
   2b834:	0005883a 	mov	r2,zero
   2b838:	0007883a 	mov	r3,zero
   2b83c:	0021883a 	mov	r16,zero
   2b840:	003f4d06 	br	2b578 <__alt_data_end+0xfffeb578>
   2b844:	008007c4 	movi	r2,31
   2b848:	11003c16 	blt	r2,r4,2b93c <__adddf3+0x5e4>
   2b84c:	00800804 	movi	r2,32
   2b850:	1105c83a 	sub	r2,r2,r4
   2b854:	488e983a 	sll	r7,r9,r2
   2b858:	310ad83a 	srl	r5,r6,r4
   2b85c:	3084983a 	sll	r2,r6,r2
   2b860:	4912d83a 	srl	r9,r9,r4
   2b864:	394ab03a 	or	r5,r7,r5
   2b868:	1004c03a 	cmpne	r2,r2,zero
   2b86c:	288ab03a 	or	r5,r5,r2
   2b870:	003f5306 	br	2b5c0 <__alt_data_end+0xfffeb5c0>
   2b874:	4448b03a 	or	r4,r8,r17
   2b878:	20003e26 	beq	r4,zero,2b974 <__adddf3+0x61c>
   2b87c:	00c6303a 	nor	r3,zero,r3
   2b880:	18003a1e 	bne	r3,zero,2b96c <__adddf3+0x614>
   2b884:	3463c83a 	sub	r17,r6,r17
   2b888:	4a07c83a 	sub	r3,r9,r8
   2b88c:	344d803a 	cmpltu	r6,r6,r17
   2b890:	1991c83a 	sub	r8,r3,r6
   2b894:	1021883a 	mov	r16,r2
   2b898:	3825883a 	mov	r18,r7
   2b89c:	003f0a06 	br	2b4c8 <__alt_data_end+0xfffeb4c8>
   2b8a0:	2023883a 	mov	r17,r4
   2b8a4:	003f0d06 	br	2b4dc <__alt_data_end+0xfffeb4dc>
   2b8a8:	0081ffc4 	movi	r2,2047
   2b8ac:	80bf3f1e 	bne	r16,r2,2b5ac <__alt_data_end+0xfffeb5ac>
   2b8b0:	003ec806 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b8b4:	0005883a 	mov	r2,zero
   2b8b8:	003fb106 	br	2b780 <__alt_data_end+0xfffeb780>
   2b8bc:	0007883a 	mov	r3,zero
   2b8c0:	003fbc06 	br	2b7b4 <__alt_data_end+0xfffeb7b4>
   2b8c4:	4444b03a 	or	r2,r8,r17
   2b8c8:	8000871e 	bne	r16,zero,2bae8 <__adddf3+0x790>
   2b8cc:	1000ba26 	beq	r2,zero,2bbb8 <__adddf3+0x860>
   2b8d0:	4984b03a 	or	r2,r9,r6
   2b8d4:	103ebf26 	beq	r2,zero,2b3d4 <__alt_data_end+0xfffeb3d4>
   2b8d8:	8985883a 	add	r2,r17,r6
   2b8dc:	4247883a 	add	r3,r8,r9
   2b8e0:	1451803a 	cmpltu	r8,r2,r17
   2b8e4:	40d1883a 	add	r8,r8,r3
   2b8e8:	40c0202c 	andhi	r3,r8,128
   2b8ec:	1023883a 	mov	r17,r2
   2b8f0:	183f1a26 	beq	r3,zero,2b55c <__alt_data_end+0xfffeb55c>
   2b8f4:	00bfe034 	movhi	r2,65408
   2b8f8:	10bfffc4 	addi	r2,r2,-1
   2b8fc:	2021883a 	mov	r16,r4
   2b900:	4090703a 	and	r8,r8,r2
   2b904:	003eb306 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b908:	4444b03a 	or	r2,r8,r17
   2b90c:	8000291e 	bne	r16,zero,2b9b4 <__adddf3+0x65c>
   2b910:	10004b1e 	bne	r2,zero,2ba40 <__adddf3+0x6e8>
   2b914:	4990b03a 	or	r8,r9,r6
   2b918:	40008b26 	beq	r8,zero,2bb48 <__adddf3+0x7f0>
   2b91c:	4811883a 	mov	r8,r9
   2b920:	3023883a 	mov	r17,r6
   2b924:	3825883a 	mov	r18,r7
   2b928:	003eaa06 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b92c:	1021883a 	mov	r16,r2
   2b930:	0011883a 	mov	r8,zero
   2b934:	0005883a 	mov	r2,zero
   2b938:	003f0f06 	br	2b578 <__alt_data_end+0xfffeb578>
   2b93c:	217ff804 	addi	r5,r4,-32
   2b940:	00800804 	movi	r2,32
   2b944:	494ad83a 	srl	r5,r9,r5
   2b948:	20807d26 	beq	r4,r2,2bb40 <__adddf3+0x7e8>
   2b94c:	00801004 	movi	r2,64
   2b950:	1109c83a 	sub	r4,r2,r4
   2b954:	4912983a 	sll	r9,r9,r4
   2b958:	498cb03a 	or	r6,r9,r6
   2b95c:	300cc03a 	cmpne	r6,r6,zero
   2b960:	298ab03a 	or	r5,r5,r6
   2b964:	0013883a 	mov	r9,zero
   2b968:	003f1506 	br	2b5c0 <__alt_data_end+0xfffeb5c0>
   2b96c:	0101ffc4 	movi	r4,2047
   2b970:	113f9a1e 	bne	r2,r4,2b7dc <__alt_data_end+0xfffeb7dc>
   2b974:	4811883a 	mov	r8,r9
   2b978:	3023883a 	mov	r17,r6
   2b97c:	1021883a 	mov	r16,r2
   2b980:	3825883a 	mov	r18,r7
   2b984:	003e9306 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b988:	8000161e 	bne	r16,zero,2b9e4 <__adddf3+0x68c>
   2b98c:	444ab03a 	or	r5,r8,r17
   2b990:	28005126 	beq	r5,zero,2bad8 <__adddf3+0x780>
   2b994:	0108303a 	nor	r4,zero,r4
   2b998:	20004d1e 	bne	r4,zero,2bad0 <__adddf3+0x778>
   2b99c:	89a3883a 	add	r17,r17,r6
   2b9a0:	4253883a 	add	r9,r8,r9
   2b9a4:	898d803a 	cmpltu	r6,r17,r6
   2b9a8:	3251883a 	add	r8,r6,r9
   2b9ac:	1021883a 	mov	r16,r2
   2b9b0:	003f0806 	br	2b5d4 <__alt_data_end+0xfffeb5d4>
   2b9b4:	1000301e 	bne	r2,zero,2ba78 <__adddf3+0x720>
   2b9b8:	4984b03a 	or	r2,r9,r6
   2b9bc:	10007126 	beq	r2,zero,2bb84 <__adddf3+0x82c>
   2b9c0:	4811883a 	mov	r8,r9
   2b9c4:	3023883a 	mov	r17,r6
   2b9c8:	3825883a 	mov	r18,r7
   2b9cc:	0401ffc4 	movi	r16,2047
   2b9d0:	003e8006 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2b9d4:	4462b03a 	or	r17,r8,r17
   2b9d8:	8822c03a 	cmpne	r17,r17,zero
   2b9dc:	0007883a 	mov	r3,zero
   2b9e0:	003f8b06 	br	2b810 <__alt_data_end+0xfffeb810>
   2b9e4:	0141ffc4 	movi	r5,2047
   2b9e8:	11403b26 	beq	r2,r5,2bad8 <__adddf3+0x780>
   2b9ec:	0109c83a 	sub	r4,zero,r4
   2b9f0:	42002034 	orhi	r8,r8,128
   2b9f4:	01400e04 	movi	r5,56
   2b9f8:	29006716 	blt	r5,r4,2bb98 <__adddf3+0x840>
   2b9fc:	014007c4 	movi	r5,31
   2ba00:	29007016 	blt	r5,r4,2bbc4 <__adddf3+0x86c>
   2ba04:	01400804 	movi	r5,32
   2ba08:	290bc83a 	sub	r5,r5,r4
   2ba0c:	4154983a 	sll	r10,r8,r5
   2ba10:	890ed83a 	srl	r7,r17,r4
   2ba14:	894a983a 	sll	r5,r17,r5
   2ba18:	4108d83a 	srl	r4,r8,r4
   2ba1c:	51e2b03a 	or	r17,r10,r7
   2ba20:	280ac03a 	cmpne	r5,r5,zero
   2ba24:	8962b03a 	or	r17,r17,r5
   2ba28:	89a3883a 	add	r17,r17,r6
   2ba2c:	2253883a 	add	r9,r4,r9
   2ba30:	898d803a 	cmpltu	r6,r17,r6
   2ba34:	3251883a 	add	r8,r6,r9
   2ba38:	1021883a 	mov	r16,r2
   2ba3c:	003ee506 	br	2b5d4 <__alt_data_end+0xfffeb5d4>
   2ba40:	4984b03a 	or	r2,r9,r6
   2ba44:	103e6326 	beq	r2,zero,2b3d4 <__alt_data_end+0xfffeb3d4>
   2ba48:	8987c83a 	sub	r3,r17,r6
   2ba4c:	88c9803a 	cmpltu	r4,r17,r3
   2ba50:	4245c83a 	sub	r2,r8,r9
   2ba54:	1105c83a 	sub	r2,r2,r4
   2ba58:	1100202c 	andhi	r4,r2,128
   2ba5c:	203ebb26 	beq	r4,zero,2b54c <__alt_data_end+0xfffeb54c>
   2ba60:	3463c83a 	sub	r17,r6,r17
   2ba64:	4a07c83a 	sub	r3,r9,r8
   2ba68:	344d803a 	cmpltu	r6,r6,r17
   2ba6c:	1991c83a 	sub	r8,r3,r6
   2ba70:	3825883a 	mov	r18,r7
   2ba74:	003e5706 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2ba78:	4984b03a 	or	r2,r9,r6
   2ba7c:	10002e26 	beq	r2,zero,2bb38 <__adddf3+0x7e0>
   2ba80:	4004d0fa 	srli	r2,r8,3
   2ba84:	8822d0fa 	srli	r17,r17,3
   2ba88:	4010977a 	slli	r8,r8,29
   2ba8c:	10c0022c 	andhi	r3,r2,8
   2ba90:	4462b03a 	or	r17,r8,r17
   2ba94:	18000826 	beq	r3,zero,2bab8 <__adddf3+0x760>
   2ba98:	4808d0fa 	srli	r4,r9,3
   2ba9c:	20c0022c 	andhi	r3,r4,8
   2baa0:	1800051e 	bne	r3,zero,2bab8 <__adddf3+0x760>
   2baa4:	300cd0fa 	srli	r6,r6,3
   2baa8:	4806977a 	slli	r3,r9,29
   2baac:	2005883a 	mov	r2,r4
   2bab0:	3825883a 	mov	r18,r7
   2bab4:	19a2b03a 	or	r17,r3,r6
   2bab8:	8810d77a 	srli	r8,r17,29
   2babc:	100490fa 	slli	r2,r2,3
   2bac0:	882290fa 	slli	r17,r17,3
   2bac4:	0401ffc4 	movi	r16,2047
   2bac8:	4090b03a 	or	r8,r8,r2
   2bacc:	003e4106 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2bad0:	0141ffc4 	movi	r5,2047
   2bad4:	117fc71e 	bne	r2,r5,2b9f4 <__alt_data_end+0xfffeb9f4>
   2bad8:	4811883a 	mov	r8,r9
   2badc:	3023883a 	mov	r17,r6
   2bae0:	1021883a 	mov	r16,r2
   2bae4:	003e3b06 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2bae8:	10002f26 	beq	r2,zero,2bba8 <__adddf3+0x850>
   2baec:	4984b03a 	or	r2,r9,r6
   2baf0:	10001126 	beq	r2,zero,2bb38 <__adddf3+0x7e0>
   2baf4:	4004d0fa 	srli	r2,r8,3
   2baf8:	8822d0fa 	srli	r17,r17,3
   2bafc:	4010977a 	slli	r8,r8,29
   2bb00:	10c0022c 	andhi	r3,r2,8
   2bb04:	4462b03a 	or	r17,r8,r17
   2bb08:	183feb26 	beq	r3,zero,2bab8 <__alt_data_end+0xfffebab8>
   2bb0c:	4808d0fa 	srli	r4,r9,3
   2bb10:	20c0022c 	andhi	r3,r4,8
   2bb14:	183fe81e 	bne	r3,zero,2bab8 <__alt_data_end+0xfffebab8>
   2bb18:	300cd0fa 	srli	r6,r6,3
   2bb1c:	4806977a 	slli	r3,r9,29
   2bb20:	2005883a 	mov	r2,r4
   2bb24:	19a2b03a 	or	r17,r3,r6
   2bb28:	003fe306 	br	2bab8 <__alt_data_end+0xfffebab8>
   2bb2c:	0011883a 	mov	r8,zero
   2bb30:	0005883a 	mov	r2,zero
   2bb34:	003e3f06 	br	2b434 <__alt_data_end+0xfffeb434>
   2bb38:	0401ffc4 	movi	r16,2047
   2bb3c:	003e2506 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2bb40:	0013883a 	mov	r9,zero
   2bb44:	003f8406 	br	2b958 <__alt_data_end+0xfffeb958>
   2bb48:	0005883a 	mov	r2,zero
   2bb4c:	0007883a 	mov	r3,zero
   2bb50:	003e8906 	br	2b578 <__alt_data_end+0xfffeb578>
   2bb54:	197ff804 	addi	r5,r3,-32
   2bb58:	01000804 	movi	r4,32
   2bb5c:	414ad83a 	srl	r5,r8,r5
   2bb60:	19002426 	beq	r3,r4,2bbf4 <__adddf3+0x89c>
   2bb64:	01001004 	movi	r4,64
   2bb68:	20c7c83a 	sub	r3,r4,r3
   2bb6c:	40c6983a 	sll	r3,r8,r3
   2bb70:	1c46b03a 	or	r3,r3,r17
   2bb74:	1806c03a 	cmpne	r3,r3,zero
   2bb78:	28e2b03a 	or	r17,r5,r3
   2bb7c:	0007883a 	mov	r3,zero
   2bb80:	003f2306 	br	2b810 <__alt_data_end+0xfffeb810>
   2bb84:	0007883a 	mov	r3,zero
   2bb88:	5811883a 	mov	r8,r11
   2bb8c:	00bfffc4 	movi	r2,-1
   2bb90:	0401ffc4 	movi	r16,2047
   2bb94:	003e7806 	br	2b578 <__alt_data_end+0xfffeb578>
   2bb98:	4462b03a 	or	r17,r8,r17
   2bb9c:	8822c03a 	cmpne	r17,r17,zero
   2bba0:	0009883a 	mov	r4,zero
   2bba4:	003fa006 	br	2ba28 <__alt_data_end+0xfffeba28>
   2bba8:	4811883a 	mov	r8,r9
   2bbac:	3023883a 	mov	r17,r6
   2bbb0:	0401ffc4 	movi	r16,2047
   2bbb4:	003e0706 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2bbb8:	4811883a 	mov	r8,r9
   2bbbc:	3023883a 	mov	r17,r6
   2bbc0:	003e0406 	br	2b3d4 <__alt_data_end+0xfffeb3d4>
   2bbc4:	21fff804 	addi	r7,r4,-32
   2bbc8:	01400804 	movi	r5,32
   2bbcc:	41ced83a 	srl	r7,r8,r7
   2bbd0:	21400a26 	beq	r4,r5,2bbfc <__adddf3+0x8a4>
   2bbd4:	01401004 	movi	r5,64
   2bbd8:	2909c83a 	sub	r4,r5,r4
   2bbdc:	4108983a 	sll	r4,r8,r4
   2bbe0:	2448b03a 	or	r4,r4,r17
   2bbe4:	2008c03a 	cmpne	r4,r4,zero
   2bbe8:	3922b03a 	or	r17,r7,r4
   2bbec:	0009883a 	mov	r4,zero
   2bbf0:	003f8d06 	br	2ba28 <__alt_data_end+0xfffeba28>
   2bbf4:	0007883a 	mov	r3,zero
   2bbf8:	003fdd06 	br	2bb70 <__alt_data_end+0xfffebb70>
   2bbfc:	0009883a 	mov	r4,zero
   2bc00:	003ff706 	br	2bbe0 <__alt_data_end+0xfffebbe0>

0002bc04 <__divdf3>:
   2bc04:	defff204 	addi	sp,sp,-56
   2bc08:	dd400915 	stw	r21,36(sp)
   2bc0c:	282ad53a 	srli	r21,r5,20
   2bc10:	dd000815 	stw	r20,32(sp)
   2bc14:	2828d7fa 	srli	r20,r5,31
   2bc18:	dc000415 	stw	r16,16(sp)
   2bc1c:	04000434 	movhi	r16,16
   2bc20:	df000c15 	stw	fp,48(sp)
   2bc24:	843fffc4 	addi	r16,r16,-1
   2bc28:	dfc00d15 	stw	ra,52(sp)
   2bc2c:	ddc00b15 	stw	r23,44(sp)
   2bc30:	dd800a15 	stw	r22,40(sp)
   2bc34:	dcc00715 	stw	r19,28(sp)
   2bc38:	dc800615 	stw	r18,24(sp)
   2bc3c:	dc400515 	stw	r17,20(sp)
   2bc40:	ad41ffcc 	andi	r21,r21,2047
   2bc44:	2c20703a 	and	r16,r5,r16
   2bc48:	a7003fcc 	andi	fp,r20,255
   2bc4c:	a8006126 	beq	r21,zero,2bdd4 <__divdf3+0x1d0>
   2bc50:	0081ffc4 	movi	r2,2047
   2bc54:	2025883a 	mov	r18,r4
   2bc58:	a8803726 	beq	r21,r2,2bd38 <__divdf3+0x134>
   2bc5c:	80800434 	orhi	r2,r16,16
   2bc60:	100490fa 	slli	r2,r2,3
   2bc64:	2020d77a 	srli	r16,r4,29
   2bc68:	202490fa 	slli	r18,r4,3
   2bc6c:	ad7f0044 	addi	r21,r21,-1023
   2bc70:	80a0b03a 	or	r16,r16,r2
   2bc74:	0027883a 	mov	r19,zero
   2bc78:	0013883a 	mov	r9,zero
   2bc7c:	3804d53a 	srli	r2,r7,20
   2bc80:	382cd7fa 	srli	r22,r7,31
   2bc84:	04400434 	movhi	r17,16
   2bc88:	8c7fffc4 	addi	r17,r17,-1
   2bc8c:	1081ffcc 	andi	r2,r2,2047
   2bc90:	3011883a 	mov	r8,r6
   2bc94:	3c62703a 	and	r17,r7,r17
   2bc98:	b5c03fcc 	andi	r23,r22,255
   2bc9c:	10006c26 	beq	r2,zero,2be50 <__divdf3+0x24c>
   2bca0:	00c1ffc4 	movi	r3,2047
   2bca4:	10c06426 	beq	r2,r3,2be38 <__divdf3+0x234>
   2bca8:	88c00434 	orhi	r3,r17,16
   2bcac:	180690fa 	slli	r3,r3,3
   2bcb0:	3022d77a 	srli	r17,r6,29
   2bcb4:	301090fa 	slli	r8,r6,3
   2bcb8:	10bf0044 	addi	r2,r2,-1023
   2bcbc:	88e2b03a 	or	r17,r17,r3
   2bcc0:	000f883a 	mov	r7,zero
   2bcc4:	a58cf03a 	xor	r6,r20,r22
   2bcc8:	3cc8b03a 	or	r4,r7,r19
   2bccc:	a8abc83a 	sub	r21,r21,r2
   2bcd0:	008003c4 	movi	r2,15
   2bcd4:	3007883a 	mov	r3,r6
   2bcd8:	34c03fcc 	andi	r19,r6,255
   2bcdc:	11009036 	bltu	r2,r4,2bf20 <__divdf3+0x31c>
   2bce0:	200890ba 	slli	r4,r4,2
   2bce4:	008000f4 	movhi	r2,3
   2bce8:	10af3e04 	addi	r2,r2,-17160
   2bcec:	2089883a 	add	r4,r4,r2
   2bcf0:	20800017 	ldw	r2,0(r4)
   2bcf4:	1000683a 	jmp	r2
   2bcf8:	0002bf20 	cmpeqi	zero,zero,2812
   2bcfc:	0002bd70 	cmpltui	zero,zero,2805
   2bd00:	0002bf10 	cmplti	zero,zero,2812
   2bd04:	0002bd64 	muli	zero,zero,2805
   2bd08:	0002bf10 	cmplti	zero,zero,2812
   2bd0c:	0002bee4 	muli	zero,zero,2811
   2bd10:	0002bf10 	cmplti	zero,zero,2812
   2bd14:	0002bd64 	muli	zero,zero,2805
   2bd18:	0002bd70 	cmpltui	zero,zero,2805
   2bd1c:	0002bd70 	cmpltui	zero,zero,2805
   2bd20:	0002bee4 	muli	zero,zero,2811
   2bd24:	0002bd64 	muli	zero,zero,2805
   2bd28:	0002bd54 	movui	zero,2805
   2bd2c:	0002bd54 	movui	zero,2805
   2bd30:	0002bd54 	movui	zero,2805
   2bd34:	0002c204 	movi	zero,2824
   2bd38:	2404b03a 	or	r2,r4,r16
   2bd3c:	1000661e 	bne	r2,zero,2bed8 <__divdf3+0x2d4>
   2bd40:	04c00204 	movi	r19,8
   2bd44:	0021883a 	mov	r16,zero
   2bd48:	0025883a 	mov	r18,zero
   2bd4c:	02400084 	movi	r9,2
   2bd50:	003fca06 	br	2bc7c <__alt_data_end+0xfffebc7c>
   2bd54:	8023883a 	mov	r17,r16
   2bd58:	9011883a 	mov	r8,r18
   2bd5c:	e02f883a 	mov	r23,fp
   2bd60:	480f883a 	mov	r7,r9
   2bd64:	00800084 	movi	r2,2
   2bd68:	3881311e 	bne	r7,r2,2c230 <__divdf3+0x62c>
   2bd6c:	b827883a 	mov	r19,r23
   2bd70:	98c0004c 	andi	r3,r19,1
   2bd74:	0081ffc4 	movi	r2,2047
   2bd78:	000b883a 	mov	r5,zero
   2bd7c:	0025883a 	mov	r18,zero
   2bd80:	1004953a 	slli	r2,r2,20
   2bd84:	18c03fcc 	andi	r3,r3,255
   2bd88:	04400434 	movhi	r17,16
   2bd8c:	8c7fffc4 	addi	r17,r17,-1
   2bd90:	180697fa 	slli	r3,r3,31
   2bd94:	2c4a703a 	and	r5,r5,r17
   2bd98:	288ab03a 	or	r5,r5,r2
   2bd9c:	28c6b03a 	or	r3,r5,r3
   2bda0:	9005883a 	mov	r2,r18
   2bda4:	dfc00d17 	ldw	ra,52(sp)
   2bda8:	df000c17 	ldw	fp,48(sp)
   2bdac:	ddc00b17 	ldw	r23,44(sp)
   2bdb0:	dd800a17 	ldw	r22,40(sp)
   2bdb4:	dd400917 	ldw	r21,36(sp)
   2bdb8:	dd000817 	ldw	r20,32(sp)
   2bdbc:	dcc00717 	ldw	r19,28(sp)
   2bdc0:	dc800617 	ldw	r18,24(sp)
   2bdc4:	dc400517 	ldw	r17,20(sp)
   2bdc8:	dc000417 	ldw	r16,16(sp)
   2bdcc:	dec00e04 	addi	sp,sp,56
   2bdd0:	f800283a 	ret
   2bdd4:	2404b03a 	or	r2,r4,r16
   2bdd8:	2027883a 	mov	r19,r4
   2bddc:	10003926 	beq	r2,zero,2bec4 <__divdf3+0x2c0>
   2bde0:	80012e26 	beq	r16,zero,2c29c <__divdf3+0x698>
   2bde4:	8009883a 	mov	r4,r16
   2bde8:	d9800315 	stw	r6,12(sp)
   2bdec:	d9c00215 	stw	r7,8(sp)
   2bdf0:	002d95c0 	call	2d95c <__clzsi2>
   2bdf4:	d9800317 	ldw	r6,12(sp)
   2bdf8:	d9c00217 	ldw	r7,8(sp)
   2bdfc:	113ffd44 	addi	r4,r2,-11
   2be00:	00c00704 	movi	r3,28
   2be04:	19012116 	blt	r3,r4,2c28c <__divdf3+0x688>
   2be08:	00c00744 	movi	r3,29
   2be0c:	147ffe04 	addi	r17,r2,-8
   2be10:	1907c83a 	sub	r3,r3,r4
   2be14:	8460983a 	sll	r16,r16,r17
   2be18:	98c6d83a 	srl	r3,r19,r3
   2be1c:	9c64983a 	sll	r18,r19,r17
   2be20:	1c20b03a 	or	r16,r3,r16
   2be24:	1080fcc4 	addi	r2,r2,1011
   2be28:	00abc83a 	sub	r21,zero,r2
   2be2c:	0027883a 	mov	r19,zero
   2be30:	0013883a 	mov	r9,zero
   2be34:	003f9106 	br	2bc7c <__alt_data_end+0xfffebc7c>
   2be38:	3446b03a 	or	r3,r6,r17
   2be3c:	18001f1e 	bne	r3,zero,2bebc <__divdf3+0x2b8>
   2be40:	0023883a 	mov	r17,zero
   2be44:	0011883a 	mov	r8,zero
   2be48:	01c00084 	movi	r7,2
   2be4c:	003f9d06 	br	2bcc4 <__alt_data_end+0xfffebcc4>
   2be50:	3446b03a 	or	r3,r6,r17
   2be54:	18001526 	beq	r3,zero,2beac <__divdf3+0x2a8>
   2be58:	88011b26 	beq	r17,zero,2c2c8 <__divdf3+0x6c4>
   2be5c:	8809883a 	mov	r4,r17
   2be60:	d9800315 	stw	r6,12(sp)
   2be64:	da400115 	stw	r9,4(sp)
   2be68:	002d95c0 	call	2d95c <__clzsi2>
   2be6c:	d9800317 	ldw	r6,12(sp)
   2be70:	da400117 	ldw	r9,4(sp)
   2be74:	113ffd44 	addi	r4,r2,-11
   2be78:	00c00704 	movi	r3,28
   2be7c:	19010e16 	blt	r3,r4,2c2b8 <__divdf3+0x6b4>
   2be80:	00c00744 	movi	r3,29
   2be84:	123ffe04 	addi	r8,r2,-8
   2be88:	1907c83a 	sub	r3,r3,r4
   2be8c:	8a22983a 	sll	r17,r17,r8
   2be90:	30c6d83a 	srl	r3,r6,r3
   2be94:	3210983a 	sll	r8,r6,r8
   2be98:	1c62b03a 	or	r17,r3,r17
   2be9c:	1080fcc4 	addi	r2,r2,1011
   2bea0:	0085c83a 	sub	r2,zero,r2
   2bea4:	000f883a 	mov	r7,zero
   2bea8:	003f8606 	br	2bcc4 <__alt_data_end+0xfffebcc4>
   2beac:	0023883a 	mov	r17,zero
   2beb0:	0011883a 	mov	r8,zero
   2beb4:	01c00044 	movi	r7,1
   2beb8:	003f8206 	br	2bcc4 <__alt_data_end+0xfffebcc4>
   2bebc:	01c000c4 	movi	r7,3
   2bec0:	003f8006 	br	2bcc4 <__alt_data_end+0xfffebcc4>
   2bec4:	04c00104 	movi	r19,4
   2bec8:	0021883a 	mov	r16,zero
   2becc:	0025883a 	mov	r18,zero
   2bed0:	02400044 	movi	r9,1
   2bed4:	003f6906 	br	2bc7c <__alt_data_end+0xfffebc7c>
   2bed8:	04c00304 	movi	r19,12
   2bedc:	024000c4 	movi	r9,3
   2bee0:	003f6606 	br	2bc7c <__alt_data_end+0xfffebc7c>
   2bee4:	01400434 	movhi	r5,16
   2bee8:	0007883a 	mov	r3,zero
   2beec:	297fffc4 	addi	r5,r5,-1
   2bef0:	04bfffc4 	movi	r18,-1
   2bef4:	0081ffc4 	movi	r2,2047
   2bef8:	003fa106 	br	2bd80 <__alt_data_end+0xfffebd80>
   2befc:	00c00044 	movi	r3,1
   2bf00:	1887c83a 	sub	r3,r3,r2
   2bf04:	01000e04 	movi	r4,56
   2bf08:	20c1210e 	bge	r4,r3,2c390 <__divdf3+0x78c>
   2bf0c:	98c0004c 	andi	r3,r19,1
   2bf10:	0005883a 	mov	r2,zero
   2bf14:	000b883a 	mov	r5,zero
   2bf18:	0025883a 	mov	r18,zero
   2bf1c:	003f9806 	br	2bd80 <__alt_data_end+0xfffebd80>
   2bf20:	8c00fd36 	bltu	r17,r16,2c318 <__divdf3+0x714>
   2bf24:	8440fb26 	beq	r16,r17,2c314 <__divdf3+0x710>
   2bf28:	8007883a 	mov	r3,r16
   2bf2c:	ad7fffc4 	addi	r21,r21,-1
   2bf30:	0021883a 	mov	r16,zero
   2bf34:	4004d63a 	srli	r2,r8,24
   2bf38:	8822923a 	slli	r17,r17,8
   2bf3c:	1809883a 	mov	r4,r3
   2bf40:	402c923a 	slli	r22,r8,8
   2bf44:	88b8b03a 	or	fp,r17,r2
   2bf48:	e028d43a 	srli	r20,fp,16
   2bf4c:	d8c00015 	stw	r3,0(sp)
   2bf50:	e5ffffcc 	andi	r23,fp,65535
   2bf54:	a00b883a 	mov	r5,r20
   2bf58:	002b29c0 	call	2b29c <__udivsi3>
   2bf5c:	d8c00017 	ldw	r3,0(sp)
   2bf60:	a00b883a 	mov	r5,r20
   2bf64:	d8800315 	stw	r2,12(sp)
   2bf68:	1809883a 	mov	r4,r3
   2bf6c:	002b3000 	call	2b300 <__umodsi3>
   2bf70:	d9800317 	ldw	r6,12(sp)
   2bf74:	1006943a 	slli	r3,r2,16
   2bf78:	9004d43a 	srli	r2,r18,16
   2bf7c:	b9a3383a 	mul	r17,r23,r6
   2bf80:	10c4b03a 	or	r2,r2,r3
   2bf84:	1440062e 	bgeu	r2,r17,2bfa0 <__divdf3+0x39c>
   2bf88:	1705883a 	add	r2,r2,fp
   2bf8c:	30ffffc4 	addi	r3,r6,-1
   2bf90:	1700ee36 	bltu	r2,fp,2c34c <__divdf3+0x748>
   2bf94:	1440ed2e 	bgeu	r2,r17,2c34c <__divdf3+0x748>
   2bf98:	31bfff84 	addi	r6,r6,-2
   2bf9c:	1705883a 	add	r2,r2,fp
   2bfa0:	1463c83a 	sub	r17,r2,r17
   2bfa4:	a00b883a 	mov	r5,r20
   2bfa8:	8809883a 	mov	r4,r17
   2bfac:	d9800315 	stw	r6,12(sp)
   2bfb0:	002b29c0 	call	2b29c <__udivsi3>
   2bfb4:	a00b883a 	mov	r5,r20
   2bfb8:	8809883a 	mov	r4,r17
   2bfbc:	d8800215 	stw	r2,8(sp)
   2bfc0:	002b3000 	call	2b300 <__umodsi3>
   2bfc4:	d9c00217 	ldw	r7,8(sp)
   2bfc8:	1004943a 	slli	r2,r2,16
   2bfcc:	94bfffcc 	andi	r18,r18,65535
   2bfd0:	b9d1383a 	mul	r8,r23,r7
   2bfd4:	90a4b03a 	or	r18,r18,r2
   2bfd8:	d9800317 	ldw	r6,12(sp)
   2bfdc:	9200062e 	bgeu	r18,r8,2bff8 <__divdf3+0x3f4>
   2bfe0:	9725883a 	add	r18,r18,fp
   2bfe4:	38bfffc4 	addi	r2,r7,-1
   2bfe8:	9700d636 	bltu	r18,fp,2c344 <__divdf3+0x740>
   2bfec:	9200d52e 	bgeu	r18,r8,2c344 <__divdf3+0x740>
   2bff0:	39ffff84 	addi	r7,r7,-2
   2bff4:	9725883a 	add	r18,r18,fp
   2bff8:	3004943a 	slli	r2,r6,16
   2bffc:	b012d43a 	srli	r9,r22,16
   2c000:	b1bfffcc 	andi	r6,r22,65535
   2c004:	11e2b03a 	or	r17,r2,r7
   2c008:	8806d43a 	srli	r3,r17,16
   2c00c:	893fffcc 	andi	r4,r17,65535
   2c010:	218b383a 	mul	r5,r4,r6
   2c014:	30c5383a 	mul	r2,r6,r3
   2c018:	2249383a 	mul	r4,r4,r9
   2c01c:	280ed43a 	srli	r7,r5,16
   2c020:	9225c83a 	sub	r18,r18,r8
   2c024:	2089883a 	add	r4,r4,r2
   2c028:	3909883a 	add	r4,r7,r4
   2c02c:	1a47383a 	mul	r3,r3,r9
   2c030:	2080022e 	bgeu	r4,r2,2c03c <__divdf3+0x438>
   2c034:	00800074 	movhi	r2,1
   2c038:	1887883a 	add	r3,r3,r2
   2c03c:	2004d43a 	srli	r2,r4,16
   2c040:	2008943a 	slli	r4,r4,16
   2c044:	297fffcc 	andi	r5,r5,65535
   2c048:	10c7883a 	add	r3,r2,r3
   2c04c:	2149883a 	add	r4,r4,r5
   2c050:	90c0a536 	bltu	r18,r3,2c2e8 <__divdf3+0x6e4>
   2c054:	90c0bf26 	beq	r18,r3,2c354 <__divdf3+0x750>
   2c058:	90c7c83a 	sub	r3,r18,r3
   2c05c:	810fc83a 	sub	r7,r16,r4
   2c060:	81e5803a 	cmpltu	r18,r16,r7
   2c064:	1ca5c83a 	sub	r18,r3,r18
   2c068:	e480c126 	beq	fp,r18,2c370 <__divdf3+0x76c>
   2c06c:	a00b883a 	mov	r5,r20
   2c070:	9009883a 	mov	r4,r18
   2c074:	d9800315 	stw	r6,12(sp)
   2c078:	d9c00215 	stw	r7,8(sp)
   2c07c:	da400115 	stw	r9,4(sp)
   2c080:	002b29c0 	call	2b29c <__udivsi3>
   2c084:	a00b883a 	mov	r5,r20
   2c088:	9009883a 	mov	r4,r18
   2c08c:	d8800015 	stw	r2,0(sp)
   2c090:	002b3000 	call	2b300 <__umodsi3>
   2c094:	d9c00217 	ldw	r7,8(sp)
   2c098:	da000017 	ldw	r8,0(sp)
   2c09c:	1006943a 	slli	r3,r2,16
   2c0a0:	3804d43a 	srli	r2,r7,16
   2c0a4:	ba21383a 	mul	r16,r23,r8
   2c0a8:	d9800317 	ldw	r6,12(sp)
   2c0ac:	10c4b03a 	or	r2,r2,r3
   2c0b0:	da400117 	ldw	r9,4(sp)
   2c0b4:	1400062e 	bgeu	r2,r16,2c0d0 <__divdf3+0x4cc>
   2c0b8:	1705883a 	add	r2,r2,fp
   2c0bc:	40ffffc4 	addi	r3,r8,-1
   2c0c0:	1700ad36 	bltu	r2,fp,2c378 <__divdf3+0x774>
   2c0c4:	1400ac2e 	bgeu	r2,r16,2c378 <__divdf3+0x774>
   2c0c8:	423fff84 	addi	r8,r8,-2
   2c0cc:	1705883a 	add	r2,r2,fp
   2c0d0:	1421c83a 	sub	r16,r2,r16
   2c0d4:	a00b883a 	mov	r5,r20
   2c0d8:	8009883a 	mov	r4,r16
   2c0dc:	d9800315 	stw	r6,12(sp)
   2c0e0:	d9c00215 	stw	r7,8(sp)
   2c0e4:	da000015 	stw	r8,0(sp)
   2c0e8:	da400115 	stw	r9,4(sp)
   2c0ec:	002b29c0 	call	2b29c <__udivsi3>
   2c0f0:	8009883a 	mov	r4,r16
   2c0f4:	a00b883a 	mov	r5,r20
   2c0f8:	1025883a 	mov	r18,r2
   2c0fc:	002b3000 	call	2b300 <__umodsi3>
   2c100:	d9c00217 	ldw	r7,8(sp)
   2c104:	1004943a 	slli	r2,r2,16
   2c108:	bcaf383a 	mul	r23,r23,r18
   2c10c:	393fffcc 	andi	r4,r7,65535
   2c110:	2088b03a 	or	r4,r4,r2
   2c114:	d9800317 	ldw	r6,12(sp)
   2c118:	da000017 	ldw	r8,0(sp)
   2c11c:	da400117 	ldw	r9,4(sp)
   2c120:	25c0062e 	bgeu	r4,r23,2c13c <__divdf3+0x538>
   2c124:	2709883a 	add	r4,r4,fp
   2c128:	90bfffc4 	addi	r2,r18,-1
   2c12c:	27009436 	bltu	r4,fp,2c380 <__divdf3+0x77c>
   2c130:	25c0932e 	bgeu	r4,r23,2c380 <__divdf3+0x77c>
   2c134:	94bfff84 	addi	r18,r18,-2
   2c138:	2709883a 	add	r4,r4,fp
   2c13c:	4004943a 	slli	r2,r8,16
   2c140:	25efc83a 	sub	r23,r4,r23
   2c144:	1490b03a 	or	r8,r2,r18
   2c148:	4008d43a 	srli	r4,r8,16
   2c14c:	40ffffcc 	andi	r3,r8,65535
   2c150:	30c5383a 	mul	r2,r6,r3
   2c154:	1a47383a 	mul	r3,r3,r9
   2c158:	310d383a 	mul	r6,r6,r4
   2c15c:	100ad43a 	srli	r5,r2,16
   2c160:	4913383a 	mul	r9,r9,r4
   2c164:	1987883a 	add	r3,r3,r6
   2c168:	28c7883a 	add	r3,r5,r3
   2c16c:	1980022e 	bgeu	r3,r6,2c178 <__divdf3+0x574>
   2c170:	01000074 	movhi	r4,1
   2c174:	4913883a 	add	r9,r9,r4
   2c178:	1808d43a 	srli	r4,r3,16
   2c17c:	1806943a 	slli	r3,r3,16
   2c180:	10bfffcc 	andi	r2,r2,65535
   2c184:	2253883a 	add	r9,r4,r9
   2c188:	1887883a 	add	r3,r3,r2
   2c18c:	ba403836 	bltu	r23,r9,2c270 <__divdf3+0x66c>
   2c190:	ba403626 	beq	r23,r9,2c26c <__divdf3+0x668>
   2c194:	42000054 	ori	r8,r8,1
   2c198:	a880ffc4 	addi	r2,r21,1023
   2c19c:	00bf570e 	bge	zero,r2,2befc <__alt_data_end+0xfffebefc>
   2c1a0:	40c001cc 	andi	r3,r8,7
   2c1a4:	18000726 	beq	r3,zero,2c1c4 <__divdf3+0x5c0>
   2c1a8:	40c003cc 	andi	r3,r8,15
   2c1ac:	01000104 	movi	r4,4
   2c1b0:	19000426 	beq	r3,r4,2c1c4 <__divdf3+0x5c0>
   2c1b4:	4107883a 	add	r3,r8,r4
   2c1b8:	1a11803a 	cmpltu	r8,r3,r8
   2c1bc:	8a23883a 	add	r17,r17,r8
   2c1c0:	1811883a 	mov	r8,r3
   2c1c4:	88c0402c 	andhi	r3,r17,256
   2c1c8:	18000426 	beq	r3,zero,2c1dc <__divdf3+0x5d8>
   2c1cc:	00ffc034 	movhi	r3,65280
   2c1d0:	18ffffc4 	addi	r3,r3,-1
   2c1d4:	a8810004 	addi	r2,r21,1024
   2c1d8:	88e2703a 	and	r17,r17,r3
   2c1dc:	00c1ff84 	movi	r3,2046
   2c1e0:	18bee316 	blt	r3,r2,2bd70 <__alt_data_end+0xfffebd70>
   2c1e4:	8824977a 	slli	r18,r17,29
   2c1e8:	4010d0fa 	srli	r8,r8,3
   2c1ec:	8822927a 	slli	r17,r17,9
   2c1f0:	1081ffcc 	andi	r2,r2,2047
   2c1f4:	9224b03a 	or	r18,r18,r8
   2c1f8:	880ad33a 	srli	r5,r17,12
   2c1fc:	98c0004c 	andi	r3,r19,1
   2c200:	003edf06 	br	2bd80 <__alt_data_end+0xfffebd80>
   2c204:	8080022c 	andhi	r2,r16,8
   2c208:	10001226 	beq	r2,zero,2c254 <__divdf3+0x650>
   2c20c:	8880022c 	andhi	r2,r17,8
   2c210:	1000101e 	bne	r2,zero,2c254 <__divdf3+0x650>
   2c214:	00800434 	movhi	r2,16
   2c218:	89400234 	orhi	r5,r17,8
   2c21c:	10bfffc4 	addi	r2,r2,-1
   2c220:	b007883a 	mov	r3,r22
   2c224:	288a703a 	and	r5,r5,r2
   2c228:	4025883a 	mov	r18,r8
   2c22c:	003f3106 	br	2bef4 <__alt_data_end+0xfffebef4>
   2c230:	008000c4 	movi	r2,3
   2c234:	3880a626 	beq	r7,r2,2c4d0 <__divdf3+0x8cc>
   2c238:	00800044 	movi	r2,1
   2c23c:	3880521e 	bne	r7,r2,2c388 <__divdf3+0x784>
   2c240:	b807883a 	mov	r3,r23
   2c244:	0005883a 	mov	r2,zero
   2c248:	000b883a 	mov	r5,zero
   2c24c:	0025883a 	mov	r18,zero
   2c250:	003ecb06 	br	2bd80 <__alt_data_end+0xfffebd80>
   2c254:	00800434 	movhi	r2,16
   2c258:	81400234 	orhi	r5,r16,8
   2c25c:	10bfffc4 	addi	r2,r2,-1
   2c260:	a007883a 	mov	r3,r20
   2c264:	288a703a 	and	r5,r5,r2
   2c268:	003f2206 	br	2bef4 <__alt_data_end+0xfffebef4>
   2c26c:	183fca26 	beq	r3,zero,2c198 <__alt_data_end+0xfffec198>
   2c270:	e5ef883a 	add	r23,fp,r23
   2c274:	40bfffc4 	addi	r2,r8,-1
   2c278:	bf00392e 	bgeu	r23,fp,2c360 <__divdf3+0x75c>
   2c27c:	1011883a 	mov	r8,r2
   2c280:	ba7fc41e 	bne	r23,r9,2c194 <__alt_data_end+0xfffec194>
   2c284:	b0ffc31e 	bne	r22,r3,2c194 <__alt_data_end+0xfffec194>
   2c288:	003fc306 	br	2c198 <__alt_data_end+0xfffec198>
   2c28c:	143ff604 	addi	r16,r2,-40
   2c290:	9c20983a 	sll	r16,r19,r16
   2c294:	0025883a 	mov	r18,zero
   2c298:	003ee206 	br	2be24 <__alt_data_end+0xfffebe24>
   2c29c:	d9800315 	stw	r6,12(sp)
   2c2a0:	d9c00215 	stw	r7,8(sp)
   2c2a4:	002d95c0 	call	2d95c <__clzsi2>
   2c2a8:	10800804 	addi	r2,r2,32
   2c2ac:	d9c00217 	ldw	r7,8(sp)
   2c2b0:	d9800317 	ldw	r6,12(sp)
   2c2b4:	003ed106 	br	2bdfc <__alt_data_end+0xfffebdfc>
   2c2b8:	147ff604 	addi	r17,r2,-40
   2c2bc:	3462983a 	sll	r17,r6,r17
   2c2c0:	0011883a 	mov	r8,zero
   2c2c4:	003ef506 	br	2be9c <__alt_data_end+0xfffebe9c>
   2c2c8:	3009883a 	mov	r4,r6
   2c2cc:	d9800315 	stw	r6,12(sp)
   2c2d0:	da400115 	stw	r9,4(sp)
   2c2d4:	002d95c0 	call	2d95c <__clzsi2>
   2c2d8:	10800804 	addi	r2,r2,32
   2c2dc:	da400117 	ldw	r9,4(sp)
   2c2e0:	d9800317 	ldw	r6,12(sp)
   2c2e4:	003ee306 	br	2be74 <__alt_data_end+0xfffebe74>
   2c2e8:	85a1883a 	add	r16,r16,r22
   2c2ec:	8585803a 	cmpltu	r2,r16,r22
   2c2f0:	1705883a 	add	r2,r2,fp
   2c2f4:	14a5883a 	add	r18,r2,r18
   2c2f8:	88bfffc4 	addi	r2,r17,-1
   2c2fc:	e4800c2e 	bgeu	fp,r18,2c330 <__divdf3+0x72c>
   2c300:	90c03e36 	bltu	r18,r3,2c3fc <__divdf3+0x7f8>
   2c304:	1c806926 	beq	r3,r18,2c4ac <__divdf3+0x8a8>
   2c308:	90c7c83a 	sub	r3,r18,r3
   2c30c:	1023883a 	mov	r17,r2
   2c310:	003f5206 	br	2c05c <__alt_data_end+0xfffec05c>
   2c314:	923f0436 	bltu	r18,r8,2bf28 <__alt_data_end+0xfffebf28>
   2c318:	800897fa 	slli	r4,r16,31
   2c31c:	9004d07a 	srli	r2,r18,1
   2c320:	8006d07a 	srli	r3,r16,1
   2c324:	902097fa 	slli	r16,r18,31
   2c328:	20a4b03a 	or	r18,r4,r2
   2c32c:	003f0106 	br	2bf34 <__alt_data_end+0xfffebf34>
   2c330:	e4bff51e 	bne	fp,r18,2c308 <__alt_data_end+0xfffec308>
   2c334:	85bff22e 	bgeu	r16,r22,2c300 <__alt_data_end+0xfffec300>
   2c338:	e0c7c83a 	sub	r3,fp,r3
   2c33c:	1023883a 	mov	r17,r2
   2c340:	003f4606 	br	2c05c <__alt_data_end+0xfffec05c>
   2c344:	100f883a 	mov	r7,r2
   2c348:	003f2b06 	br	2bff8 <__alt_data_end+0xfffebff8>
   2c34c:	180d883a 	mov	r6,r3
   2c350:	003f1306 	br	2bfa0 <__alt_data_end+0xfffebfa0>
   2c354:	813fe436 	bltu	r16,r4,2c2e8 <__alt_data_end+0xfffec2e8>
   2c358:	0007883a 	mov	r3,zero
   2c35c:	003f3f06 	br	2c05c <__alt_data_end+0xfffec05c>
   2c360:	ba402c36 	bltu	r23,r9,2c414 <__divdf3+0x810>
   2c364:	4dc05426 	beq	r9,r23,2c4b8 <__divdf3+0x8b4>
   2c368:	1011883a 	mov	r8,r2
   2c36c:	003f8906 	br	2c194 <__alt_data_end+0xfffec194>
   2c370:	023fffc4 	movi	r8,-1
   2c374:	003f8806 	br	2c198 <__alt_data_end+0xfffec198>
   2c378:	1811883a 	mov	r8,r3
   2c37c:	003f5406 	br	2c0d0 <__alt_data_end+0xfffec0d0>
   2c380:	1025883a 	mov	r18,r2
   2c384:	003f6d06 	br	2c13c <__alt_data_end+0xfffec13c>
   2c388:	b827883a 	mov	r19,r23
   2c38c:	003f8206 	br	2c198 <__alt_data_end+0xfffec198>
   2c390:	010007c4 	movi	r4,31
   2c394:	20c02616 	blt	r4,r3,2c430 <__divdf3+0x82c>
   2c398:	00800804 	movi	r2,32
   2c39c:	10c5c83a 	sub	r2,r2,r3
   2c3a0:	888a983a 	sll	r5,r17,r2
   2c3a4:	40c8d83a 	srl	r4,r8,r3
   2c3a8:	4084983a 	sll	r2,r8,r2
   2c3ac:	88e2d83a 	srl	r17,r17,r3
   2c3b0:	2906b03a 	or	r3,r5,r4
   2c3b4:	1004c03a 	cmpne	r2,r2,zero
   2c3b8:	1886b03a 	or	r3,r3,r2
   2c3bc:	188001cc 	andi	r2,r3,7
   2c3c0:	10000726 	beq	r2,zero,2c3e0 <__divdf3+0x7dc>
   2c3c4:	188003cc 	andi	r2,r3,15
   2c3c8:	01000104 	movi	r4,4
   2c3cc:	11000426 	beq	r2,r4,2c3e0 <__divdf3+0x7dc>
   2c3d0:	1805883a 	mov	r2,r3
   2c3d4:	10c00104 	addi	r3,r2,4
   2c3d8:	1885803a 	cmpltu	r2,r3,r2
   2c3dc:	88a3883a 	add	r17,r17,r2
   2c3e0:	8880202c 	andhi	r2,r17,128
   2c3e4:	10002726 	beq	r2,zero,2c484 <__divdf3+0x880>
   2c3e8:	98c0004c 	andi	r3,r19,1
   2c3ec:	00800044 	movi	r2,1
   2c3f0:	000b883a 	mov	r5,zero
   2c3f4:	0025883a 	mov	r18,zero
   2c3f8:	003e6106 	br	2bd80 <__alt_data_end+0xfffebd80>
   2c3fc:	85a1883a 	add	r16,r16,r22
   2c400:	8585803a 	cmpltu	r2,r16,r22
   2c404:	1705883a 	add	r2,r2,fp
   2c408:	14a5883a 	add	r18,r2,r18
   2c40c:	8c7fff84 	addi	r17,r17,-2
   2c410:	003f1106 	br	2c058 <__alt_data_end+0xfffec058>
   2c414:	b589883a 	add	r4,r22,r22
   2c418:	25ad803a 	cmpltu	r22,r4,r22
   2c41c:	b739883a 	add	fp,r22,fp
   2c420:	40bfff84 	addi	r2,r8,-2
   2c424:	bf2f883a 	add	r23,r23,fp
   2c428:	202d883a 	mov	r22,r4
   2c42c:	003f9306 	br	2c27c <__alt_data_end+0xfffec27c>
   2c430:	013ff844 	movi	r4,-31
   2c434:	2085c83a 	sub	r2,r4,r2
   2c438:	8888d83a 	srl	r4,r17,r2
   2c43c:	00800804 	movi	r2,32
   2c440:	18802126 	beq	r3,r2,2c4c8 <__divdf3+0x8c4>
   2c444:	00801004 	movi	r2,64
   2c448:	10c5c83a 	sub	r2,r2,r3
   2c44c:	8884983a 	sll	r2,r17,r2
   2c450:	1204b03a 	or	r2,r2,r8
   2c454:	1004c03a 	cmpne	r2,r2,zero
   2c458:	2084b03a 	or	r2,r4,r2
   2c45c:	144001cc 	andi	r17,r2,7
   2c460:	88000d1e 	bne	r17,zero,2c498 <__divdf3+0x894>
   2c464:	000b883a 	mov	r5,zero
   2c468:	1024d0fa 	srli	r18,r2,3
   2c46c:	98c0004c 	andi	r3,r19,1
   2c470:	0005883a 	mov	r2,zero
   2c474:	9464b03a 	or	r18,r18,r17
   2c478:	003e4106 	br	2bd80 <__alt_data_end+0xfffebd80>
   2c47c:	1007883a 	mov	r3,r2
   2c480:	0023883a 	mov	r17,zero
   2c484:	880a927a 	slli	r5,r17,9
   2c488:	1805883a 	mov	r2,r3
   2c48c:	8822977a 	slli	r17,r17,29
   2c490:	280ad33a 	srli	r5,r5,12
   2c494:	003ff406 	br	2c468 <__alt_data_end+0xfffec468>
   2c498:	10c003cc 	andi	r3,r2,15
   2c49c:	01000104 	movi	r4,4
   2c4a0:	193ff626 	beq	r3,r4,2c47c <__alt_data_end+0xfffec47c>
   2c4a4:	0023883a 	mov	r17,zero
   2c4a8:	003fca06 	br	2c3d4 <__alt_data_end+0xfffec3d4>
   2c4ac:	813fd336 	bltu	r16,r4,2c3fc <__alt_data_end+0xfffec3fc>
   2c4b0:	1023883a 	mov	r17,r2
   2c4b4:	003fa806 	br	2c358 <__alt_data_end+0xfffec358>
   2c4b8:	b0ffd636 	bltu	r22,r3,2c414 <__alt_data_end+0xfffec414>
   2c4bc:	1011883a 	mov	r8,r2
   2c4c0:	b0ff341e 	bne	r22,r3,2c194 <__alt_data_end+0xfffec194>
   2c4c4:	003f3406 	br	2c198 <__alt_data_end+0xfffec198>
   2c4c8:	0005883a 	mov	r2,zero
   2c4cc:	003fe006 	br	2c450 <__alt_data_end+0xfffec450>
   2c4d0:	00800434 	movhi	r2,16
   2c4d4:	89400234 	orhi	r5,r17,8
   2c4d8:	10bfffc4 	addi	r2,r2,-1
   2c4dc:	b807883a 	mov	r3,r23
   2c4e0:	288a703a 	and	r5,r5,r2
   2c4e4:	4025883a 	mov	r18,r8
   2c4e8:	003e8206 	br	2bef4 <__alt_data_end+0xfffebef4>

0002c4ec <__eqdf2>:
   2c4ec:	2804d53a 	srli	r2,r5,20
   2c4f0:	3806d53a 	srli	r3,r7,20
   2c4f4:	02000434 	movhi	r8,16
   2c4f8:	423fffc4 	addi	r8,r8,-1
   2c4fc:	1081ffcc 	andi	r2,r2,2047
   2c500:	0281ffc4 	movi	r10,2047
   2c504:	2a12703a 	and	r9,r5,r8
   2c508:	18c1ffcc 	andi	r3,r3,2047
   2c50c:	3a10703a 	and	r8,r7,r8
   2c510:	280ad7fa 	srli	r5,r5,31
   2c514:	380ed7fa 	srli	r7,r7,31
   2c518:	12801026 	beq	r2,r10,2c55c <__eqdf2+0x70>
   2c51c:	0281ffc4 	movi	r10,2047
   2c520:	1a800a26 	beq	r3,r10,2c54c <__eqdf2+0x60>
   2c524:	10c00226 	beq	r2,r3,2c530 <__eqdf2+0x44>
   2c528:	00800044 	movi	r2,1
   2c52c:	f800283a 	ret
   2c530:	4a3ffd1e 	bne	r9,r8,2c528 <__alt_data_end+0xfffec528>
   2c534:	21bffc1e 	bne	r4,r6,2c528 <__alt_data_end+0xfffec528>
   2c538:	29c00c26 	beq	r5,r7,2c56c <__eqdf2+0x80>
   2c53c:	103ffa1e 	bne	r2,zero,2c528 <__alt_data_end+0xfffec528>
   2c540:	2244b03a 	or	r2,r4,r9
   2c544:	1004c03a 	cmpne	r2,r2,zero
   2c548:	f800283a 	ret
   2c54c:	3214b03a 	or	r10,r6,r8
   2c550:	503ff426 	beq	r10,zero,2c524 <__alt_data_end+0xfffec524>
   2c554:	00800044 	movi	r2,1
   2c558:	f800283a 	ret
   2c55c:	2254b03a 	or	r10,r4,r9
   2c560:	503fee26 	beq	r10,zero,2c51c <__alt_data_end+0xfffec51c>
   2c564:	00800044 	movi	r2,1
   2c568:	f800283a 	ret
   2c56c:	0005883a 	mov	r2,zero
   2c570:	f800283a 	ret

0002c574 <__gedf2>:
   2c574:	2804d53a 	srli	r2,r5,20
   2c578:	3806d53a 	srli	r3,r7,20
   2c57c:	02000434 	movhi	r8,16
   2c580:	423fffc4 	addi	r8,r8,-1
   2c584:	1081ffcc 	andi	r2,r2,2047
   2c588:	0241ffc4 	movi	r9,2047
   2c58c:	2a14703a 	and	r10,r5,r8
   2c590:	18c1ffcc 	andi	r3,r3,2047
   2c594:	3a10703a 	and	r8,r7,r8
   2c598:	280ad7fa 	srli	r5,r5,31
   2c59c:	380ed7fa 	srli	r7,r7,31
   2c5a0:	12401d26 	beq	r2,r9,2c618 <__gedf2+0xa4>
   2c5a4:	0241ffc4 	movi	r9,2047
   2c5a8:	1a401226 	beq	r3,r9,2c5f4 <__gedf2+0x80>
   2c5ac:	1000081e 	bne	r2,zero,2c5d0 <__gedf2+0x5c>
   2c5b0:	2296b03a 	or	r11,r4,r10
   2c5b4:	5813003a 	cmpeq	r9,r11,zero
   2c5b8:	1800091e 	bne	r3,zero,2c5e0 <__gedf2+0x6c>
   2c5bc:	3218b03a 	or	r12,r6,r8
   2c5c0:	6000071e 	bne	r12,zero,2c5e0 <__gedf2+0x6c>
   2c5c4:	0005883a 	mov	r2,zero
   2c5c8:	5800101e 	bne	r11,zero,2c60c <__gedf2+0x98>
   2c5cc:	f800283a 	ret
   2c5d0:	18000c1e 	bne	r3,zero,2c604 <__gedf2+0x90>
   2c5d4:	3212b03a 	or	r9,r6,r8
   2c5d8:	48000c26 	beq	r9,zero,2c60c <__gedf2+0x98>
   2c5dc:	0013883a 	mov	r9,zero
   2c5e0:	39c03fcc 	andi	r7,r7,255
   2c5e4:	48000826 	beq	r9,zero,2c608 <__gedf2+0x94>
   2c5e8:	38000926 	beq	r7,zero,2c610 <__gedf2+0x9c>
   2c5ec:	00800044 	movi	r2,1
   2c5f0:	f800283a 	ret
   2c5f4:	3212b03a 	or	r9,r6,r8
   2c5f8:	483fec26 	beq	r9,zero,2c5ac <__alt_data_end+0xfffec5ac>
   2c5fc:	00bfff84 	movi	r2,-2
   2c600:	f800283a 	ret
   2c604:	39c03fcc 	andi	r7,r7,255
   2c608:	29c00626 	beq	r5,r7,2c624 <__gedf2+0xb0>
   2c60c:	283ff726 	beq	r5,zero,2c5ec <__alt_data_end+0xfffec5ec>
   2c610:	00bfffc4 	movi	r2,-1
   2c614:	f800283a 	ret
   2c618:	2292b03a 	or	r9,r4,r10
   2c61c:	483fe126 	beq	r9,zero,2c5a4 <__alt_data_end+0xfffec5a4>
   2c620:	003ff606 	br	2c5fc <__alt_data_end+0xfffec5fc>
   2c624:	18bff916 	blt	r3,r2,2c60c <__alt_data_end+0xfffec60c>
   2c628:	10c00316 	blt	r2,r3,2c638 <__gedf2+0xc4>
   2c62c:	42bff736 	bltu	r8,r10,2c60c <__alt_data_end+0xfffec60c>
   2c630:	52000326 	beq	r10,r8,2c640 <__gedf2+0xcc>
   2c634:	5200042e 	bgeu	r10,r8,2c648 <__gedf2+0xd4>
   2c638:	283fec1e 	bne	r5,zero,2c5ec <__alt_data_end+0xfffec5ec>
   2c63c:	003ff406 	br	2c610 <__alt_data_end+0xfffec610>
   2c640:	313ff236 	bltu	r6,r4,2c60c <__alt_data_end+0xfffec60c>
   2c644:	21bffc36 	bltu	r4,r6,2c638 <__alt_data_end+0xfffec638>
   2c648:	0005883a 	mov	r2,zero
   2c64c:	f800283a 	ret

0002c650 <__ledf2>:
   2c650:	2804d53a 	srli	r2,r5,20
   2c654:	3810d53a 	srli	r8,r7,20
   2c658:	00c00434 	movhi	r3,16
   2c65c:	18ffffc4 	addi	r3,r3,-1
   2c660:	1081ffcc 	andi	r2,r2,2047
   2c664:	0241ffc4 	movi	r9,2047
   2c668:	28d4703a 	and	r10,r5,r3
   2c66c:	4201ffcc 	andi	r8,r8,2047
   2c670:	38c6703a 	and	r3,r7,r3
   2c674:	280ad7fa 	srli	r5,r5,31
   2c678:	380ed7fa 	srli	r7,r7,31
   2c67c:	12401f26 	beq	r2,r9,2c6fc <__ledf2+0xac>
   2c680:	0241ffc4 	movi	r9,2047
   2c684:	42401426 	beq	r8,r9,2c6d8 <__ledf2+0x88>
   2c688:	1000091e 	bne	r2,zero,2c6b0 <__ledf2+0x60>
   2c68c:	2296b03a 	or	r11,r4,r10
   2c690:	5813003a 	cmpeq	r9,r11,zero
   2c694:	29403fcc 	andi	r5,r5,255
   2c698:	40000a1e 	bne	r8,zero,2c6c4 <__ledf2+0x74>
   2c69c:	30d8b03a 	or	r12,r6,r3
   2c6a0:	6000081e 	bne	r12,zero,2c6c4 <__ledf2+0x74>
   2c6a4:	0005883a 	mov	r2,zero
   2c6a8:	5800111e 	bne	r11,zero,2c6f0 <__ledf2+0xa0>
   2c6ac:	f800283a 	ret
   2c6b0:	29403fcc 	andi	r5,r5,255
   2c6b4:	40000c1e 	bne	r8,zero,2c6e8 <__ledf2+0x98>
   2c6b8:	30d2b03a 	or	r9,r6,r3
   2c6bc:	48000c26 	beq	r9,zero,2c6f0 <__ledf2+0xa0>
   2c6c0:	0013883a 	mov	r9,zero
   2c6c4:	39c03fcc 	andi	r7,r7,255
   2c6c8:	48000826 	beq	r9,zero,2c6ec <__ledf2+0x9c>
   2c6cc:	38001126 	beq	r7,zero,2c714 <__ledf2+0xc4>
   2c6d0:	00800044 	movi	r2,1
   2c6d4:	f800283a 	ret
   2c6d8:	30d2b03a 	or	r9,r6,r3
   2c6dc:	483fea26 	beq	r9,zero,2c688 <__alt_data_end+0xfffec688>
   2c6e0:	00800084 	movi	r2,2
   2c6e4:	f800283a 	ret
   2c6e8:	39c03fcc 	andi	r7,r7,255
   2c6ec:	39400726 	beq	r7,r5,2c70c <__ledf2+0xbc>
   2c6f0:	2800081e 	bne	r5,zero,2c714 <__ledf2+0xc4>
   2c6f4:	00800044 	movi	r2,1
   2c6f8:	f800283a 	ret
   2c6fc:	2292b03a 	or	r9,r4,r10
   2c700:	483fdf26 	beq	r9,zero,2c680 <__alt_data_end+0xfffec680>
   2c704:	00800084 	movi	r2,2
   2c708:	f800283a 	ret
   2c70c:	4080030e 	bge	r8,r2,2c71c <__ledf2+0xcc>
   2c710:	383fef26 	beq	r7,zero,2c6d0 <__alt_data_end+0xfffec6d0>
   2c714:	00bfffc4 	movi	r2,-1
   2c718:	f800283a 	ret
   2c71c:	123feb16 	blt	r2,r8,2c6cc <__alt_data_end+0xfffec6cc>
   2c720:	1abff336 	bltu	r3,r10,2c6f0 <__alt_data_end+0xfffec6f0>
   2c724:	50c00326 	beq	r10,r3,2c734 <__ledf2+0xe4>
   2c728:	50c0042e 	bgeu	r10,r3,2c73c <__ledf2+0xec>
   2c72c:	283fe81e 	bne	r5,zero,2c6d0 <__alt_data_end+0xfffec6d0>
   2c730:	003ff806 	br	2c714 <__alt_data_end+0xfffec714>
   2c734:	313fee36 	bltu	r6,r4,2c6f0 <__alt_data_end+0xfffec6f0>
   2c738:	21bffc36 	bltu	r4,r6,2c72c <__alt_data_end+0xfffec72c>
   2c73c:	0005883a 	mov	r2,zero
   2c740:	f800283a 	ret

0002c744 <__muldf3>:
   2c744:	defff304 	addi	sp,sp,-52
   2c748:	2804d53a 	srli	r2,r5,20
   2c74c:	dd800915 	stw	r22,36(sp)
   2c750:	282cd7fa 	srli	r22,r5,31
   2c754:	dc000315 	stw	r16,12(sp)
   2c758:	04000434 	movhi	r16,16
   2c75c:	dd400815 	stw	r21,32(sp)
   2c760:	dc800515 	stw	r18,20(sp)
   2c764:	843fffc4 	addi	r16,r16,-1
   2c768:	dfc00c15 	stw	ra,48(sp)
   2c76c:	df000b15 	stw	fp,44(sp)
   2c770:	ddc00a15 	stw	r23,40(sp)
   2c774:	dd000715 	stw	r20,28(sp)
   2c778:	dcc00615 	stw	r19,24(sp)
   2c77c:	dc400415 	stw	r17,16(sp)
   2c780:	1481ffcc 	andi	r18,r2,2047
   2c784:	2c20703a 	and	r16,r5,r16
   2c788:	b02b883a 	mov	r21,r22
   2c78c:	b2403fcc 	andi	r9,r22,255
   2c790:	90006026 	beq	r18,zero,2c914 <__muldf3+0x1d0>
   2c794:	0081ffc4 	movi	r2,2047
   2c798:	2029883a 	mov	r20,r4
   2c79c:	90803626 	beq	r18,r2,2c878 <__muldf3+0x134>
   2c7a0:	80800434 	orhi	r2,r16,16
   2c7a4:	100490fa 	slli	r2,r2,3
   2c7a8:	2020d77a 	srli	r16,r4,29
   2c7ac:	202890fa 	slli	r20,r4,3
   2c7b0:	94bf0044 	addi	r18,r18,-1023
   2c7b4:	80a0b03a 	or	r16,r16,r2
   2c7b8:	0027883a 	mov	r19,zero
   2c7bc:	0039883a 	mov	fp,zero
   2c7c0:	3804d53a 	srli	r2,r7,20
   2c7c4:	382ed7fa 	srli	r23,r7,31
   2c7c8:	04400434 	movhi	r17,16
   2c7cc:	8c7fffc4 	addi	r17,r17,-1
   2c7d0:	1081ffcc 	andi	r2,r2,2047
   2c7d4:	3011883a 	mov	r8,r6
   2c7d8:	3c62703a 	and	r17,r7,r17
   2c7dc:	ba803fcc 	andi	r10,r23,255
   2c7e0:	10006d26 	beq	r2,zero,2c998 <__muldf3+0x254>
   2c7e4:	00c1ffc4 	movi	r3,2047
   2c7e8:	10c06526 	beq	r2,r3,2c980 <__muldf3+0x23c>
   2c7ec:	88c00434 	orhi	r3,r17,16
   2c7f0:	180690fa 	slli	r3,r3,3
   2c7f4:	3022d77a 	srli	r17,r6,29
   2c7f8:	301090fa 	slli	r8,r6,3
   2c7fc:	10bf0044 	addi	r2,r2,-1023
   2c800:	88e2b03a 	or	r17,r17,r3
   2c804:	000b883a 	mov	r5,zero
   2c808:	9085883a 	add	r2,r18,r2
   2c80c:	2cc8b03a 	or	r4,r5,r19
   2c810:	00c003c4 	movi	r3,15
   2c814:	bdacf03a 	xor	r22,r23,r22
   2c818:	12c00044 	addi	r11,r2,1
   2c81c:	19009936 	bltu	r3,r4,2ca84 <__muldf3+0x340>
   2c820:	200890ba 	slli	r4,r4,2
   2c824:	00c000f4 	movhi	r3,3
   2c828:	18f20e04 	addi	r3,r3,-14280
   2c82c:	20c9883a 	add	r4,r4,r3
   2c830:	20c00017 	ldw	r3,0(r4)
   2c834:	1800683a 	jmp	r3
   2c838:	0002ca84 	movi	zero,2858
   2c83c:	0002c898 	cmpnei	zero,zero,2850
   2c840:	0002c898 	cmpnei	zero,zero,2850
   2c844:	0002c894 	movui	zero,2850
   2c848:	0002ca60 	cmpeqi	zero,zero,2857
   2c84c:	0002ca60 	cmpeqi	zero,zero,2857
   2c850:	0002ca48 	cmpgei	zero,zero,2857
   2c854:	0002c894 	movui	zero,2850
   2c858:	0002ca60 	cmpeqi	zero,zero,2857
   2c85c:	0002ca48 	cmpgei	zero,zero,2857
   2c860:	0002ca60 	cmpeqi	zero,zero,2857
   2c864:	0002c894 	movui	zero,2850
   2c868:	0002ca70 	cmpltui	zero,zero,2857
   2c86c:	0002ca70 	cmpltui	zero,zero,2857
   2c870:	0002ca70 	cmpltui	zero,zero,2857
   2c874:	0002cc8c 	andi	zero,zero,2866
   2c878:	2404b03a 	or	r2,r4,r16
   2c87c:	10006f1e 	bne	r2,zero,2ca3c <__muldf3+0x2f8>
   2c880:	04c00204 	movi	r19,8
   2c884:	0021883a 	mov	r16,zero
   2c888:	0029883a 	mov	r20,zero
   2c88c:	07000084 	movi	fp,2
   2c890:	003fcb06 	br	2c7c0 <__alt_data_end+0xfffec7c0>
   2c894:	502d883a 	mov	r22,r10
   2c898:	00800084 	movi	r2,2
   2c89c:	28805726 	beq	r5,r2,2c9fc <__muldf3+0x2b8>
   2c8a0:	008000c4 	movi	r2,3
   2c8a4:	28816626 	beq	r5,r2,2ce40 <__muldf3+0x6fc>
   2c8a8:	00800044 	movi	r2,1
   2c8ac:	2881411e 	bne	r5,r2,2cdb4 <__muldf3+0x670>
   2c8b0:	b02b883a 	mov	r21,r22
   2c8b4:	0005883a 	mov	r2,zero
   2c8b8:	000b883a 	mov	r5,zero
   2c8bc:	0029883a 	mov	r20,zero
   2c8c0:	1004953a 	slli	r2,r2,20
   2c8c4:	a8c03fcc 	andi	r3,r21,255
   2c8c8:	04400434 	movhi	r17,16
   2c8cc:	8c7fffc4 	addi	r17,r17,-1
   2c8d0:	180697fa 	slli	r3,r3,31
   2c8d4:	2c4a703a 	and	r5,r5,r17
   2c8d8:	288ab03a 	or	r5,r5,r2
   2c8dc:	28c6b03a 	or	r3,r5,r3
   2c8e0:	a005883a 	mov	r2,r20
   2c8e4:	dfc00c17 	ldw	ra,48(sp)
   2c8e8:	df000b17 	ldw	fp,44(sp)
   2c8ec:	ddc00a17 	ldw	r23,40(sp)
   2c8f0:	dd800917 	ldw	r22,36(sp)
   2c8f4:	dd400817 	ldw	r21,32(sp)
   2c8f8:	dd000717 	ldw	r20,28(sp)
   2c8fc:	dcc00617 	ldw	r19,24(sp)
   2c900:	dc800517 	ldw	r18,20(sp)
   2c904:	dc400417 	ldw	r17,16(sp)
   2c908:	dc000317 	ldw	r16,12(sp)
   2c90c:	dec00d04 	addi	sp,sp,52
   2c910:	f800283a 	ret
   2c914:	2404b03a 	or	r2,r4,r16
   2c918:	2027883a 	mov	r19,r4
   2c91c:	10004226 	beq	r2,zero,2ca28 <__muldf3+0x2e4>
   2c920:	8000fc26 	beq	r16,zero,2cd14 <__muldf3+0x5d0>
   2c924:	8009883a 	mov	r4,r16
   2c928:	d9800215 	stw	r6,8(sp)
   2c92c:	d9c00015 	stw	r7,0(sp)
   2c930:	da400115 	stw	r9,4(sp)
   2c934:	002d95c0 	call	2d95c <__clzsi2>
   2c938:	d9800217 	ldw	r6,8(sp)
   2c93c:	d9c00017 	ldw	r7,0(sp)
   2c940:	da400117 	ldw	r9,4(sp)
   2c944:	113ffd44 	addi	r4,r2,-11
   2c948:	00c00704 	movi	r3,28
   2c94c:	1900ed16 	blt	r3,r4,2cd04 <__muldf3+0x5c0>
   2c950:	00c00744 	movi	r3,29
   2c954:	147ffe04 	addi	r17,r2,-8
   2c958:	1907c83a 	sub	r3,r3,r4
   2c95c:	8460983a 	sll	r16,r16,r17
   2c960:	98c6d83a 	srl	r3,r19,r3
   2c964:	9c68983a 	sll	r20,r19,r17
   2c968:	1c20b03a 	or	r16,r3,r16
   2c96c:	1080fcc4 	addi	r2,r2,1011
   2c970:	00a5c83a 	sub	r18,zero,r2
   2c974:	0027883a 	mov	r19,zero
   2c978:	0039883a 	mov	fp,zero
   2c97c:	003f9006 	br	2c7c0 <__alt_data_end+0xfffec7c0>
   2c980:	3446b03a 	or	r3,r6,r17
   2c984:	1800261e 	bne	r3,zero,2ca20 <__muldf3+0x2dc>
   2c988:	0023883a 	mov	r17,zero
   2c98c:	0011883a 	mov	r8,zero
   2c990:	01400084 	movi	r5,2
   2c994:	003f9c06 	br	2c808 <__alt_data_end+0xfffec808>
   2c998:	3446b03a 	or	r3,r6,r17
   2c99c:	18001c26 	beq	r3,zero,2ca10 <__muldf3+0x2cc>
   2c9a0:	8800ce26 	beq	r17,zero,2ccdc <__muldf3+0x598>
   2c9a4:	8809883a 	mov	r4,r17
   2c9a8:	d9800215 	stw	r6,8(sp)
   2c9ac:	da400115 	stw	r9,4(sp)
   2c9b0:	da800015 	stw	r10,0(sp)
   2c9b4:	002d95c0 	call	2d95c <__clzsi2>
   2c9b8:	d9800217 	ldw	r6,8(sp)
   2c9bc:	da400117 	ldw	r9,4(sp)
   2c9c0:	da800017 	ldw	r10,0(sp)
   2c9c4:	113ffd44 	addi	r4,r2,-11
   2c9c8:	00c00704 	movi	r3,28
   2c9cc:	1900bf16 	blt	r3,r4,2cccc <__muldf3+0x588>
   2c9d0:	00c00744 	movi	r3,29
   2c9d4:	123ffe04 	addi	r8,r2,-8
   2c9d8:	1907c83a 	sub	r3,r3,r4
   2c9dc:	8a22983a 	sll	r17,r17,r8
   2c9e0:	30c6d83a 	srl	r3,r6,r3
   2c9e4:	3210983a 	sll	r8,r6,r8
   2c9e8:	1c62b03a 	or	r17,r3,r17
   2c9ec:	1080fcc4 	addi	r2,r2,1011
   2c9f0:	0085c83a 	sub	r2,zero,r2
   2c9f4:	000b883a 	mov	r5,zero
   2c9f8:	003f8306 	br	2c808 <__alt_data_end+0xfffec808>
   2c9fc:	b02b883a 	mov	r21,r22
   2ca00:	0081ffc4 	movi	r2,2047
   2ca04:	000b883a 	mov	r5,zero
   2ca08:	0029883a 	mov	r20,zero
   2ca0c:	003fac06 	br	2c8c0 <__alt_data_end+0xfffec8c0>
   2ca10:	0023883a 	mov	r17,zero
   2ca14:	0011883a 	mov	r8,zero
   2ca18:	01400044 	movi	r5,1
   2ca1c:	003f7a06 	br	2c808 <__alt_data_end+0xfffec808>
   2ca20:	014000c4 	movi	r5,3
   2ca24:	003f7806 	br	2c808 <__alt_data_end+0xfffec808>
   2ca28:	04c00104 	movi	r19,4
   2ca2c:	0021883a 	mov	r16,zero
   2ca30:	0029883a 	mov	r20,zero
   2ca34:	07000044 	movi	fp,1
   2ca38:	003f6106 	br	2c7c0 <__alt_data_end+0xfffec7c0>
   2ca3c:	04c00304 	movi	r19,12
   2ca40:	070000c4 	movi	fp,3
   2ca44:	003f5e06 	br	2c7c0 <__alt_data_end+0xfffec7c0>
   2ca48:	01400434 	movhi	r5,16
   2ca4c:	002b883a 	mov	r21,zero
   2ca50:	297fffc4 	addi	r5,r5,-1
   2ca54:	053fffc4 	movi	r20,-1
   2ca58:	0081ffc4 	movi	r2,2047
   2ca5c:	003f9806 	br	2c8c0 <__alt_data_end+0xfffec8c0>
   2ca60:	8023883a 	mov	r17,r16
   2ca64:	a011883a 	mov	r8,r20
   2ca68:	e00b883a 	mov	r5,fp
   2ca6c:	003f8a06 	br	2c898 <__alt_data_end+0xfffec898>
   2ca70:	8023883a 	mov	r17,r16
   2ca74:	a011883a 	mov	r8,r20
   2ca78:	482d883a 	mov	r22,r9
   2ca7c:	e00b883a 	mov	r5,fp
   2ca80:	003f8506 	br	2c898 <__alt_data_end+0xfffec898>
   2ca84:	a00ad43a 	srli	r5,r20,16
   2ca88:	401ad43a 	srli	r13,r8,16
   2ca8c:	a53fffcc 	andi	r20,r20,65535
   2ca90:	423fffcc 	andi	r8,r8,65535
   2ca94:	4519383a 	mul	r12,r8,r20
   2ca98:	4147383a 	mul	r3,r8,r5
   2ca9c:	6d09383a 	mul	r4,r13,r20
   2caa0:	600cd43a 	srli	r6,r12,16
   2caa4:	2b5d383a 	mul	r14,r5,r13
   2caa8:	20c9883a 	add	r4,r4,r3
   2caac:	310d883a 	add	r6,r6,r4
   2cab0:	30c0022e 	bgeu	r6,r3,2cabc <__muldf3+0x378>
   2cab4:	00c00074 	movhi	r3,1
   2cab8:	70dd883a 	add	r14,r14,r3
   2cabc:	8826d43a 	srli	r19,r17,16
   2cac0:	8bffffcc 	andi	r15,r17,65535
   2cac4:	7d23383a 	mul	r17,r15,r20
   2cac8:	7949383a 	mul	r4,r15,r5
   2cacc:	9d29383a 	mul	r20,r19,r20
   2cad0:	8814d43a 	srli	r10,r17,16
   2cad4:	3012943a 	slli	r9,r6,16
   2cad8:	a129883a 	add	r20,r20,r4
   2cadc:	633fffcc 	andi	r12,r12,65535
   2cae0:	5515883a 	add	r10,r10,r20
   2cae4:	3006d43a 	srli	r3,r6,16
   2cae8:	4b13883a 	add	r9,r9,r12
   2caec:	2ccb383a 	mul	r5,r5,r19
   2caf0:	5100022e 	bgeu	r10,r4,2cafc <__muldf3+0x3b8>
   2caf4:	01000074 	movhi	r4,1
   2caf8:	290b883a 	add	r5,r5,r4
   2cafc:	802ad43a 	srli	r21,r16,16
   2cb00:	843fffcc 	andi	r16,r16,65535
   2cb04:	440d383a 	mul	r6,r8,r16
   2cb08:	4565383a 	mul	r18,r8,r21
   2cb0c:	8349383a 	mul	r4,r16,r13
   2cb10:	500e943a 	slli	r7,r10,16
   2cb14:	3010d43a 	srli	r8,r6,16
   2cb18:	5028d43a 	srli	r20,r10,16
   2cb1c:	2489883a 	add	r4,r4,r18
   2cb20:	8abfffcc 	andi	r10,r17,65535
   2cb24:	3a95883a 	add	r10,r7,r10
   2cb28:	4119883a 	add	r12,r8,r4
   2cb2c:	a169883a 	add	r20,r20,r5
   2cb30:	1a87883a 	add	r3,r3,r10
   2cb34:	6d5b383a 	mul	r13,r13,r21
   2cb38:	6480022e 	bgeu	r12,r18,2cb44 <__muldf3+0x400>
   2cb3c:	01000074 	movhi	r4,1
   2cb40:	691b883a 	add	r13,r13,r4
   2cb44:	7c25383a 	mul	r18,r15,r16
   2cb48:	7d4b383a 	mul	r5,r15,r21
   2cb4c:	84cf383a 	mul	r7,r16,r19
   2cb50:	901ed43a 	srli	r15,r18,16
   2cb54:	6008d43a 	srli	r4,r12,16
   2cb58:	6010943a 	slli	r8,r12,16
   2cb5c:	394f883a 	add	r7,r7,r5
   2cb60:	333fffcc 	andi	r12,r6,65535
   2cb64:	79df883a 	add	r15,r15,r7
   2cb68:	235b883a 	add	r13,r4,r13
   2cb6c:	9d63383a 	mul	r17,r19,r21
   2cb70:	4309883a 	add	r4,r8,r12
   2cb74:	7940022e 	bgeu	r15,r5,2cb80 <__muldf3+0x43c>
   2cb78:	01400074 	movhi	r5,1
   2cb7c:	8963883a 	add	r17,r17,r5
   2cb80:	780a943a 	slli	r5,r15,16
   2cb84:	91bfffcc 	andi	r6,r18,65535
   2cb88:	70c7883a 	add	r3,r14,r3
   2cb8c:	298d883a 	add	r6,r5,r6
   2cb90:	1a8f803a 	cmpltu	r7,r3,r10
   2cb94:	350b883a 	add	r5,r6,r20
   2cb98:	20c7883a 	add	r3,r4,r3
   2cb9c:	3955883a 	add	r10,r7,r5
   2cba0:	1909803a 	cmpltu	r4,r3,r4
   2cba4:	6a91883a 	add	r8,r13,r10
   2cba8:	780cd43a 	srli	r6,r15,16
   2cbac:	2219883a 	add	r12,r4,r8
   2cbb0:	2d0b803a 	cmpltu	r5,r5,r20
   2cbb4:	51cf803a 	cmpltu	r7,r10,r7
   2cbb8:	29ceb03a 	or	r7,r5,r7
   2cbbc:	4351803a 	cmpltu	r8,r8,r13
   2cbc0:	610b803a 	cmpltu	r5,r12,r4
   2cbc4:	4148b03a 	or	r4,r8,r5
   2cbc8:	398f883a 	add	r7,r7,r6
   2cbcc:	3909883a 	add	r4,r7,r4
   2cbd0:	1810927a 	slli	r8,r3,9
   2cbd4:	2449883a 	add	r4,r4,r17
   2cbd8:	2008927a 	slli	r4,r4,9
   2cbdc:	6022d5fa 	srli	r17,r12,23
   2cbe0:	1806d5fa 	srli	r3,r3,23
   2cbe4:	4252b03a 	or	r9,r8,r9
   2cbe8:	600a927a 	slli	r5,r12,9
   2cbec:	4810c03a 	cmpne	r8,r9,zero
   2cbf0:	2462b03a 	or	r17,r4,r17
   2cbf4:	40c6b03a 	or	r3,r8,r3
   2cbf8:	8900402c 	andhi	r4,r17,256
   2cbfc:	1950b03a 	or	r8,r3,r5
   2cc00:	20000726 	beq	r4,zero,2cc20 <__muldf3+0x4dc>
   2cc04:	4006d07a 	srli	r3,r8,1
   2cc08:	880497fa 	slli	r2,r17,31
   2cc0c:	4200004c 	andi	r8,r8,1
   2cc10:	8822d07a 	srli	r17,r17,1
   2cc14:	1a10b03a 	or	r8,r3,r8
   2cc18:	1210b03a 	or	r8,r2,r8
   2cc1c:	5805883a 	mov	r2,r11
   2cc20:	1140ffc4 	addi	r5,r2,1023
   2cc24:	0140440e 	bge	zero,r5,2cd38 <__muldf3+0x5f4>
   2cc28:	40c001cc 	andi	r3,r8,7
   2cc2c:	18000726 	beq	r3,zero,2cc4c <__muldf3+0x508>
   2cc30:	40c003cc 	andi	r3,r8,15
   2cc34:	01000104 	movi	r4,4
   2cc38:	19000426 	beq	r3,r4,2cc4c <__muldf3+0x508>
   2cc3c:	4107883a 	add	r3,r8,r4
   2cc40:	1a11803a 	cmpltu	r8,r3,r8
   2cc44:	8a23883a 	add	r17,r17,r8
   2cc48:	1811883a 	mov	r8,r3
   2cc4c:	88c0402c 	andhi	r3,r17,256
   2cc50:	18000426 	beq	r3,zero,2cc64 <__muldf3+0x520>
   2cc54:	11410004 	addi	r5,r2,1024
   2cc58:	00bfc034 	movhi	r2,65280
   2cc5c:	10bfffc4 	addi	r2,r2,-1
   2cc60:	88a2703a 	and	r17,r17,r2
   2cc64:	0081ff84 	movi	r2,2046
   2cc68:	117f6416 	blt	r2,r5,2c9fc <__alt_data_end+0xfffec9fc>
   2cc6c:	8828977a 	slli	r20,r17,29
   2cc70:	4010d0fa 	srli	r8,r8,3
   2cc74:	8822927a 	slli	r17,r17,9
   2cc78:	2881ffcc 	andi	r2,r5,2047
   2cc7c:	a228b03a 	or	r20,r20,r8
   2cc80:	880ad33a 	srli	r5,r17,12
   2cc84:	b02b883a 	mov	r21,r22
   2cc88:	003f0d06 	br	2c8c0 <__alt_data_end+0xfffec8c0>
   2cc8c:	8080022c 	andhi	r2,r16,8
   2cc90:	10000926 	beq	r2,zero,2ccb8 <__muldf3+0x574>
   2cc94:	8880022c 	andhi	r2,r17,8
   2cc98:	1000071e 	bne	r2,zero,2ccb8 <__muldf3+0x574>
   2cc9c:	00800434 	movhi	r2,16
   2cca0:	89400234 	orhi	r5,r17,8
   2cca4:	10bfffc4 	addi	r2,r2,-1
   2cca8:	b82b883a 	mov	r21,r23
   2ccac:	288a703a 	and	r5,r5,r2
   2ccb0:	4029883a 	mov	r20,r8
   2ccb4:	003f6806 	br	2ca58 <__alt_data_end+0xfffeca58>
   2ccb8:	00800434 	movhi	r2,16
   2ccbc:	81400234 	orhi	r5,r16,8
   2ccc0:	10bfffc4 	addi	r2,r2,-1
   2ccc4:	288a703a 	and	r5,r5,r2
   2ccc8:	003f6306 	br	2ca58 <__alt_data_end+0xfffeca58>
   2cccc:	147ff604 	addi	r17,r2,-40
   2ccd0:	3462983a 	sll	r17,r6,r17
   2ccd4:	0011883a 	mov	r8,zero
   2ccd8:	003f4406 	br	2c9ec <__alt_data_end+0xfffec9ec>
   2ccdc:	3009883a 	mov	r4,r6
   2cce0:	d9800215 	stw	r6,8(sp)
   2cce4:	da400115 	stw	r9,4(sp)
   2cce8:	da800015 	stw	r10,0(sp)
   2ccec:	002d95c0 	call	2d95c <__clzsi2>
   2ccf0:	10800804 	addi	r2,r2,32
   2ccf4:	da800017 	ldw	r10,0(sp)
   2ccf8:	da400117 	ldw	r9,4(sp)
   2ccfc:	d9800217 	ldw	r6,8(sp)
   2cd00:	003f3006 	br	2c9c4 <__alt_data_end+0xfffec9c4>
   2cd04:	143ff604 	addi	r16,r2,-40
   2cd08:	9c20983a 	sll	r16,r19,r16
   2cd0c:	0029883a 	mov	r20,zero
   2cd10:	003f1606 	br	2c96c <__alt_data_end+0xfffec96c>
   2cd14:	d9800215 	stw	r6,8(sp)
   2cd18:	d9c00015 	stw	r7,0(sp)
   2cd1c:	da400115 	stw	r9,4(sp)
   2cd20:	002d95c0 	call	2d95c <__clzsi2>
   2cd24:	10800804 	addi	r2,r2,32
   2cd28:	da400117 	ldw	r9,4(sp)
   2cd2c:	d9c00017 	ldw	r7,0(sp)
   2cd30:	d9800217 	ldw	r6,8(sp)
   2cd34:	003f0306 	br	2c944 <__alt_data_end+0xfffec944>
   2cd38:	00c00044 	movi	r3,1
   2cd3c:	1947c83a 	sub	r3,r3,r5
   2cd40:	00800e04 	movi	r2,56
   2cd44:	10feda16 	blt	r2,r3,2c8b0 <__alt_data_end+0xfffec8b0>
   2cd48:	008007c4 	movi	r2,31
   2cd4c:	10c01b16 	blt	r2,r3,2cdbc <__muldf3+0x678>
   2cd50:	00800804 	movi	r2,32
   2cd54:	10c5c83a 	sub	r2,r2,r3
   2cd58:	888a983a 	sll	r5,r17,r2
   2cd5c:	40c8d83a 	srl	r4,r8,r3
   2cd60:	4084983a 	sll	r2,r8,r2
   2cd64:	88e2d83a 	srl	r17,r17,r3
   2cd68:	2906b03a 	or	r3,r5,r4
   2cd6c:	1004c03a 	cmpne	r2,r2,zero
   2cd70:	1886b03a 	or	r3,r3,r2
   2cd74:	188001cc 	andi	r2,r3,7
   2cd78:	10000726 	beq	r2,zero,2cd98 <__muldf3+0x654>
   2cd7c:	188003cc 	andi	r2,r3,15
   2cd80:	01000104 	movi	r4,4
   2cd84:	11000426 	beq	r2,r4,2cd98 <__muldf3+0x654>
   2cd88:	1805883a 	mov	r2,r3
   2cd8c:	10c00104 	addi	r3,r2,4
   2cd90:	1885803a 	cmpltu	r2,r3,r2
   2cd94:	88a3883a 	add	r17,r17,r2
   2cd98:	8880202c 	andhi	r2,r17,128
   2cd9c:	10001c26 	beq	r2,zero,2ce10 <__muldf3+0x6cc>
   2cda0:	b02b883a 	mov	r21,r22
   2cda4:	00800044 	movi	r2,1
   2cda8:	000b883a 	mov	r5,zero
   2cdac:	0029883a 	mov	r20,zero
   2cdb0:	003ec306 	br	2c8c0 <__alt_data_end+0xfffec8c0>
   2cdb4:	5805883a 	mov	r2,r11
   2cdb8:	003f9906 	br	2cc20 <__alt_data_end+0xfffecc20>
   2cdbc:	00bff844 	movi	r2,-31
   2cdc0:	1145c83a 	sub	r2,r2,r5
   2cdc4:	8888d83a 	srl	r4,r17,r2
   2cdc8:	00800804 	movi	r2,32
   2cdcc:	18801a26 	beq	r3,r2,2ce38 <__muldf3+0x6f4>
   2cdd0:	00801004 	movi	r2,64
   2cdd4:	10c5c83a 	sub	r2,r2,r3
   2cdd8:	8884983a 	sll	r2,r17,r2
   2cddc:	1204b03a 	or	r2,r2,r8
   2cde0:	1004c03a 	cmpne	r2,r2,zero
   2cde4:	2084b03a 	or	r2,r4,r2
   2cde8:	144001cc 	andi	r17,r2,7
   2cdec:	88000d1e 	bne	r17,zero,2ce24 <__muldf3+0x6e0>
   2cdf0:	000b883a 	mov	r5,zero
   2cdf4:	1028d0fa 	srli	r20,r2,3
   2cdf8:	b02b883a 	mov	r21,r22
   2cdfc:	0005883a 	mov	r2,zero
   2ce00:	a468b03a 	or	r20,r20,r17
   2ce04:	003eae06 	br	2c8c0 <__alt_data_end+0xfffec8c0>
   2ce08:	1007883a 	mov	r3,r2
   2ce0c:	0023883a 	mov	r17,zero
   2ce10:	880a927a 	slli	r5,r17,9
   2ce14:	1805883a 	mov	r2,r3
   2ce18:	8822977a 	slli	r17,r17,29
   2ce1c:	280ad33a 	srli	r5,r5,12
   2ce20:	003ff406 	br	2cdf4 <__alt_data_end+0xfffecdf4>
   2ce24:	10c003cc 	andi	r3,r2,15
   2ce28:	01000104 	movi	r4,4
   2ce2c:	193ff626 	beq	r3,r4,2ce08 <__alt_data_end+0xfffece08>
   2ce30:	0023883a 	mov	r17,zero
   2ce34:	003fd506 	br	2cd8c <__alt_data_end+0xfffecd8c>
   2ce38:	0005883a 	mov	r2,zero
   2ce3c:	003fe706 	br	2cddc <__alt_data_end+0xfffecddc>
   2ce40:	00800434 	movhi	r2,16
   2ce44:	89400234 	orhi	r5,r17,8
   2ce48:	10bfffc4 	addi	r2,r2,-1
   2ce4c:	b02b883a 	mov	r21,r22
   2ce50:	288a703a 	and	r5,r5,r2
   2ce54:	4029883a 	mov	r20,r8
   2ce58:	003eff06 	br	2ca58 <__alt_data_end+0xfffeca58>

0002ce5c <__subdf3>:
   2ce5c:	02000434 	movhi	r8,16
   2ce60:	423fffc4 	addi	r8,r8,-1
   2ce64:	defffb04 	addi	sp,sp,-20
   2ce68:	2a14703a 	and	r10,r5,r8
   2ce6c:	3812d53a 	srli	r9,r7,20
   2ce70:	3a10703a 	and	r8,r7,r8
   2ce74:	2006d77a 	srli	r3,r4,29
   2ce78:	3004d77a 	srli	r2,r6,29
   2ce7c:	dc000015 	stw	r16,0(sp)
   2ce80:	501490fa 	slli	r10,r10,3
   2ce84:	2820d53a 	srli	r16,r5,20
   2ce88:	401090fa 	slli	r8,r8,3
   2ce8c:	dc800215 	stw	r18,8(sp)
   2ce90:	dc400115 	stw	r17,4(sp)
   2ce94:	dfc00415 	stw	ra,16(sp)
   2ce98:	202290fa 	slli	r17,r4,3
   2ce9c:	dcc00315 	stw	r19,12(sp)
   2cea0:	4a41ffcc 	andi	r9,r9,2047
   2cea4:	0101ffc4 	movi	r4,2047
   2cea8:	2824d7fa 	srli	r18,r5,31
   2ceac:	8401ffcc 	andi	r16,r16,2047
   2ceb0:	50c6b03a 	or	r3,r10,r3
   2ceb4:	380ed7fa 	srli	r7,r7,31
   2ceb8:	408ab03a 	or	r5,r8,r2
   2cebc:	300c90fa 	slli	r6,r6,3
   2cec0:	49009626 	beq	r9,r4,2d11c <__subdf3+0x2c0>
   2cec4:	39c0005c 	xori	r7,r7,1
   2cec8:	8245c83a 	sub	r2,r16,r9
   2cecc:	3c807426 	beq	r7,r18,2d0a0 <__subdf3+0x244>
   2ced0:	0080af0e 	bge	zero,r2,2d190 <__subdf3+0x334>
   2ced4:	48002a1e 	bne	r9,zero,2cf80 <__subdf3+0x124>
   2ced8:	2988b03a 	or	r4,r5,r6
   2cedc:	20009a1e 	bne	r4,zero,2d148 <__subdf3+0x2ec>
   2cee0:	888001cc 	andi	r2,r17,7
   2cee4:	10000726 	beq	r2,zero,2cf04 <__subdf3+0xa8>
   2cee8:	888003cc 	andi	r2,r17,15
   2ceec:	01000104 	movi	r4,4
   2cef0:	11000426 	beq	r2,r4,2cf04 <__subdf3+0xa8>
   2cef4:	890b883a 	add	r5,r17,r4
   2cef8:	2c63803a 	cmpltu	r17,r5,r17
   2cefc:	1c47883a 	add	r3,r3,r17
   2cf00:	2823883a 	mov	r17,r5
   2cf04:	1880202c 	andhi	r2,r3,128
   2cf08:	10005926 	beq	r2,zero,2d070 <__subdf3+0x214>
   2cf0c:	84000044 	addi	r16,r16,1
   2cf10:	0081ffc4 	movi	r2,2047
   2cf14:	8080be26 	beq	r16,r2,2d210 <__subdf3+0x3b4>
   2cf18:	017fe034 	movhi	r5,65408
   2cf1c:	297fffc4 	addi	r5,r5,-1
   2cf20:	1946703a 	and	r3,r3,r5
   2cf24:	1804977a 	slli	r2,r3,29
   2cf28:	1806927a 	slli	r3,r3,9
   2cf2c:	8822d0fa 	srli	r17,r17,3
   2cf30:	8401ffcc 	andi	r16,r16,2047
   2cf34:	180ad33a 	srli	r5,r3,12
   2cf38:	9100004c 	andi	r4,r18,1
   2cf3c:	1444b03a 	or	r2,r2,r17
   2cf40:	80c1ffcc 	andi	r3,r16,2047
   2cf44:	1820953a 	slli	r16,r3,20
   2cf48:	20c03fcc 	andi	r3,r4,255
   2cf4c:	180897fa 	slli	r4,r3,31
   2cf50:	00c00434 	movhi	r3,16
   2cf54:	18ffffc4 	addi	r3,r3,-1
   2cf58:	28c6703a 	and	r3,r5,r3
   2cf5c:	1c06b03a 	or	r3,r3,r16
   2cf60:	1906b03a 	or	r3,r3,r4
   2cf64:	dfc00417 	ldw	ra,16(sp)
   2cf68:	dcc00317 	ldw	r19,12(sp)
   2cf6c:	dc800217 	ldw	r18,8(sp)
   2cf70:	dc400117 	ldw	r17,4(sp)
   2cf74:	dc000017 	ldw	r16,0(sp)
   2cf78:	dec00504 	addi	sp,sp,20
   2cf7c:	f800283a 	ret
   2cf80:	0101ffc4 	movi	r4,2047
   2cf84:	813fd626 	beq	r16,r4,2cee0 <__alt_data_end+0xfffecee0>
   2cf88:	29402034 	orhi	r5,r5,128
   2cf8c:	01000e04 	movi	r4,56
   2cf90:	2080a316 	blt	r4,r2,2d220 <__subdf3+0x3c4>
   2cf94:	010007c4 	movi	r4,31
   2cf98:	2080c616 	blt	r4,r2,2d2b4 <__subdf3+0x458>
   2cf9c:	01000804 	movi	r4,32
   2cfa0:	2089c83a 	sub	r4,r4,r2
   2cfa4:	2910983a 	sll	r8,r5,r4
   2cfa8:	308ed83a 	srl	r7,r6,r2
   2cfac:	3108983a 	sll	r4,r6,r4
   2cfb0:	2884d83a 	srl	r2,r5,r2
   2cfb4:	41ccb03a 	or	r6,r8,r7
   2cfb8:	2008c03a 	cmpne	r4,r4,zero
   2cfbc:	310cb03a 	or	r6,r6,r4
   2cfc0:	898dc83a 	sub	r6,r17,r6
   2cfc4:	89a3803a 	cmpltu	r17,r17,r6
   2cfc8:	1887c83a 	sub	r3,r3,r2
   2cfcc:	1c47c83a 	sub	r3,r3,r17
   2cfd0:	3023883a 	mov	r17,r6
   2cfd4:	1880202c 	andhi	r2,r3,128
   2cfd8:	10002326 	beq	r2,zero,2d068 <__subdf3+0x20c>
   2cfdc:	04c02034 	movhi	r19,128
   2cfe0:	9cffffc4 	addi	r19,r19,-1
   2cfe4:	1ce6703a 	and	r19,r3,r19
   2cfe8:	98007a26 	beq	r19,zero,2d1d4 <__subdf3+0x378>
   2cfec:	9809883a 	mov	r4,r19
   2cff0:	002d95c0 	call	2d95c <__clzsi2>
   2cff4:	113ffe04 	addi	r4,r2,-8
   2cff8:	00c007c4 	movi	r3,31
   2cffc:	19007b16 	blt	r3,r4,2d1ec <__subdf3+0x390>
   2d000:	00800804 	movi	r2,32
   2d004:	1105c83a 	sub	r2,r2,r4
   2d008:	8884d83a 	srl	r2,r17,r2
   2d00c:	9906983a 	sll	r3,r19,r4
   2d010:	8922983a 	sll	r17,r17,r4
   2d014:	10c4b03a 	or	r2,r2,r3
   2d018:	24007816 	blt	r4,r16,2d1fc <__subdf3+0x3a0>
   2d01c:	2421c83a 	sub	r16,r4,r16
   2d020:	80c00044 	addi	r3,r16,1
   2d024:	010007c4 	movi	r4,31
   2d028:	20c09516 	blt	r4,r3,2d280 <__subdf3+0x424>
   2d02c:	01400804 	movi	r5,32
   2d030:	28cbc83a 	sub	r5,r5,r3
   2d034:	88c8d83a 	srl	r4,r17,r3
   2d038:	8962983a 	sll	r17,r17,r5
   2d03c:	114a983a 	sll	r5,r2,r5
   2d040:	10c6d83a 	srl	r3,r2,r3
   2d044:	8804c03a 	cmpne	r2,r17,zero
   2d048:	290ab03a 	or	r5,r5,r4
   2d04c:	28a2b03a 	or	r17,r5,r2
   2d050:	0021883a 	mov	r16,zero
   2d054:	003fa206 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d058:	2090b03a 	or	r8,r4,r2
   2d05c:	40018e26 	beq	r8,zero,2d698 <__subdf3+0x83c>
   2d060:	1007883a 	mov	r3,r2
   2d064:	2023883a 	mov	r17,r4
   2d068:	888001cc 	andi	r2,r17,7
   2d06c:	103f9e1e 	bne	r2,zero,2cee8 <__alt_data_end+0xfffecee8>
   2d070:	1804977a 	slli	r2,r3,29
   2d074:	8822d0fa 	srli	r17,r17,3
   2d078:	1810d0fa 	srli	r8,r3,3
   2d07c:	9100004c 	andi	r4,r18,1
   2d080:	1444b03a 	or	r2,r2,r17
   2d084:	00c1ffc4 	movi	r3,2047
   2d088:	80c02826 	beq	r16,r3,2d12c <__subdf3+0x2d0>
   2d08c:	01400434 	movhi	r5,16
   2d090:	297fffc4 	addi	r5,r5,-1
   2d094:	80e0703a 	and	r16,r16,r3
   2d098:	414a703a 	and	r5,r8,r5
   2d09c:	003fa806 	br	2cf40 <__alt_data_end+0xfffecf40>
   2d0a0:	0080630e 	bge	zero,r2,2d230 <__subdf3+0x3d4>
   2d0a4:	48003026 	beq	r9,zero,2d168 <__subdf3+0x30c>
   2d0a8:	0101ffc4 	movi	r4,2047
   2d0ac:	813f8c26 	beq	r16,r4,2cee0 <__alt_data_end+0xfffecee0>
   2d0b0:	29402034 	orhi	r5,r5,128
   2d0b4:	01000e04 	movi	r4,56
   2d0b8:	2080a90e 	bge	r4,r2,2d360 <__subdf3+0x504>
   2d0bc:	298cb03a 	or	r6,r5,r6
   2d0c0:	3012c03a 	cmpne	r9,r6,zero
   2d0c4:	0005883a 	mov	r2,zero
   2d0c8:	4c53883a 	add	r9,r9,r17
   2d0cc:	4c63803a 	cmpltu	r17,r9,r17
   2d0d0:	10c7883a 	add	r3,r2,r3
   2d0d4:	88c7883a 	add	r3,r17,r3
   2d0d8:	4823883a 	mov	r17,r9
   2d0dc:	1880202c 	andhi	r2,r3,128
   2d0e0:	1000d026 	beq	r2,zero,2d424 <__subdf3+0x5c8>
   2d0e4:	84000044 	addi	r16,r16,1
   2d0e8:	0081ffc4 	movi	r2,2047
   2d0ec:	8080fe26 	beq	r16,r2,2d4e8 <__subdf3+0x68c>
   2d0f0:	00bfe034 	movhi	r2,65408
   2d0f4:	10bfffc4 	addi	r2,r2,-1
   2d0f8:	1886703a 	and	r3,r3,r2
   2d0fc:	880ad07a 	srli	r5,r17,1
   2d100:	180497fa 	slli	r2,r3,31
   2d104:	8900004c 	andi	r4,r17,1
   2d108:	2922b03a 	or	r17,r5,r4
   2d10c:	1806d07a 	srli	r3,r3,1
   2d110:	1462b03a 	or	r17,r2,r17
   2d114:	3825883a 	mov	r18,r7
   2d118:	003f7106 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d11c:	2984b03a 	or	r2,r5,r6
   2d120:	103f6826 	beq	r2,zero,2cec4 <__alt_data_end+0xfffecec4>
   2d124:	39c03fcc 	andi	r7,r7,255
   2d128:	003f6706 	br	2cec8 <__alt_data_end+0xfffecec8>
   2d12c:	4086b03a 	or	r3,r8,r2
   2d130:	18015226 	beq	r3,zero,2d67c <__subdf3+0x820>
   2d134:	00c00434 	movhi	r3,16
   2d138:	41400234 	orhi	r5,r8,8
   2d13c:	18ffffc4 	addi	r3,r3,-1
   2d140:	28ca703a 	and	r5,r5,r3
   2d144:	003f7e06 	br	2cf40 <__alt_data_end+0xfffecf40>
   2d148:	10bfffc4 	addi	r2,r2,-1
   2d14c:	1000491e 	bne	r2,zero,2d274 <__subdf3+0x418>
   2d150:	898fc83a 	sub	r7,r17,r6
   2d154:	89e3803a 	cmpltu	r17,r17,r7
   2d158:	1947c83a 	sub	r3,r3,r5
   2d15c:	1c47c83a 	sub	r3,r3,r17
   2d160:	3823883a 	mov	r17,r7
   2d164:	003f9b06 	br	2cfd4 <__alt_data_end+0xfffecfd4>
   2d168:	2988b03a 	or	r4,r5,r6
   2d16c:	203f5c26 	beq	r4,zero,2cee0 <__alt_data_end+0xfffecee0>
   2d170:	10bfffc4 	addi	r2,r2,-1
   2d174:	1000931e 	bne	r2,zero,2d3c4 <__subdf3+0x568>
   2d178:	898d883a 	add	r6,r17,r6
   2d17c:	3463803a 	cmpltu	r17,r6,r17
   2d180:	1947883a 	add	r3,r3,r5
   2d184:	88c7883a 	add	r3,r17,r3
   2d188:	3023883a 	mov	r17,r6
   2d18c:	003fd306 	br	2d0dc <__alt_data_end+0xfffed0dc>
   2d190:	1000541e 	bne	r2,zero,2d2e4 <__subdf3+0x488>
   2d194:	80800044 	addi	r2,r16,1
   2d198:	1081ffcc 	andi	r2,r2,2047
   2d19c:	01000044 	movi	r4,1
   2d1a0:	2080a20e 	bge	r4,r2,2d42c <__subdf3+0x5d0>
   2d1a4:	8989c83a 	sub	r4,r17,r6
   2d1a8:	8905803a 	cmpltu	r2,r17,r4
   2d1ac:	1967c83a 	sub	r19,r3,r5
   2d1b0:	98a7c83a 	sub	r19,r19,r2
   2d1b4:	9880202c 	andhi	r2,r19,128
   2d1b8:	10006326 	beq	r2,zero,2d348 <__subdf3+0x4ec>
   2d1bc:	3463c83a 	sub	r17,r6,r17
   2d1c0:	28c7c83a 	sub	r3,r5,r3
   2d1c4:	344d803a 	cmpltu	r6,r6,r17
   2d1c8:	19a7c83a 	sub	r19,r3,r6
   2d1cc:	3825883a 	mov	r18,r7
   2d1d0:	983f861e 	bne	r19,zero,2cfec <__alt_data_end+0xfffecfec>
   2d1d4:	8809883a 	mov	r4,r17
   2d1d8:	002d95c0 	call	2d95c <__clzsi2>
   2d1dc:	10800804 	addi	r2,r2,32
   2d1e0:	113ffe04 	addi	r4,r2,-8
   2d1e4:	00c007c4 	movi	r3,31
   2d1e8:	193f850e 	bge	r3,r4,2d000 <__alt_data_end+0xfffed000>
   2d1ec:	10bff604 	addi	r2,r2,-40
   2d1f0:	8884983a 	sll	r2,r17,r2
   2d1f4:	0023883a 	mov	r17,zero
   2d1f8:	243f880e 	bge	r4,r16,2d01c <__alt_data_end+0xfffed01c>
   2d1fc:	00ffe034 	movhi	r3,65408
   2d200:	18ffffc4 	addi	r3,r3,-1
   2d204:	8121c83a 	sub	r16,r16,r4
   2d208:	10c6703a 	and	r3,r2,r3
   2d20c:	003f3406 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d210:	9100004c 	andi	r4,r18,1
   2d214:	000b883a 	mov	r5,zero
   2d218:	0005883a 	mov	r2,zero
   2d21c:	003f4806 	br	2cf40 <__alt_data_end+0xfffecf40>
   2d220:	298cb03a 	or	r6,r5,r6
   2d224:	300cc03a 	cmpne	r6,r6,zero
   2d228:	0005883a 	mov	r2,zero
   2d22c:	003f6406 	br	2cfc0 <__alt_data_end+0xfffecfc0>
   2d230:	10009a1e 	bne	r2,zero,2d49c <__subdf3+0x640>
   2d234:	82400044 	addi	r9,r16,1
   2d238:	4881ffcc 	andi	r2,r9,2047
   2d23c:	02800044 	movi	r10,1
   2d240:	5080670e 	bge	r10,r2,2d3e0 <__subdf3+0x584>
   2d244:	0081ffc4 	movi	r2,2047
   2d248:	4880af26 	beq	r9,r2,2d508 <__subdf3+0x6ac>
   2d24c:	898d883a 	add	r6,r17,r6
   2d250:	1945883a 	add	r2,r3,r5
   2d254:	3447803a 	cmpltu	r3,r6,r17
   2d258:	1887883a 	add	r3,r3,r2
   2d25c:	182297fa 	slli	r17,r3,31
   2d260:	300cd07a 	srli	r6,r6,1
   2d264:	1806d07a 	srli	r3,r3,1
   2d268:	4821883a 	mov	r16,r9
   2d26c:	89a2b03a 	or	r17,r17,r6
   2d270:	003f1b06 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d274:	0101ffc4 	movi	r4,2047
   2d278:	813f441e 	bne	r16,r4,2cf8c <__alt_data_end+0xfffecf8c>
   2d27c:	003f1806 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d280:	843ff844 	addi	r16,r16,-31
   2d284:	01400804 	movi	r5,32
   2d288:	1408d83a 	srl	r4,r2,r16
   2d28c:	19405026 	beq	r3,r5,2d3d0 <__subdf3+0x574>
   2d290:	01401004 	movi	r5,64
   2d294:	28c7c83a 	sub	r3,r5,r3
   2d298:	10c4983a 	sll	r2,r2,r3
   2d29c:	88a2b03a 	or	r17,r17,r2
   2d2a0:	8822c03a 	cmpne	r17,r17,zero
   2d2a4:	2462b03a 	or	r17,r4,r17
   2d2a8:	0007883a 	mov	r3,zero
   2d2ac:	0021883a 	mov	r16,zero
   2d2b0:	003f6d06 	br	2d068 <__alt_data_end+0xfffed068>
   2d2b4:	11fff804 	addi	r7,r2,-32
   2d2b8:	01000804 	movi	r4,32
   2d2bc:	29ced83a 	srl	r7,r5,r7
   2d2c0:	11004526 	beq	r2,r4,2d3d8 <__subdf3+0x57c>
   2d2c4:	01001004 	movi	r4,64
   2d2c8:	2089c83a 	sub	r4,r4,r2
   2d2cc:	2904983a 	sll	r2,r5,r4
   2d2d0:	118cb03a 	or	r6,r2,r6
   2d2d4:	300cc03a 	cmpne	r6,r6,zero
   2d2d8:	398cb03a 	or	r6,r7,r6
   2d2dc:	0005883a 	mov	r2,zero
   2d2e0:	003f3706 	br	2cfc0 <__alt_data_end+0xfffecfc0>
   2d2e4:	80002a26 	beq	r16,zero,2d390 <__subdf3+0x534>
   2d2e8:	0101ffc4 	movi	r4,2047
   2d2ec:	49006626 	beq	r9,r4,2d488 <__subdf3+0x62c>
   2d2f0:	0085c83a 	sub	r2,zero,r2
   2d2f4:	18c02034 	orhi	r3,r3,128
   2d2f8:	01000e04 	movi	r4,56
   2d2fc:	20807e16 	blt	r4,r2,2d4f8 <__subdf3+0x69c>
   2d300:	010007c4 	movi	r4,31
   2d304:	2080e716 	blt	r4,r2,2d6a4 <__subdf3+0x848>
   2d308:	01000804 	movi	r4,32
   2d30c:	2089c83a 	sub	r4,r4,r2
   2d310:	1914983a 	sll	r10,r3,r4
   2d314:	8890d83a 	srl	r8,r17,r2
   2d318:	8908983a 	sll	r4,r17,r4
   2d31c:	1884d83a 	srl	r2,r3,r2
   2d320:	5222b03a 	or	r17,r10,r8
   2d324:	2006c03a 	cmpne	r3,r4,zero
   2d328:	88e2b03a 	or	r17,r17,r3
   2d32c:	3463c83a 	sub	r17,r6,r17
   2d330:	2885c83a 	sub	r2,r5,r2
   2d334:	344d803a 	cmpltu	r6,r6,r17
   2d338:	1187c83a 	sub	r3,r2,r6
   2d33c:	4821883a 	mov	r16,r9
   2d340:	3825883a 	mov	r18,r7
   2d344:	003f2306 	br	2cfd4 <__alt_data_end+0xfffecfd4>
   2d348:	24d0b03a 	or	r8,r4,r19
   2d34c:	40001b1e 	bne	r8,zero,2d3bc <__subdf3+0x560>
   2d350:	0005883a 	mov	r2,zero
   2d354:	0009883a 	mov	r4,zero
   2d358:	0021883a 	mov	r16,zero
   2d35c:	003f4906 	br	2d084 <__alt_data_end+0xfffed084>
   2d360:	010007c4 	movi	r4,31
   2d364:	20803a16 	blt	r4,r2,2d450 <__subdf3+0x5f4>
   2d368:	01000804 	movi	r4,32
   2d36c:	2089c83a 	sub	r4,r4,r2
   2d370:	2912983a 	sll	r9,r5,r4
   2d374:	3090d83a 	srl	r8,r6,r2
   2d378:	3108983a 	sll	r4,r6,r4
   2d37c:	2884d83a 	srl	r2,r5,r2
   2d380:	4a12b03a 	or	r9,r9,r8
   2d384:	2008c03a 	cmpne	r4,r4,zero
   2d388:	4912b03a 	or	r9,r9,r4
   2d38c:	003f4e06 	br	2d0c8 <__alt_data_end+0xfffed0c8>
   2d390:	1c48b03a 	or	r4,r3,r17
   2d394:	20003c26 	beq	r4,zero,2d488 <__subdf3+0x62c>
   2d398:	0084303a 	nor	r2,zero,r2
   2d39c:	1000381e 	bne	r2,zero,2d480 <__subdf3+0x624>
   2d3a0:	3463c83a 	sub	r17,r6,r17
   2d3a4:	28c5c83a 	sub	r2,r5,r3
   2d3a8:	344d803a 	cmpltu	r6,r6,r17
   2d3ac:	1187c83a 	sub	r3,r2,r6
   2d3b0:	4821883a 	mov	r16,r9
   2d3b4:	3825883a 	mov	r18,r7
   2d3b8:	003f0606 	br	2cfd4 <__alt_data_end+0xfffecfd4>
   2d3bc:	2023883a 	mov	r17,r4
   2d3c0:	003f0906 	br	2cfe8 <__alt_data_end+0xfffecfe8>
   2d3c4:	0101ffc4 	movi	r4,2047
   2d3c8:	813f3a1e 	bne	r16,r4,2d0b4 <__alt_data_end+0xfffed0b4>
   2d3cc:	003ec406 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d3d0:	0005883a 	mov	r2,zero
   2d3d4:	003fb106 	br	2d29c <__alt_data_end+0xfffed29c>
   2d3d8:	0005883a 	mov	r2,zero
   2d3dc:	003fbc06 	br	2d2d0 <__alt_data_end+0xfffed2d0>
   2d3e0:	1c44b03a 	or	r2,r3,r17
   2d3e4:	80008e1e 	bne	r16,zero,2d620 <__subdf3+0x7c4>
   2d3e8:	1000c826 	beq	r2,zero,2d70c <__subdf3+0x8b0>
   2d3ec:	2984b03a 	or	r2,r5,r6
   2d3f0:	103ebb26 	beq	r2,zero,2cee0 <__alt_data_end+0xfffecee0>
   2d3f4:	8989883a 	add	r4,r17,r6
   2d3f8:	1945883a 	add	r2,r3,r5
   2d3fc:	2447803a 	cmpltu	r3,r4,r17
   2d400:	1887883a 	add	r3,r3,r2
   2d404:	1880202c 	andhi	r2,r3,128
   2d408:	2023883a 	mov	r17,r4
   2d40c:	103f1626 	beq	r2,zero,2d068 <__alt_data_end+0xfffed068>
   2d410:	00bfe034 	movhi	r2,65408
   2d414:	10bfffc4 	addi	r2,r2,-1
   2d418:	5021883a 	mov	r16,r10
   2d41c:	1886703a 	and	r3,r3,r2
   2d420:	003eaf06 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d424:	3825883a 	mov	r18,r7
   2d428:	003f0f06 	br	2d068 <__alt_data_end+0xfffed068>
   2d42c:	1c44b03a 	or	r2,r3,r17
   2d430:	8000251e 	bne	r16,zero,2d4c8 <__subdf3+0x66c>
   2d434:	1000661e 	bne	r2,zero,2d5d0 <__subdf3+0x774>
   2d438:	2990b03a 	or	r8,r5,r6
   2d43c:	40009626 	beq	r8,zero,2d698 <__subdf3+0x83c>
   2d440:	2807883a 	mov	r3,r5
   2d444:	3023883a 	mov	r17,r6
   2d448:	3825883a 	mov	r18,r7
   2d44c:	003ea406 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d450:	127ff804 	addi	r9,r2,-32
   2d454:	01000804 	movi	r4,32
   2d458:	2a52d83a 	srl	r9,r5,r9
   2d45c:	11008c26 	beq	r2,r4,2d690 <__subdf3+0x834>
   2d460:	01001004 	movi	r4,64
   2d464:	2085c83a 	sub	r2,r4,r2
   2d468:	2884983a 	sll	r2,r5,r2
   2d46c:	118cb03a 	or	r6,r2,r6
   2d470:	300cc03a 	cmpne	r6,r6,zero
   2d474:	4992b03a 	or	r9,r9,r6
   2d478:	0005883a 	mov	r2,zero
   2d47c:	003f1206 	br	2d0c8 <__alt_data_end+0xfffed0c8>
   2d480:	0101ffc4 	movi	r4,2047
   2d484:	493f9c1e 	bne	r9,r4,2d2f8 <__alt_data_end+0xfffed2f8>
   2d488:	2807883a 	mov	r3,r5
   2d48c:	3023883a 	mov	r17,r6
   2d490:	4821883a 	mov	r16,r9
   2d494:	3825883a 	mov	r18,r7
   2d498:	003e9106 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d49c:	80001f1e 	bne	r16,zero,2d51c <__subdf3+0x6c0>
   2d4a0:	1c48b03a 	or	r4,r3,r17
   2d4a4:	20005a26 	beq	r4,zero,2d610 <__subdf3+0x7b4>
   2d4a8:	0084303a 	nor	r2,zero,r2
   2d4ac:	1000561e 	bne	r2,zero,2d608 <__subdf3+0x7ac>
   2d4b0:	89a3883a 	add	r17,r17,r6
   2d4b4:	1945883a 	add	r2,r3,r5
   2d4b8:	898d803a 	cmpltu	r6,r17,r6
   2d4bc:	3087883a 	add	r3,r6,r2
   2d4c0:	4821883a 	mov	r16,r9
   2d4c4:	003f0506 	br	2d0dc <__alt_data_end+0xfffed0dc>
   2d4c8:	10002b1e 	bne	r2,zero,2d578 <__subdf3+0x71c>
   2d4cc:	2984b03a 	or	r2,r5,r6
   2d4d0:	10008026 	beq	r2,zero,2d6d4 <__subdf3+0x878>
   2d4d4:	2807883a 	mov	r3,r5
   2d4d8:	3023883a 	mov	r17,r6
   2d4dc:	3825883a 	mov	r18,r7
   2d4e0:	0401ffc4 	movi	r16,2047
   2d4e4:	003e7e06 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d4e8:	3809883a 	mov	r4,r7
   2d4ec:	0011883a 	mov	r8,zero
   2d4f0:	0005883a 	mov	r2,zero
   2d4f4:	003ee306 	br	2d084 <__alt_data_end+0xfffed084>
   2d4f8:	1c62b03a 	or	r17,r3,r17
   2d4fc:	8822c03a 	cmpne	r17,r17,zero
   2d500:	0005883a 	mov	r2,zero
   2d504:	003f8906 	br	2d32c <__alt_data_end+0xfffed32c>
   2d508:	3809883a 	mov	r4,r7
   2d50c:	4821883a 	mov	r16,r9
   2d510:	0011883a 	mov	r8,zero
   2d514:	0005883a 	mov	r2,zero
   2d518:	003eda06 	br	2d084 <__alt_data_end+0xfffed084>
   2d51c:	0101ffc4 	movi	r4,2047
   2d520:	49003b26 	beq	r9,r4,2d610 <__subdf3+0x7b4>
   2d524:	0085c83a 	sub	r2,zero,r2
   2d528:	18c02034 	orhi	r3,r3,128
   2d52c:	01000e04 	movi	r4,56
   2d530:	20806e16 	blt	r4,r2,2d6ec <__subdf3+0x890>
   2d534:	010007c4 	movi	r4,31
   2d538:	20807716 	blt	r4,r2,2d718 <__subdf3+0x8bc>
   2d53c:	01000804 	movi	r4,32
   2d540:	2089c83a 	sub	r4,r4,r2
   2d544:	1914983a 	sll	r10,r3,r4
   2d548:	8890d83a 	srl	r8,r17,r2
   2d54c:	8908983a 	sll	r4,r17,r4
   2d550:	1884d83a 	srl	r2,r3,r2
   2d554:	5222b03a 	or	r17,r10,r8
   2d558:	2006c03a 	cmpne	r3,r4,zero
   2d55c:	88e2b03a 	or	r17,r17,r3
   2d560:	89a3883a 	add	r17,r17,r6
   2d564:	1145883a 	add	r2,r2,r5
   2d568:	898d803a 	cmpltu	r6,r17,r6
   2d56c:	3087883a 	add	r3,r6,r2
   2d570:	4821883a 	mov	r16,r9
   2d574:	003ed906 	br	2d0dc <__alt_data_end+0xfffed0dc>
   2d578:	2984b03a 	or	r2,r5,r6
   2d57c:	10004226 	beq	r2,zero,2d688 <__subdf3+0x82c>
   2d580:	1808d0fa 	srli	r4,r3,3
   2d584:	8822d0fa 	srli	r17,r17,3
   2d588:	1806977a 	slli	r3,r3,29
   2d58c:	2080022c 	andhi	r2,r4,8
   2d590:	1c62b03a 	or	r17,r3,r17
   2d594:	10000826 	beq	r2,zero,2d5b8 <__subdf3+0x75c>
   2d598:	2812d0fa 	srli	r9,r5,3
   2d59c:	4880022c 	andhi	r2,r9,8
   2d5a0:	1000051e 	bne	r2,zero,2d5b8 <__subdf3+0x75c>
   2d5a4:	300cd0fa 	srli	r6,r6,3
   2d5a8:	2804977a 	slli	r2,r5,29
   2d5ac:	4809883a 	mov	r4,r9
   2d5b0:	3825883a 	mov	r18,r7
   2d5b4:	11a2b03a 	or	r17,r2,r6
   2d5b8:	8806d77a 	srli	r3,r17,29
   2d5bc:	200890fa 	slli	r4,r4,3
   2d5c0:	882290fa 	slli	r17,r17,3
   2d5c4:	0401ffc4 	movi	r16,2047
   2d5c8:	1906b03a 	or	r3,r3,r4
   2d5cc:	003e4406 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d5d0:	2984b03a 	or	r2,r5,r6
   2d5d4:	103e4226 	beq	r2,zero,2cee0 <__alt_data_end+0xfffecee0>
   2d5d8:	8989c83a 	sub	r4,r17,r6
   2d5dc:	8911803a 	cmpltu	r8,r17,r4
   2d5e0:	1945c83a 	sub	r2,r3,r5
   2d5e4:	1205c83a 	sub	r2,r2,r8
   2d5e8:	1200202c 	andhi	r8,r2,128
   2d5ec:	403e9a26 	beq	r8,zero,2d058 <__alt_data_end+0xfffed058>
   2d5f0:	3463c83a 	sub	r17,r6,r17
   2d5f4:	28c5c83a 	sub	r2,r5,r3
   2d5f8:	344d803a 	cmpltu	r6,r6,r17
   2d5fc:	1187c83a 	sub	r3,r2,r6
   2d600:	3825883a 	mov	r18,r7
   2d604:	003e3606 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d608:	0101ffc4 	movi	r4,2047
   2d60c:	493fc71e 	bne	r9,r4,2d52c <__alt_data_end+0xfffed52c>
   2d610:	2807883a 	mov	r3,r5
   2d614:	3023883a 	mov	r17,r6
   2d618:	4821883a 	mov	r16,r9
   2d61c:	003e3006 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d620:	10003626 	beq	r2,zero,2d6fc <__subdf3+0x8a0>
   2d624:	2984b03a 	or	r2,r5,r6
   2d628:	10001726 	beq	r2,zero,2d688 <__subdf3+0x82c>
   2d62c:	1808d0fa 	srli	r4,r3,3
   2d630:	8822d0fa 	srli	r17,r17,3
   2d634:	1806977a 	slli	r3,r3,29
   2d638:	2080022c 	andhi	r2,r4,8
   2d63c:	1c62b03a 	or	r17,r3,r17
   2d640:	10000726 	beq	r2,zero,2d660 <__subdf3+0x804>
   2d644:	2812d0fa 	srli	r9,r5,3
   2d648:	4880022c 	andhi	r2,r9,8
   2d64c:	1000041e 	bne	r2,zero,2d660 <__subdf3+0x804>
   2d650:	300cd0fa 	srli	r6,r6,3
   2d654:	2804977a 	slli	r2,r5,29
   2d658:	4809883a 	mov	r4,r9
   2d65c:	11a2b03a 	or	r17,r2,r6
   2d660:	8806d77a 	srli	r3,r17,29
   2d664:	200890fa 	slli	r4,r4,3
   2d668:	882290fa 	slli	r17,r17,3
   2d66c:	3825883a 	mov	r18,r7
   2d670:	1906b03a 	or	r3,r3,r4
   2d674:	0401ffc4 	movi	r16,2047
   2d678:	003e1906 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d67c:	000b883a 	mov	r5,zero
   2d680:	0005883a 	mov	r2,zero
   2d684:	003e2e06 	br	2cf40 <__alt_data_end+0xfffecf40>
   2d688:	0401ffc4 	movi	r16,2047
   2d68c:	003e1406 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d690:	0005883a 	mov	r2,zero
   2d694:	003f7506 	br	2d46c <__alt_data_end+0xfffed46c>
   2d698:	0005883a 	mov	r2,zero
   2d69c:	0009883a 	mov	r4,zero
   2d6a0:	003e7806 	br	2d084 <__alt_data_end+0xfffed084>
   2d6a4:	123ff804 	addi	r8,r2,-32
   2d6a8:	01000804 	movi	r4,32
   2d6ac:	1a10d83a 	srl	r8,r3,r8
   2d6b0:	11002526 	beq	r2,r4,2d748 <__subdf3+0x8ec>
   2d6b4:	01001004 	movi	r4,64
   2d6b8:	2085c83a 	sub	r2,r4,r2
   2d6bc:	1884983a 	sll	r2,r3,r2
   2d6c0:	1444b03a 	or	r2,r2,r17
   2d6c4:	1004c03a 	cmpne	r2,r2,zero
   2d6c8:	40a2b03a 	or	r17,r8,r2
   2d6cc:	0005883a 	mov	r2,zero
   2d6d0:	003f1606 	br	2d32c <__alt_data_end+0xfffed32c>
   2d6d4:	02000434 	movhi	r8,16
   2d6d8:	0009883a 	mov	r4,zero
   2d6dc:	423fffc4 	addi	r8,r8,-1
   2d6e0:	00bfffc4 	movi	r2,-1
   2d6e4:	0401ffc4 	movi	r16,2047
   2d6e8:	003e6606 	br	2d084 <__alt_data_end+0xfffed084>
   2d6ec:	1c62b03a 	or	r17,r3,r17
   2d6f0:	8822c03a 	cmpne	r17,r17,zero
   2d6f4:	0005883a 	mov	r2,zero
   2d6f8:	003f9906 	br	2d560 <__alt_data_end+0xfffed560>
   2d6fc:	2807883a 	mov	r3,r5
   2d700:	3023883a 	mov	r17,r6
   2d704:	0401ffc4 	movi	r16,2047
   2d708:	003df506 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d70c:	2807883a 	mov	r3,r5
   2d710:	3023883a 	mov	r17,r6
   2d714:	003df206 	br	2cee0 <__alt_data_end+0xfffecee0>
   2d718:	123ff804 	addi	r8,r2,-32
   2d71c:	01000804 	movi	r4,32
   2d720:	1a10d83a 	srl	r8,r3,r8
   2d724:	11000a26 	beq	r2,r4,2d750 <__subdf3+0x8f4>
   2d728:	01001004 	movi	r4,64
   2d72c:	2085c83a 	sub	r2,r4,r2
   2d730:	1884983a 	sll	r2,r3,r2
   2d734:	1444b03a 	or	r2,r2,r17
   2d738:	1004c03a 	cmpne	r2,r2,zero
   2d73c:	40a2b03a 	or	r17,r8,r2
   2d740:	0005883a 	mov	r2,zero
   2d744:	003f8606 	br	2d560 <__alt_data_end+0xfffed560>
   2d748:	0005883a 	mov	r2,zero
   2d74c:	003fdc06 	br	2d6c0 <__alt_data_end+0xfffed6c0>
   2d750:	0005883a 	mov	r2,zero
   2d754:	003ff706 	br	2d734 <__alt_data_end+0xfffed734>

0002d758 <__fixdfsi>:
   2d758:	280cd53a 	srli	r6,r5,20
   2d75c:	00c00434 	movhi	r3,16
   2d760:	18ffffc4 	addi	r3,r3,-1
   2d764:	3181ffcc 	andi	r6,r6,2047
   2d768:	01c0ff84 	movi	r7,1022
   2d76c:	28c6703a 	and	r3,r5,r3
   2d770:	280ad7fa 	srli	r5,r5,31
   2d774:	3980120e 	bge	r7,r6,2d7c0 <__fixdfsi+0x68>
   2d778:	00810744 	movi	r2,1053
   2d77c:	11800c16 	blt	r2,r6,2d7b0 <__fixdfsi+0x58>
   2d780:	00810cc4 	movi	r2,1075
   2d784:	1185c83a 	sub	r2,r2,r6
   2d788:	01c007c4 	movi	r7,31
   2d78c:	18c00434 	orhi	r3,r3,16
   2d790:	38800d16 	blt	r7,r2,2d7c8 <__fixdfsi+0x70>
   2d794:	31befb44 	addi	r6,r6,-1043
   2d798:	2084d83a 	srl	r2,r4,r2
   2d79c:	1986983a 	sll	r3,r3,r6
   2d7a0:	1884b03a 	or	r2,r3,r2
   2d7a4:	28000726 	beq	r5,zero,2d7c4 <__fixdfsi+0x6c>
   2d7a8:	0085c83a 	sub	r2,zero,r2
   2d7ac:	f800283a 	ret
   2d7b0:	00a00034 	movhi	r2,32768
   2d7b4:	10bfffc4 	addi	r2,r2,-1
   2d7b8:	2885883a 	add	r2,r5,r2
   2d7bc:	f800283a 	ret
   2d7c0:	0005883a 	mov	r2,zero
   2d7c4:	f800283a 	ret
   2d7c8:	008104c4 	movi	r2,1043
   2d7cc:	1185c83a 	sub	r2,r2,r6
   2d7d0:	1884d83a 	srl	r2,r3,r2
   2d7d4:	003ff306 	br	2d7a4 <__alt_data_end+0xfffed7a4>

0002d7d8 <__floatsidf>:
   2d7d8:	defffd04 	addi	sp,sp,-12
   2d7dc:	dfc00215 	stw	ra,8(sp)
   2d7e0:	dc400115 	stw	r17,4(sp)
   2d7e4:	dc000015 	stw	r16,0(sp)
   2d7e8:	20002b26 	beq	r4,zero,2d898 <__floatsidf+0xc0>
   2d7ec:	2023883a 	mov	r17,r4
   2d7f0:	2020d7fa 	srli	r16,r4,31
   2d7f4:	20002d16 	blt	r4,zero,2d8ac <__floatsidf+0xd4>
   2d7f8:	8809883a 	mov	r4,r17
   2d7fc:	002d95c0 	call	2d95c <__clzsi2>
   2d800:	01410784 	movi	r5,1054
   2d804:	288bc83a 	sub	r5,r5,r2
   2d808:	01010cc4 	movi	r4,1075
   2d80c:	2149c83a 	sub	r4,r4,r5
   2d810:	00c007c4 	movi	r3,31
   2d814:	1900160e 	bge	r3,r4,2d870 <__floatsidf+0x98>
   2d818:	00c104c4 	movi	r3,1043
   2d81c:	1947c83a 	sub	r3,r3,r5
   2d820:	88c6983a 	sll	r3,r17,r3
   2d824:	00800434 	movhi	r2,16
   2d828:	10bfffc4 	addi	r2,r2,-1
   2d82c:	1886703a 	and	r3,r3,r2
   2d830:	2941ffcc 	andi	r5,r5,2047
   2d834:	800d883a 	mov	r6,r16
   2d838:	0005883a 	mov	r2,zero
   2d83c:	280a953a 	slli	r5,r5,20
   2d840:	31803fcc 	andi	r6,r6,255
   2d844:	01000434 	movhi	r4,16
   2d848:	300c97fa 	slli	r6,r6,31
   2d84c:	213fffc4 	addi	r4,r4,-1
   2d850:	1906703a 	and	r3,r3,r4
   2d854:	1946b03a 	or	r3,r3,r5
   2d858:	1986b03a 	or	r3,r3,r6
   2d85c:	dfc00217 	ldw	ra,8(sp)
   2d860:	dc400117 	ldw	r17,4(sp)
   2d864:	dc000017 	ldw	r16,0(sp)
   2d868:	dec00304 	addi	sp,sp,12
   2d86c:	f800283a 	ret
   2d870:	00c002c4 	movi	r3,11
   2d874:	1887c83a 	sub	r3,r3,r2
   2d878:	88c6d83a 	srl	r3,r17,r3
   2d87c:	8904983a 	sll	r2,r17,r4
   2d880:	01000434 	movhi	r4,16
   2d884:	213fffc4 	addi	r4,r4,-1
   2d888:	2941ffcc 	andi	r5,r5,2047
   2d88c:	1906703a 	and	r3,r3,r4
   2d890:	800d883a 	mov	r6,r16
   2d894:	003fe906 	br	2d83c <__alt_data_end+0xfffed83c>
   2d898:	000d883a 	mov	r6,zero
   2d89c:	000b883a 	mov	r5,zero
   2d8a0:	0007883a 	mov	r3,zero
   2d8a4:	0005883a 	mov	r2,zero
   2d8a8:	003fe406 	br	2d83c <__alt_data_end+0xfffed83c>
   2d8ac:	0123c83a 	sub	r17,zero,r4
   2d8b0:	003fd106 	br	2d7f8 <__alt_data_end+0xfffed7f8>

0002d8b4 <__floatunsidf>:
   2d8b4:	defffe04 	addi	sp,sp,-8
   2d8b8:	dc000015 	stw	r16,0(sp)
   2d8bc:	dfc00115 	stw	ra,4(sp)
   2d8c0:	2021883a 	mov	r16,r4
   2d8c4:	20002226 	beq	r4,zero,2d950 <__floatunsidf+0x9c>
   2d8c8:	002d95c0 	call	2d95c <__clzsi2>
   2d8cc:	01010784 	movi	r4,1054
   2d8d0:	2089c83a 	sub	r4,r4,r2
   2d8d4:	01810cc4 	movi	r6,1075
   2d8d8:	310dc83a 	sub	r6,r6,r4
   2d8dc:	00c007c4 	movi	r3,31
   2d8e0:	1980120e 	bge	r3,r6,2d92c <__floatunsidf+0x78>
   2d8e4:	00c104c4 	movi	r3,1043
   2d8e8:	1907c83a 	sub	r3,r3,r4
   2d8ec:	80ca983a 	sll	r5,r16,r3
   2d8f0:	00800434 	movhi	r2,16
   2d8f4:	10bfffc4 	addi	r2,r2,-1
   2d8f8:	2101ffcc 	andi	r4,r4,2047
   2d8fc:	0021883a 	mov	r16,zero
   2d900:	288a703a 	and	r5,r5,r2
   2d904:	2008953a 	slli	r4,r4,20
   2d908:	00c00434 	movhi	r3,16
   2d90c:	18ffffc4 	addi	r3,r3,-1
   2d910:	28c6703a 	and	r3,r5,r3
   2d914:	8005883a 	mov	r2,r16
   2d918:	1906b03a 	or	r3,r3,r4
   2d91c:	dfc00117 	ldw	ra,4(sp)
   2d920:	dc000017 	ldw	r16,0(sp)
   2d924:	dec00204 	addi	sp,sp,8
   2d928:	f800283a 	ret
   2d92c:	00c002c4 	movi	r3,11
   2d930:	188bc83a 	sub	r5,r3,r2
   2d934:	814ad83a 	srl	r5,r16,r5
   2d938:	00c00434 	movhi	r3,16
   2d93c:	18ffffc4 	addi	r3,r3,-1
   2d940:	81a0983a 	sll	r16,r16,r6
   2d944:	2101ffcc 	andi	r4,r4,2047
   2d948:	28ca703a 	and	r5,r5,r3
   2d94c:	003fed06 	br	2d904 <__alt_data_end+0xfffed904>
   2d950:	0009883a 	mov	r4,zero
   2d954:	000b883a 	mov	r5,zero
   2d958:	003fea06 	br	2d904 <__alt_data_end+0xfffed904>

0002d95c <__clzsi2>:
   2d95c:	00bfffd4 	movui	r2,65535
   2d960:	11000536 	bltu	r2,r4,2d978 <__clzsi2+0x1c>
   2d964:	00803fc4 	movi	r2,255
   2d968:	11000f36 	bltu	r2,r4,2d9a8 <__clzsi2+0x4c>
   2d96c:	00800804 	movi	r2,32
   2d970:	0007883a 	mov	r3,zero
   2d974:	00000506 	br	2d98c <__clzsi2+0x30>
   2d978:	00804034 	movhi	r2,256
   2d97c:	10bfffc4 	addi	r2,r2,-1
   2d980:	11000c2e 	bgeu	r2,r4,2d9b4 <__clzsi2+0x58>
   2d984:	00800204 	movi	r2,8
   2d988:	00c00604 	movi	r3,24
   2d98c:	20c8d83a 	srl	r4,r4,r3
   2d990:	00c000f4 	movhi	r3,3
   2d994:	18c3c904 	addi	r3,r3,3876
   2d998:	1909883a 	add	r4,r3,r4
   2d99c:	20c00003 	ldbu	r3,0(r4)
   2d9a0:	10c5c83a 	sub	r2,r2,r3
   2d9a4:	f800283a 	ret
   2d9a8:	00800604 	movi	r2,24
   2d9ac:	00c00204 	movi	r3,8
   2d9b0:	003ff606 	br	2d98c <__alt_data_end+0xfffed98c>
   2d9b4:	00800404 	movi	r2,16
   2d9b8:	1007883a 	mov	r3,r2
   2d9bc:	003ff306 	br	2d98c <__alt_data_end+0xfffed98c>

0002d9c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d9c0:	defffe04 	addi	sp,sp,-8
   2d9c4:	dfc00115 	stw	ra,4(sp)
   2d9c8:	df000015 	stw	fp,0(sp)
   2d9cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d9d0:	d0a00c17 	ldw	r2,-32720(gp)
   2d9d4:	10000326 	beq	r2,zero,2d9e4 <alt_get_errno+0x24>
   2d9d8:	d0a00c17 	ldw	r2,-32720(gp)
   2d9dc:	103ee83a 	callr	r2
   2d9e0:	00000106 	br	2d9e8 <alt_get_errno+0x28>
   2d9e4:	d0a6fe04 	addi	r2,gp,-25608
}
   2d9e8:	e037883a 	mov	sp,fp
   2d9ec:	dfc00117 	ldw	ra,4(sp)
   2d9f0:	df000017 	ldw	fp,0(sp)
   2d9f4:	dec00204 	addi	sp,sp,8
   2d9f8:	f800283a 	ret

0002d9fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d9fc:	defffb04 	addi	sp,sp,-20
   2da00:	dfc00415 	stw	ra,16(sp)
   2da04:	df000315 	stw	fp,12(sp)
   2da08:	df000304 	addi	fp,sp,12
   2da0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2da10:	e0bfff17 	ldw	r2,-4(fp)
   2da14:	10000616 	blt	r2,zero,2da30 <close+0x34>
   2da18:	e0bfff17 	ldw	r2,-4(fp)
   2da1c:	10c00324 	muli	r3,r2,12
   2da20:	008000f4 	movhi	r2,3
   2da24:	10864a04 	addi	r2,r2,6440
   2da28:	1885883a 	add	r2,r3,r2
   2da2c:	00000106 	br	2da34 <close+0x38>
   2da30:	0005883a 	mov	r2,zero
   2da34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2da38:	e0bffd17 	ldw	r2,-12(fp)
   2da3c:	10001926 	beq	r2,zero,2daa4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2da40:	e0bffd17 	ldw	r2,-12(fp)
   2da44:	10800017 	ldw	r2,0(r2)
   2da48:	10800417 	ldw	r2,16(r2)
   2da4c:	10000626 	beq	r2,zero,2da68 <close+0x6c>
   2da50:	e0bffd17 	ldw	r2,-12(fp)
   2da54:	10800017 	ldw	r2,0(r2)
   2da58:	10800417 	ldw	r2,16(r2)
   2da5c:	e13ffd17 	ldw	r4,-12(fp)
   2da60:	103ee83a 	callr	r2
   2da64:	00000106 	br	2da6c <close+0x70>
   2da68:	0005883a 	mov	r2,zero
   2da6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2da70:	e13fff17 	ldw	r4,-4(fp)
   2da74:	002e3100 	call	2e310 <alt_release_fd>
    if (rval < 0)
   2da78:	e0bffe17 	ldw	r2,-8(fp)
   2da7c:	1000070e 	bge	r2,zero,2da9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2da80:	002d9c00 	call	2d9c0 <alt_get_errno>
   2da84:	1007883a 	mov	r3,r2
   2da88:	e0bffe17 	ldw	r2,-8(fp)
   2da8c:	0085c83a 	sub	r2,zero,r2
   2da90:	18800015 	stw	r2,0(r3)
      return -1;
   2da94:	00bfffc4 	movi	r2,-1
   2da98:	00000706 	br	2dab8 <close+0xbc>
    }
    return 0;
   2da9c:	0005883a 	mov	r2,zero
   2daa0:	00000506 	br	2dab8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2daa4:	002d9c00 	call	2d9c0 <alt_get_errno>
   2daa8:	1007883a 	mov	r3,r2
   2daac:	00801444 	movi	r2,81
   2dab0:	18800015 	stw	r2,0(r3)
    return -1;
   2dab4:	00bfffc4 	movi	r2,-1
  }
}
   2dab8:	e037883a 	mov	sp,fp
   2dabc:	dfc00117 	ldw	ra,4(sp)
   2dac0:	df000017 	ldw	fp,0(sp)
   2dac4:	dec00204 	addi	sp,sp,8
   2dac8:	f800283a 	ret

0002dacc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2dacc:	defffc04 	addi	sp,sp,-16
   2dad0:	df000315 	stw	fp,12(sp)
   2dad4:	df000304 	addi	fp,sp,12
   2dad8:	e13ffd15 	stw	r4,-12(fp)
   2dadc:	e17ffe15 	stw	r5,-8(fp)
   2dae0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2dae4:	e0bfff17 	ldw	r2,-4(fp)
}
   2dae8:	e037883a 	mov	sp,fp
   2daec:	df000017 	ldw	fp,0(sp)
   2daf0:	dec00104 	addi	sp,sp,4
   2daf4:	f800283a 	ret

0002daf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2daf8:	defffe04 	addi	sp,sp,-8
   2dafc:	dfc00115 	stw	ra,4(sp)
   2db00:	df000015 	stw	fp,0(sp)
   2db04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2db08:	d0a00c17 	ldw	r2,-32720(gp)
   2db0c:	10000326 	beq	r2,zero,2db1c <alt_get_errno+0x24>
   2db10:	d0a00c17 	ldw	r2,-32720(gp)
   2db14:	103ee83a 	callr	r2
   2db18:	00000106 	br	2db20 <alt_get_errno+0x28>
   2db1c:	d0a6fe04 	addi	r2,gp,-25608
}
   2db20:	e037883a 	mov	sp,fp
   2db24:	dfc00117 	ldw	ra,4(sp)
   2db28:	df000017 	ldw	fp,0(sp)
   2db2c:	dec00204 	addi	sp,sp,8
   2db30:	f800283a 	ret

0002db34 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2db34:	defffb04 	addi	sp,sp,-20
   2db38:	dfc00415 	stw	ra,16(sp)
   2db3c:	df000315 	stw	fp,12(sp)
   2db40:	df000304 	addi	fp,sp,12
   2db44:	e13ffe15 	stw	r4,-8(fp)
   2db48:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2db4c:	e0bffe17 	ldw	r2,-8(fp)
   2db50:	10000616 	blt	r2,zero,2db6c <fstat+0x38>
   2db54:	e0bffe17 	ldw	r2,-8(fp)
   2db58:	10c00324 	muli	r3,r2,12
   2db5c:	008000f4 	movhi	r2,3
   2db60:	10864a04 	addi	r2,r2,6440
   2db64:	1885883a 	add	r2,r3,r2
   2db68:	00000106 	br	2db70 <fstat+0x3c>
   2db6c:	0005883a 	mov	r2,zero
   2db70:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2db74:	e0bffd17 	ldw	r2,-12(fp)
   2db78:	10001026 	beq	r2,zero,2dbbc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2db7c:	e0bffd17 	ldw	r2,-12(fp)
   2db80:	10800017 	ldw	r2,0(r2)
   2db84:	10800817 	ldw	r2,32(r2)
   2db88:	10000726 	beq	r2,zero,2dba8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2db8c:	e0bffd17 	ldw	r2,-12(fp)
   2db90:	10800017 	ldw	r2,0(r2)
   2db94:	10800817 	ldw	r2,32(r2)
   2db98:	e17fff17 	ldw	r5,-4(fp)
   2db9c:	e13ffd17 	ldw	r4,-12(fp)
   2dba0:	103ee83a 	callr	r2
   2dba4:	00000a06 	br	2dbd0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2dba8:	e0bfff17 	ldw	r2,-4(fp)
   2dbac:	00c80004 	movi	r3,8192
   2dbb0:	10c00115 	stw	r3,4(r2)
      return 0;
   2dbb4:	0005883a 	mov	r2,zero
   2dbb8:	00000506 	br	2dbd0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2dbbc:	002daf80 	call	2daf8 <alt_get_errno>
   2dbc0:	1007883a 	mov	r3,r2
   2dbc4:	00801444 	movi	r2,81
   2dbc8:	18800015 	stw	r2,0(r3)
    return -1;
   2dbcc:	00bfffc4 	movi	r2,-1
  }
}
   2dbd0:	e037883a 	mov	sp,fp
   2dbd4:	dfc00117 	ldw	ra,4(sp)
   2dbd8:	df000017 	ldw	fp,0(sp)
   2dbdc:	dec00204 	addi	sp,sp,8
   2dbe0:	f800283a 	ret

0002dbe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dbe4:	defffe04 	addi	sp,sp,-8
   2dbe8:	dfc00115 	stw	ra,4(sp)
   2dbec:	df000015 	stw	fp,0(sp)
   2dbf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dbf4:	d0a00c17 	ldw	r2,-32720(gp)
   2dbf8:	10000326 	beq	r2,zero,2dc08 <alt_get_errno+0x24>
   2dbfc:	d0a00c17 	ldw	r2,-32720(gp)
   2dc00:	103ee83a 	callr	r2
   2dc04:	00000106 	br	2dc0c <alt_get_errno+0x28>
   2dc08:	d0a6fe04 	addi	r2,gp,-25608
}
   2dc0c:	e037883a 	mov	sp,fp
   2dc10:	dfc00117 	ldw	ra,4(sp)
   2dc14:	df000017 	ldw	fp,0(sp)
   2dc18:	dec00204 	addi	sp,sp,8
   2dc1c:	f800283a 	ret

0002dc20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2dc20:	deffed04 	addi	sp,sp,-76
   2dc24:	dfc01215 	stw	ra,72(sp)
   2dc28:	df001115 	stw	fp,68(sp)
   2dc2c:	df001104 	addi	fp,sp,68
   2dc30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dc34:	e0bfff17 	ldw	r2,-4(fp)
   2dc38:	10000616 	blt	r2,zero,2dc54 <isatty+0x34>
   2dc3c:	e0bfff17 	ldw	r2,-4(fp)
   2dc40:	10c00324 	muli	r3,r2,12
   2dc44:	008000f4 	movhi	r2,3
   2dc48:	10864a04 	addi	r2,r2,6440
   2dc4c:	1885883a 	add	r2,r3,r2
   2dc50:	00000106 	br	2dc58 <isatty+0x38>
   2dc54:	0005883a 	mov	r2,zero
   2dc58:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2dc5c:	e0bfef17 	ldw	r2,-68(fp)
   2dc60:	10000e26 	beq	r2,zero,2dc9c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2dc64:	e0bfef17 	ldw	r2,-68(fp)
   2dc68:	10800017 	ldw	r2,0(r2)
   2dc6c:	10800817 	ldw	r2,32(r2)
   2dc70:	1000021e 	bne	r2,zero,2dc7c <isatty+0x5c>
    {
      return 1;
   2dc74:	00800044 	movi	r2,1
   2dc78:	00000d06 	br	2dcb0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2dc7c:	e0bff004 	addi	r2,fp,-64
   2dc80:	100b883a 	mov	r5,r2
   2dc84:	e13fff17 	ldw	r4,-4(fp)
   2dc88:	002db340 	call	2db34 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2dc8c:	e0bff117 	ldw	r2,-60(fp)
   2dc90:	10880020 	cmpeqi	r2,r2,8192
   2dc94:	10803fcc 	andi	r2,r2,255
   2dc98:	00000506 	br	2dcb0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2dc9c:	002dbe40 	call	2dbe4 <alt_get_errno>
   2dca0:	1007883a 	mov	r3,r2
   2dca4:	00801444 	movi	r2,81
   2dca8:	18800015 	stw	r2,0(r3)
    return 0;
   2dcac:	0005883a 	mov	r2,zero
  }
}
   2dcb0:	e037883a 	mov	sp,fp
   2dcb4:	dfc00117 	ldw	ra,4(sp)
   2dcb8:	df000017 	ldw	fp,0(sp)
   2dcbc:	dec00204 	addi	sp,sp,8
   2dcc0:	f800283a 	ret

0002dcc4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2dcc4:	defffc04 	addi	sp,sp,-16
   2dcc8:	df000315 	stw	fp,12(sp)
   2dccc:	df000304 	addi	fp,sp,12
   2dcd0:	e13ffd15 	stw	r4,-12(fp)
   2dcd4:	e17ffe15 	stw	r5,-8(fp)
   2dcd8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2dcdc:	e0fffe17 	ldw	r3,-8(fp)
   2dce0:	e0bffd17 	ldw	r2,-12(fp)
   2dce4:	18800c26 	beq	r3,r2,2dd18 <alt_load_section+0x54>
  {
    while( to != end )
   2dce8:	00000806 	br	2dd0c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2dcec:	e0bffe17 	ldw	r2,-8(fp)
   2dcf0:	10c00104 	addi	r3,r2,4
   2dcf4:	e0fffe15 	stw	r3,-8(fp)
   2dcf8:	e0fffd17 	ldw	r3,-12(fp)
   2dcfc:	19000104 	addi	r4,r3,4
   2dd00:	e13ffd15 	stw	r4,-12(fp)
   2dd04:	18c00017 	ldw	r3,0(r3)
   2dd08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2dd0c:	e0fffe17 	ldw	r3,-8(fp)
   2dd10:	e0bfff17 	ldw	r2,-4(fp)
   2dd14:	18bff51e 	bne	r3,r2,2dcec <__alt_data_end+0xfffedcec>
    {
      *to++ = *from++;
    }
  }
}
   2dd18:	0001883a 	nop
   2dd1c:	e037883a 	mov	sp,fp
   2dd20:	df000017 	ldw	fp,0(sp)
   2dd24:	dec00104 	addi	sp,sp,4
   2dd28:	f800283a 	ret

0002dd2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2dd2c:	defffe04 	addi	sp,sp,-8
   2dd30:	dfc00115 	stw	ra,4(sp)
   2dd34:	df000015 	stw	fp,0(sp)
   2dd38:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2dd3c:	018000f4 	movhi	r6,3
   2dd40:	318b0404 	addi	r6,r6,11280
   2dd44:	014000f4 	movhi	r5,3
   2dd48:	29441704 	addi	r5,r5,4188
   2dd4c:	010000f4 	movhi	r4,3
   2dd50:	210b0404 	addi	r4,r4,11280
   2dd54:	002dcc40 	call	2dcc4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2dd58:	018000b4 	movhi	r6,2
   2dd5c:	31809104 	addi	r6,r6,580
   2dd60:	014000b4 	movhi	r5,2
   2dd64:	29400804 	addi	r5,r5,32
   2dd68:	010000b4 	movhi	r4,2
   2dd6c:	21000804 	addi	r4,r4,32
   2dd70:	002dcc40 	call	2dcc4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2dd74:	018000f4 	movhi	r6,3
   2dd78:	31841704 	addi	r6,r6,4188
   2dd7c:	014000f4 	movhi	r5,3
   2dd80:	29429a04 	addi	r5,r5,2664
   2dd84:	010000f4 	movhi	r4,3
   2dd88:	21029a04 	addi	r4,r4,2664
   2dd8c:	002dcc40 	call	2dcc4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2dd90:	002fba80 	call	2fba8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2dd94:	002ffcc0 	call	2ffcc <alt_icache_flush_all>
}
   2dd98:	0001883a 	nop
   2dd9c:	e037883a 	mov	sp,fp
   2dda0:	dfc00117 	ldw	ra,4(sp)
   2dda4:	df000017 	ldw	fp,0(sp)
   2dda8:	dec00204 	addi	sp,sp,8
   2ddac:	f800283a 	ret

0002ddb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ddb0:	defffe04 	addi	sp,sp,-8
   2ddb4:	dfc00115 	stw	ra,4(sp)
   2ddb8:	df000015 	stw	fp,0(sp)
   2ddbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ddc0:	d0a00c17 	ldw	r2,-32720(gp)
   2ddc4:	10000326 	beq	r2,zero,2ddd4 <alt_get_errno+0x24>
   2ddc8:	d0a00c17 	ldw	r2,-32720(gp)
   2ddcc:	103ee83a 	callr	r2
   2ddd0:	00000106 	br	2ddd8 <alt_get_errno+0x28>
   2ddd4:	d0a6fe04 	addi	r2,gp,-25608
}
   2ddd8:	e037883a 	mov	sp,fp
   2dddc:	dfc00117 	ldw	ra,4(sp)
   2dde0:	df000017 	ldw	fp,0(sp)
   2dde4:	dec00204 	addi	sp,sp,8
   2dde8:	f800283a 	ret

0002ddec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2ddec:	defff904 	addi	sp,sp,-28
   2ddf0:	dfc00615 	stw	ra,24(sp)
   2ddf4:	df000515 	stw	fp,20(sp)
   2ddf8:	df000504 	addi	fp,sp,20
   2ddfc:	e13ffd15 	stw	r4,-12(fp)
   2de00:	e17ffe15 	stw	r5,-8(fp)
   2de04:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2de08:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2de0c:	e0bffd17 	ldw	r2,-12(fp)
   2de10:	10000616 	blt	r2,zero,2de2c <lseek+0x40>
   2de14:	e0bffd17 	ldw	r2,-12(fp)
   2de18:	10c00324 	muli	r3,r2,12
   2de1c:	008000f4 	movhi	r2,3
   2de20:	10864a04 	addi	r2,r2,6440
   2de24:	1885883a 	add	r2,r3,r2
   2de28:	00000106 	br	2de30 <lseek+0x44>
   2de2c:	0005883a 	mov	r2,zero
   2de30:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2de34:	e0bffc17 	ldw	r2,-16(fp)
   2de38:	10001026 	beq	r2,zero,2de7c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2de3c:	e0bffc17 	ldw	r2,-16(fp)
   2de40:	10800017 	ldw	r2,0(r2)
   2de44:	10800717 	ldw	r2,28(r2)
   2de48:	10000926 	beq	r2,zero,2de70 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2de4c:	e0bffc17 	ldw	r2,-16(fp)
   2de50:	10800017 	ldw	r2,0(r2)
   2de54:	10800717 	ldw	r2,28(r2)
   2de58:	e1bfff17 	ldw	r6,-4(fp)
   2de5c:	e17ffe17 	ldw	r5,-8(fp)
   2de60:	e13ffc17 	ldw	r4,-16(fp)
   2de64:	103ee83a 	callr	r2
   2de68:	e0bffb15 	stw	r2,-20(fp)
   2de6c:	00000506 	br	2de84 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2de70:	00bfde84 	movi	r2,-134
   2de74:	e0bffb15 	stw	r2,-20(fp)
   2de78:	00000206 	br	2de84 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2de7c:	00bfebc4 	movi	r2,-81
   2de80:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2de84:	e0bffb17 	ldw	r2,-20(fp)
   2de88:	1000070e 	bge	r2,zero,2dea8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2de8c:	002ddb00 	call	2ddb0 <alt_get_errno>
   2de90:	1007883a 	mov	r3,r2
   2de94:	e0bffb17 	ldw	r2,-20(fp)
   2de98:	0085c83a 	sub	r2,zero,r2
   2de9c:	18800015 	stw	r2,0(r3)
    rc = -1;
   2dea0:	00bfffc4 	movi	r2,-1
   2dea4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2dea8:	e0bffb17 	ldw	r2,-20(fp)
}
   2deac:	e037883a 	mov	sp,fp
   2deb0:	dfc00117 	ldw	ra,4(sp)
   2deb4:	df000017 	ldw	fp,0(sp)
   2deb8:	dec00204 	addi	sp,sp,8
   2debc:	f800283a 	ret

0002dec0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2dec0:	defffd04 	addi	sp,sp,-12
   2dec4:	dfc00215 	stw	ra,8(sp)
   2dec8:	df000115 	stw	fp,4(sp)
   2decc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2ded0:	0009883a 	mov	r4,zero
   2ded4:	002e58c0 	call	2e58c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2ded8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2dedc:	002e5c40 	call	2e5c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2dee0:	018000f4 	movhi	r6,3
   2dee4:	31840c04 	addi	r6,r6,4144
   2dee8:	014000f4 	movhi	r5,3
   2deec:	29440c04 	addi	r5,r5,4144
   2def0:	010000f4 	movhi	r4,3
   2def4:	21040c04 	addi	r4,r4,4144
   2def8:	00303640 	call	30364 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2defc:	002fcd00 	call	2fcd0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2df00:	010000f4 	movhi	r4,3
   2df04:	213f4c04 	addi	r4,r4,-720
   2df08:	00306d40 	call	306d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2df0c:	d0a70517 	ldw	r2,-25580(gp)
   2df10:	d0e70617 	ldw	r3,-25576(gp)
   2df14:	d1270717 	ldw	r4,-25572(gp)
   2df18:	200d883a 	mov	r6,r4
   2df1c:	180b883a 	mov	r5,r3
   2df20:	1009883a 	mov	r4,r2
   2df24:	00202900 	call	20290 <main>
   2df28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2df2c:	01000044 	movi	r4,1
   2df30:	002d9fc0 	call	2d9fc <close>
  exit (result);
   2df34:	e13fff17 	ldw	r4,-4(fp)
   2df38:	00306e80 	call	306e8 <exit>

0002df3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2df3c:	defffe04 	addi	sp,sp,-8
   2df40:	df000115 	stw	fp,4(sp)
   2df44:	df000104 	addi	fp,sp,4
   2df48:	e13fff15 	stw	r4,-4(fp)
}
   2df4c:	0001883a 	nop
   2df50:	e037883a 	mov	sp,fp
   2df54:	df000017 	ldw	fp,0(sp)
   2df58:	dec00104 	addi	sp,sp,4
   2df5c:	f800283a 	ret

0002df60 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2df60:	defffe04 	addi	sp,sp,-8
   2df64:	df000115 	stw	fp,4(sp)
   2df68:	df000104 	addi	fp,sp,4
   2df6c:	e13fff15 	stw	r4,-4(fp)
}
   2df70:	0001883a 	nop
   2df74:	e037883a 	mov	sp,fp
   2df78:	df000017 	ldw	fp,0(sp)
   2df7c:	dec00104 	addi	sp,sp,4
   2df80:	f800283a 	ret

0002df84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2df84:	defffe04 	addi	sp,sp,-8
   2df88:	dfc00115 	stw	ra,4(sp)
   2df8c:	df000015 	stw	fp,0(sp)
   2df90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2df94:	d0a00c17 	ldw	r2,-32720(gp)
   2df98:	10000326 	beq	r2,zero,2dfa8 <alt_get_errno+0x24>
   2df9c:	d0a00c17 	ldw	r2,-32720(gp)
   2dfa0:	103ee83a 	callr	r2
   2dfa4:	00000106 	br	2dfac <alt_get_errno+0x28>
   2dfa8:	d0a6fe04 	addi	r2,gp,-25608
}
   2dfac:	e037883a 	mov	sp,fp
   2dfb0:	dfc00117 	ldw	ra,4(sp)
   2dfb4:	df000017 	ldw	fp,0(sp)
   2dfb8:	dec00204 	addi	sp,sp,8
   2dfbc:	f800283a 	ret

0002dfc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2dfc0:	defffd04 	addi	sp,sp,-12
   2dfc4:	df000215 	stw	fp,8(sp)
   2dfc8:	df000204 	addi	fp,sp,8
   2dfcc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2dfd0:	e0bfff17 	ldw	r2,-4(fp)
   2dfd4:	10800217 	ldw	r2,8(r2)
   2dfd8:	10d00034 	orhi	r3,r2,16384
   2dfdc:	e0bfff17 	ldw	r2,-4(fp)
   2dfe0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2dfe4:	e03ffe15 	stw	zero,-8(fp)
   2dfe8:	00001d06 	br	2e060 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2dfec:	008000f4 	movhi	r2,3
   2dff0:	10864a04 	addi	r2,r2,6440
   2dff4:	e0fffe17 	ldw	r3,-8(fp)
   2dff8:	18c00324 	muli	r3,r3,12
   2dffc:	10c5883a 	add	r2,r2,r3
   2e000:	10c00017 	ldw	r3,0(r2)
   2e004:	e0bfff17 	ldw	r2,-4(fp)
   2e008:	10800017 	ldw	r2,0(r2)
   2e00c:	1880111e 	bne	r3,r2,2e054 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2e010:	008000f4 	movhi	r2,3
   2e014:	10864a04 	addi	r2,r2,6440
   2e018:	e0fffe17 	ldw	r3,-8(fp)
   2e01c:	18c00324 	muli	r3,r3,12
   2e020:	10c5883a 	add	r2,r2,r3
   2e024:	10800204 	addi	r2,r2,8
   2e028:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2e02c:	1000090e 	bge	r2,zero,2e054 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2e030:	e0bffe17 	ldw	r2,-8(fp)
   2e034:	10c00324 	muli	r3,r2,12
   2e038:	008000f4 	movhi	r2,3
   2e03c:	10864a04 	addi	r2,r2,6440
   2e040:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2e044:	e0bfff17 	ldw	r2,-4(fp)
   2e048:	18800226 	beq	r3,r2,2e054 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2e04c:	00bffcc4 	movi	r2,-13
   2e050:	00000806 	br	2e074 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2e054:	e0bffe17 	ldw	r2,-8(fp)
   2e058:	10800044 	addi	r2,r2,1
   2e05c:	e0bffe15 	stw	r2,-8(fp)
   2e060:	d0a00b17 	ldw	r2,-32724(gp)
   2e064:	1007883a 	mov	r3,r2
   2e068:	e0bffe17 	ldw	r2,-8(fp)
   2e06c:	18bfdf2e 	bgeu	r3,r2,2dfec <__alt_data_end+0xfffedfec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2e070:	0005883a 	mov	r2,zero
}
   2e074:	e037883a 	mov	sp,fp
   2e078:	df000017 	ldw	fp,0(sp)
   2e07c:	dec00104 	addi	sp,sp,4
   2e080:	f800283a 	ret

0002e084 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2e084:	defff604 	addi	sp,sp,-40
   2e088:	dfc00915 	stw	ra,36(sp)
   2e08c:	df000815 	stw	fp,32(sp)
   2e090:	df000804 	addi	fp,sp,32
   2e094:	e13ffd15 	stw	r4,-12(fp)
   2e098:	e17ffe15 	stw	r5,-8(fp)
   2e09c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2e0a0:	00bfffc4 	movi	r2,-1
   2e0a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2e0a8:	00bffb44 	movi	r2,-19
   2e0ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2e0b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2e0b4:	d1600904 	addi	r5,gp,-32732
   2e0b8:	e13ffd17 	ldw	r4,-12(fp)
   2e0bc:	002fd900 	call	2fd90 <alt_find_dev>
   2e0c0:	e0bff815 	stw	r2,-32(fp)
   2e0c4:	e0bff817 	ldw	r2,-32(fp)
   2e0c8:	1000051e 	bne	r2,zero,2e0e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2e0cc:	e13ffd17 	ldw	r4,-12(fp)
   2e0d0:	002fe200 	call	2fe20 <alt_find_file>
   2e0d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2e0d8:	00800044 	movi	r2,1
   2e0dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2e0e0:	e0bff817 	ldw	r2,-32(fp)
   2e0e4:	10002926 	beq	r2,zero,2e18c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2e0e8:	e13ff817 	ldw	r4,-32(fp)
   2e0ec:	002ff280 	call	2ff28 <alt_get_fd>
   2e0f0:	e0bff915 	stw	r2,-28(fp)
   2e0f4:	e0bff917 	ldw	r2,-28(fp)
   2e0f8:	1000030e 	bge	r2,zero,2e108 <open+0x84>
    {
      status = index;
   2e0fc:	e0bff917 	ldw	r2,-28(fp)
   2e100:	e0bffa15 	stw	r2,-24(fp)
   2e104:	00002306 	br	2e194 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   2e108:	e0bff917 	ldw	r2,-28(fp)
   2e10c:	10c00324 	muli	r3,r2,12
   2e110:	008000f4 	movhi	r2,3
   2e114:	10864a04 	addi	r2,r2,6440
   2e118:	1885883a 	add	r2,r3,r2
   2e11c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2e120:	e0fffe17 	ldw	r3,-8(fp)
   2e124:	00900034 	movhi	r2,16384
   2e128:	10bfffc4 	addi	r2,r2,-1
   2e12c:	1886703a 	and	r3,r3,r2
   2e130:	e0bffc17 	ldw	r2,-16(fp)
   2e134:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2e138:	e0bffb17 	ldw	r2,-20(fp)
   2e13c:	1000051e 	bne	r2,zero,2e154 <open+0xd0>
   2e140:	e13ffc17 	ldw	r4,-16(fp)
   2e144:	002dfc00 	call	2dfc0 <alt_file_locked>
   2e148:	e0bffa15 	stw	r2,-24(fp)
   2e14c:	e0bffa17 	ldw	r2,-24(fp)
   2e150:	10001016 	blt	r2,zero,2e194 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2e154:	e0bff817 	ldw	r2,-32(fp)
   2e158:	10800317 	ldw	r2,12(r2)
   2e15c:	10000826 	beq	r2,zero,2e180 <open+0xfc>
   2e160:	e0bff817 	ldw	r2,-32(fp)
   2e164:	10800317 	ldw	r2,12(r2)
   2e168:	e1ffff17 	ldw	r7,-4(fp)
   2e16c:	e1bffe17 	ldw	r6,-8(fp)
   2e170:	e17ffd17 	ldw	r5,-12(fp)
   2e174:	e13ffc17 	ldw	r4,-16(fp)
   2e178:	103ee83a 	callr	r2
   2e17c:	00000106 	br	2e184 <open+0x100>
   2e180:	0005883a 	mov	r2,zero
   2e184:	e0bffa15 	stw	r2,-24(fp)
   2e188:	00000206 	br	2e194 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2e18c:	00bffb44 	movi	r2,-19
   2e190:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2e194:	e0bffa17 	ldw	r2,-24(fp)
   2e198:	1000090e 	bge	r2,zero,2e1c0 <open+0x13c>
  {
    alt_release_fd (index);  
   2e19c:	e13ff917 	ldw	r4,-28(fp)
   2e1a0:	002e3100 	call	2e310 <alt_release_fd>
    ALT_ERRNO = -status;
   2e1a4:	002df840 	call	2df84 <alt_get_errno>
   2e1a8:	1007883a 	mov	r3,r2
   2e1ac:	e0bffa17 	ldw	r2,-24(fp)
   2e1b0:	0085c83a 	sub	r2,zero,r2
   2e1b4:	18800015 	stw	r2,0(r3)
    return -1;
   2e1b8:	00bfffc4 	movi	r2,-1
   2e1bc:	00000106 	br	2e1c4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   2e1c0:	e0bff917 	ldw	r2,-28(fp)
}
   2e1c4:	e037883a 	mov	sp,fp
   2e1c8:	dfc00117 	ldw	ra,4(sp)
   2e1cc:	df000017 	ldw	fp,0(sp)
   2e1d0:	dec00204 	addi	sp,sp,8
   2e1d4:	f800283a 	ret

0002e1d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e1d8:	defffe04 	addi	sp,sp,-8
   2e1dc:	dfc00115 	stw	ra,4(sp)
   2e1e0:	df000015 	stw	fp,0(sp)
   2e1e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e1e8:	d0a00c17 	ldw	r2,-32720(gp)
   2e1ec:	10000326 	beq	r2,zero,2e1fc <alt_get_errno+0x24>
   2e1f0:	d0a00c17 	ldw	r2,-32720(gp)
   2e1f4:	103ee83a 	callr	r2
   2e1f8:	00000106 	br	2e200 <alt_get_errno+0x28>
   2e1fc:	d0a6fe04 	addi	r2,gp,-25608
}
   2e200:	e037883a 	mov	sp,fp
   2e204:	dfc00117 	ldw	ra,4(sp)
   2e208:	df000017 	ldw	fp,0(sp)
   2e20c:	dec00204 	addi	sp,sp,8
   2e210:	f800283a 	ret

0002e214 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2e214:	defff904 	addi	sp,sp,-28
   2e218:	dfc00615 	stw	ra,24(sp)
   2e21c:	df000515 	stw	fp,20(sp)
   2e220:	df000504 	addi	fp,sp,20
   2e224:	e13ffd15 	stw	r4,-12(fp)
   2e228:	e17ffe15 	stw	r5,-8(fp)
   2e22c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e230:	e0bffd17 	ldw	r2,-12(fp)
   2e234:	10000616 	blt	r2,zero,2e250 <read+0x3c>
   2e238:	e0bffd17 	ldw	r2,-12(fp)
   2e23c:	10c00324 	muli	r3,r2,12
   2e240:	008000f4 	movhi	r2,3
   2e244:	10864a04 	addi	r2,r2,6440
   2e248:	1885883a 	add	r2,r3,r2
   2e24c:	00000106 	br	2e254 <read+0x40>
   2e250:	0005883a 	mov	r2,zero
   2e254:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e258:	e0bffb17 	ldw	r2,-20(fp)
   2e25c:	10002226 	beq	r2,zero,2e2e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2e260:	e0bffb17 	ldw	r2,-20(fp)
   2e264:	10800217 	ldw	r2,8(r2)
   2e268:	108000cc 	andi	r2,r2,3
   2e26c:	10800060 	cmpeqi	r2,r2,1
   2e270:	1000181e 	bne	r2,zero,2e2d4 <read+0xc0>
        (fd->dev->read))
   2e274:	e0bffb17 	ldw	r2,-20(fp)
   2e278:	10800017 	ldw	r2,0(r2)
   2e27c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2e280:	10001426 	beq	r2,zero,2e2d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2e284:	e0bffb17 	ldw	r2,-20(fp)
   2e288:	10800017 	ldw	r2,0(r2)
   2e28c:	10800517 	ldw	r2,20(r2)
   2e290:	e0ffff17 	ldw	r3,-4(fp)
   2e294:	180d883a 	mov	r6,r3
   2e298:	e17ffe17 	ldw	r5,-8(fp)
   2e29c:	e13ffb17 	ldw	r4,-20(fp)
   2e2a0:	103ee83a 	callr	r2
   2e2a4:	e0bffc15 	stw	r2,-16(fp)
   2e2a8:	e0bffc17 	ldw	r2,-16(fp)
   2e2ac:	1000070e 	bge	r2,zero,2e2cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2e2b0:	002e1d80 	call	2e1d8 <alt_get_errno>
   2e2b4:	1007883a 	mov	r3,r2
   2e2b8:	e0bffc17 	ldw	r2,-16(fp)
   2e2bc:	0085c83a 	sub	r2,zero,r2
   2e2c0:	18800015 	stw	r2,0(r3)
          return -1;
   2e2c4:	00bfffc4 	movi	r2,-1
   2e2c8:	00000c06 	br	2e2fc <read+0xe8>
        }
        return rval;
   2e2cc:	e0bffc17 	ldw	r2,-16(fp)
   2e2d0:	00000a06 	br	2e2fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2e2d4:	002e1d80 	call	2e1d8 <alt_get_errno>
   2e2d8:	1007883a 	mov	r3,r2
   2e2dc:	00800344 	movi	r2,13
   2e2e0:	18800015 	stw	r2,0(r3)
   2e2e4:	00000406 	br	2e2f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2e2e8:	002e1d80 	call	2e1d8 <alt_get_errno>
   2e2ec:	1007883a 	mov	r3,r2
   2e2f0:	00801444 	movi	r2,81
   2e2f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e2f8:	00bfffc4 	movi	r2,-1
}
   2e2fc:	e037883a 	mov	sp,fp
   2e300:	dfc00117 	ldw	ra,4(sp)
   2e304:	df000017 	ldw	fp,0(sp)
   2e308:	dec00204 	addi	sp,sp,8
   2e30c:	f800283a 	ret

0002e310 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2e310:	defffe04 	addi	sp,sp,-8
   2e314:	df000115 	stw	fp,4(sp)
   2e318:	df000104 	addi	fp,sp,4
   2e31c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2e320:	e0bfff17 	ldw	r2,-4(fp)
   2e324:	108000d0 	cmplti	r2,r2,3
   2e328:	10000d1e 	bne	r2,zero,2e360 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2e32c:	008000f4 	movhi	r2,3
   2e330:	10864a04 	addi	r2,r2,6440
   2e334:	e0ffff17 	ldw	r3,-4(fp)
   2e338:	18c00324 	muli	r3,r3,12
   2e33c:	10c5883a 	add	r2,r2,r3
   2e340:	10800204 	addi	r2,r2,8
   2e344:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2e348:	008000f4 	movhi	r2,3
   2e34c:	10864a04 	addi	r2,r2,6440
   2e350:	e0ffff17 	ldw	r3,-4(fp)
   2e354:	18c00324 	muli	r3,r3,12
   2e358:	10c5883a 	add	r2,r2,r3
   2e35c:	10000015 	stw	zero,0(r2)
  }
}
   2e360:	0001883a 	nop
   2e364:	e037883a 	mov	sp,fp
   2e368:	df000017 	ldw	fp,0(sp)
   2e36c:	dec00104 	addi	sp,sp,4
   2e370:	f800283a 	ret

0002e374 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2e374:	defff904 	addi	sp,sp,-28
   2e378:	df000615 	stw	fp,24(sp)
   2e37c:	df000604 	addi	fp,sp,24
   2e380:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e384:	0005303a 	rdctl	r2,status
   2e388:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e38c:	e0fffe17 	ldw	r3,-8(fp)
   2e390:	00bfff84 	movi	r2,-2
   2e394:	1884703a 	and	r2,r3,r2
   2e398:	1001703a 	wrctl	status,r2
  
  return context;
   2e39c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2e3a0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2e3a4:	d0a00d17 	ldw	r2,-32716(gp)
   2e3a8:	10c000c4 	addi	r3,r2,3
   2e3ac:	00bfff04 	movi	r2,-4
   2e3b0:	1884703a 	and	r2,r3,r2
   2e3b4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2e3b8:	d0e00d17 	ldw	r3,-32716(gp)
   2e3bc:	e0bfff17 	ldw	r2,-4(fp)
   2e3c0:	1887883a 	add	r3,r3,r2
   2e3c4:	00800134 	movhi	r2,4
   2e3c8:	10800004 	addi	r2,r2,0
   2e3cc:	10c0062e 	bgeu	r2,r3,2e3e8 <sbrk+0x74>
   2e3d0:	e0bffb17 	ldw	r2,-20(fp)
   2e3d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e3d8:	e0bffa17 	ldw	r2,-24(fp)
   2e3dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2e3e0:	00bfffc4 	movi	r2,-1
   2e3e4:	00000b06 	br	2e414 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2e3e8:	d0a00d17 	ldw	r2,-32716(gp)
   2e3ec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2e3f0:	d0e00d17 	ldw	r3,-32716(gp)
   2e3f4:	e0bfff17 	ldw	r2,-4(fp)
   2e3f8:	1885883a 	add	r2,r3,r2
   2e3fc:	d0a00d15 	stw	r2,-32716(gp)
   2e400:	e0bffb17 	ldw	r2,-20(fp)
   2e404:	e0bffc15 	stw	r2,-16(fp)
   2e408:	e0bffc17 	ldw	r2,-16(fp)
   2e40c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2e410:	e0bffd17 	ldw	r2,-12(fp)
} 
   2e414:	e037883a 	mov	sp,fp
   2e418:	df000017 	ldw	fp,0(sp)
   2e41c:	dec00104 	addi	sp,sp,4
   2e420:	f800283a 	ret

0002e424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e424:	defffe04 	addi	sp,sp,-8
   2e428:	dfc00115 	stw	ra,4(sp)
   2e42c:	df000015 	stw	fp,0(sp)
   2e430:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e434:	d0a00c17 	ldw	r2,-32720(gp)
   2e438:	10000326 	beq	r2,zero,2e448 <alt_get_errno+0x24>
   2e43c:	d0a00c17 	ldw	r2,-32720(gp)
   2e440:	103ee83a 	callr	r2
   2e444:	00000106 	br	2e44c <alt_get_errno+0x28>
   2e448:	d0a6fe04 	addi	r2,gp,-25608
}
   2e44c:	e037883a 	mov	sp,fp
   2e450:	dfc00117 	ldw	ra,4(sp)
   2e454:	df000017 	ldw	fp,0(sp)
   2e458:	dec00204 	addi	sp,sp,8
   2e45c:	f800283a 	ret

0002e460 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2e460:	defff904 	addi	sp,sp,-28
   2e464:	dfc00615 	stw	ra,24(sp)
   2e468:	df000515 	stw	fp,20(sp)
   2e46c:	df000504 	addi	fp,sp,20
   2e470:	e13ffd15 	stw	r4,-12(fp)
   2e474:	e17ffe15 	stw	r5,-8(fp)
   2e478:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e47c:	e0bffd17 	ldw	r2,-12(fp)
   2e480:	10000616 	blt	r2,zero,2e49c <write+0x3c>
   2e484:	e0bffd17 	ldw	r2,-12(fp)
   2e488:	10c00324 	muli	r3,r2,12
   2e48c:	008000f4 	movhi	r2,3
   2e490:	10864a04 	addi	r2,r2,6440
   2e494:	1885883a 	add	r2,r3,r2
   2e498:	00000106 	br	2e4a0 <write+0x40>
   2e49c:	0005883a 	mov	r2,zero
   2e4a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e4a4:	e0bffb17 	ldw	r2,-20(fp)
   2e4a8:	10002126 	beq	r2,zero,2e530 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2e4ac:	e0bffb17 	ldw	r2,-20(fp)
   2e4b0:	10800217 	ldw	r2,8(r2)
   2e4b4:	108000cc 	andi	r2,r2,3
   2e4b8:	10001826 	beq	r2,zero,2e51c <write+0xbc>
   2e4bc:	e0bffb17 	ldw	r2,-20(fp)
   2e4c0:	10800017 	ldw	r2,0(r2)
   2e4c4:	10800617 	ldw	r2,24(r2)
   2e4c8:	10001426 	beq	r2,zero,2e51c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2e4cc:	e0bffb17 	ldw	r2,-20(fp)
   2e4d0:	10800017 	ldw	r2,0(r2)
   2e4d4:	10800617 	ldw	r2,24(r2)
   2e4d8:	e0ffff17 	ldw	r3,-4(fp)
   2e4dc:	180d883a 	mov	r6,r3
   2e4e0:	e17ffe17 	ldw	r5,-8(fp)
   2e4e4:	e13ffb17 	ldw	r4,-20(fp)
   2e4e8:	103ee83a 	callr	r2
   2e4ec:	e0bffc15 	stw	r2,-16(fp)
   2e4f0:	e0bffc17 	ldw	r2,-16(fp)
   2e4f4:	1000070e 	bge	r2,zero,2e514 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2e4f8:	002e4240 	call	2e424 <alt_get_errno>
   2e4fc:	1007883a 	mov	r3,r2
   2e500:	e0bffc17 	ldw	r2,-16(fp)
   2e504:	0085c83a 	sub	r2,zero,r2
   2e508:	18800015 	stw	r2,0(r3)
        return -1;
   2e50c:	00bfffc4 	movi	r2,-1
   2e510:	00000c06 	br	2e544 <write+0xe4>
      }
      return rval;
   2e514:	e0bffc17 	ldw	r2,-16(fp)
   2e518:	00000a06 	br	2e544 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2e51c:	002e4240 	call	2e424 <alt_get_errno>
   2e520:	1007883a 	mov	r3,r2
   2e524:	00800344 	movi	r2,13
   2e528:	18800015 	stw	r2,0(r3)
   2e52c:	00000406 	br	2e540 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e530:	002e4240 	call	2e424 <alt_get_errno>
   2e534:	1007883a 	mov	r3,r2
   2e538:	00801444 	movi	r2,81
   2e53c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e540:	00bfffc4 	movi	r2,-1
}
   2e544:	e037883a 	mov	sp,fp
   2e548:	dfc00117 	ldw	ra,4(sp)
   2e54c:	df000017 	ldw	fp,0(sp)
   2e550:	dec00204 	addi	sp,sp,8
   2e554:	f800283a 	ret

0002e558 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e558:	defffd04 	addi	sp,sp,-12
   2e55c:	dfc00215 	stw	ra,8(sp)
   2e560:	df000115 	stw	fp,4(sp)
   2e564:	df000104 	addi	fp,sp,4
   2e568:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e56c:	d1600904 	addi	r5,gp,-32732
   2e570:	e13fff17 	ldw	r4,-4(fp)
   2e574:	002fc2c0 	call	2fc2c <alt_dev_llist_insert>
}
   2e578:	e037883a 	mov	sp,fp
   2e57c:	dfc00117 	ldw	ra,4(sp)
   2e580:	df000017 	ldw	fp,0(sp)
   2e584:	dec00204 	addi	sp,sp,8
   2e588:	f800283a 	ret

0002e58c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e58c:	defffd04 	addi	sp,sp,-12
   2e590:	dfc00215 	stw	ra,8(sp)
   2e594:	df000115 	stw	fp,4(sp)
   2e598:	df000104 	addi	fp,sp,4
   2e59c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   2e5a0:	00305840 	call	30584 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e5a4:	00800044 	movi	r2,1
   2e5a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e5ac:	0001883a 	nop
   2e5b0:	e037883a 	mov	sp,fp
   2e5b4:	dfc00117 	ldw	ra,4(sp)
   2e5b8:	df000017 	ldw	fp,0(sp)
   2e5bc:	dec00204 	addi	sp,sp,8
   2e5c0:	f800283a 	ret

0002e5c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e5c4:	defffe04 	addi	sp,sp,-8
   2e5c8:	dfc00115 	stw	ra,4(sp)
   2e5cc:	df000015 	stw	fp,0(sp)
   2e5d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   2e5d4:	01c0fa04 	movi	r7,1000
   2e5d8:	018000c4 	movi	r6,3
   2e5dc:	000b883a 	mov	r5,zero
   2e5e0:	01000134 	movhi	r4,4
   2e5e4:	21040004 	addi	r4,r4,4096
   2e5e8:	002f1280 	call	2f128 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2e5ec:	01800084 	movi	r6,2
   2e5f0:	000b883a 	mov	r5,zero
   2e5f4:	010000f4 	movhi	r4,3
   2e5f8:	2106b404 	addi	r4,r4,6864
   2e5fc:	002e7ac0 	call	2e7ac <altera_avalon_jtag_uart_init>
   2e600:	010000f4 	movhi	r4,3
   2e604:	2106aa04 	addi	r4,r4,6824
   2e608:	002e5580 	call	2e558 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   2e60c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   2e610:	01800104 	movi	r6,4
   2e614:	000b883a 	mov	r5,zero
   2e618:	010000f4 	movhi	r4,3
   2e61c:	210acc04 	addi	r4,r4,11056
   2e620:	002f2b40 	call	2f2b4 <altera_avalon_uart_init>
   2e624:	010000f4 	movhi	r4,3
   2e628:	210ac204 	addi	r4,r4,11016
   2e62c:	002e5580 	call	2e558 <alt_dev_reg>
}
   2e630:	0001883a 	nop
   2e634:	e037883a 	mov	sp,fp
   2e638:	dfc00117 	ldw	ra,4(sp)
   2e63c:	df000017 	ldw	fp,0(sp)
   2e640:	dec00204 	addi	sp,sp,8
   2e644:	f800283a 	ret

0002e648 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e648:	defffa04 	addi	sp,sp,-24
   2e64c:	dfc00515 	stw	ra,20(sp)
   2e650:	df000415 	stw	fp,16(sp)
   2e654:	df000404 	addi	fp,sp,16
   2e658:	e13ffd15 	stw	r4,-12(fp)
   2e65c:	e17ffe15 	stw	r5,-8(fp)
   2e660:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e664:	e0bffd17 	ldw	r2,-12(fp)
   2e668:	10800017 	ldw	r2,0(r2)
   2e66c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2e670:	e0bffc17 	ldw	r2,-16(fp)
   2e674:	10c00a04 	addi	r3,r2,40
   2e678:	e0bffd17 	ldw	r2,-12(fp)
   2e67c:	10800217 	ldw	r2,8(r2)
   2e680:	100f883a 	mov	r7,r2
   2e684:	e1bfff17 	ldw	r6,-4(fp)
   2e688:	e17ffe17 	ldw	r5,-8(fp)
   2e68c:	1809883a 	mov	r4,r3
   2e690:	002ec700 	call	2ec70 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2e694:	e037883a 	mov	sp,fp
   2e698:	dfc00117 	ldw	ra,4(sp)
   2e69c:	df000017 	ldw	fp,0(sp)
   2e6a0:	dec00204 	addi	sp,sp,8
   2e6a4:	f800283a 	ret

0002e6a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e6a8:	defffa04 	addi	sp,sp,-24
   2e6ac:	dfc00515 	stw	ra,20(sp)
   2e6b0:	df000415 	stw	fp,16(sp)
   2e6b4:	df000404 	addi	fp,sp,16
   2e6b8:	e13ffd15 	stw	r4,-12(fp)
   2e6bc:	e17ffe15 	stw	r5,-8(fp)
   2e6c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e6c4:	e0bffd17 	ldw	r2,-12(fp)
   2e6c8:	10800017 	ldw	r2,0(r2)
   2e6cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2e6d0:	e0bffc17 	ldw	r2,-16(fp)
   2e6d4:	10c00a04 	addi	r3,r2,40
   2e6d8:	e0bffd17 	ldw	r2,-12(fp)
   2e6dc:	10800217 	ldw	r2,8(r2)
   2e6e0:	100f883a 	mov	r7,r2
   2e6e4:	e1bfff17 	ldw	r6,-4(fp)
   2e6e8:	e17ffe17 	ldw	r5,-8(fp)
   2e6ec:	1809883a 	mov	r4,r3
   2e6f0:	002ee8c0 	call	2ee8c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2e6f4:	e037883a 	mov	sp,fp
   2e6f8:	dfc00117 	ldw	ra,4(sp)
   2e6fc:	df000017 	ldw	fp,0(sp)
   2e700:	dec00204 	addi	sp,sp,8
   2e704:	f800283a 	ret

0002e708 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2e708:	defffc04 	addi	sp,sp,-16
   2e70c:	dfc00315 	stw	ra,12(sp)
   2e710:	df000215 	stw	fp,8(sp)
   2e714:	df000204 	addi	fp,sp,8
   2e718:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e71c:	e0bfff17 	ldw	r2,-4(fp)
   2e720:	10800017 	ldw	r2,0(r2)
   2e724:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2e728:	e0bffe17 	ldw	r2,-8(fp)
   2e72c:	10c00a04 	addi	r3,r2,40
   2e730:	e0bfff17 	ldw	r2,-4(fp)
   2e734:	10800217 	ldw	r2,8(r2)
   2e738:	100b883a 	mov	r5,r2
   2e73c:	1809883a 	mov	r4,r3
   2e740:	002eb180 	call	2eb18 <altera_avalon_jtag_uart_close>
}
   2e744:	e037883a 	mov	sp,fp
   2e748:	dfc00117 	ldw	ra,4(sp)
   2e74c:	df000017 	ldw	fp,0(sp)
   2e750:	dec00204 	addi	sp,sp,8
   2e754:	f800283a 	ret

0002e758 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2e758:	defffa04 	addi	sp,sp,-24
   2e75c:	dfc00515 	stw	ra,20(sp)
   2e760:	df000415 	stw	fp,16(sp)
   2e764:	df000404 	addi	fp,sp,16
   2e768:	e13ffd15 	stw	r4,-12(fp)
   2e76c:	e17ffe15 	stw	r5,-8(fp)
   2e770:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2e774:	e0bffd17 	ldw	r2,-12(fp)
   2e778:	10800017 	ldw	r2,0(r2)
   2e77c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2e780:	e0bffc17 	ldw	r2,-16(fp)
   2e784:	10800a04 	addi	r2,r2,40
   2e788:	e1bfff17 	ldw	r6,-4(fp)
   2e78c:	e17ffe17 	ldw	r5,-8(fp)
   2e790:	1009883a 	mov	r4,r2
   2e794:	002eb800 	call	2eb80 <altera_avalon_jtag_uart_ioctl>
}
   2e798:	e037883a 	mov	sp,fp
   2e79c:	dfc00117 	ldw	ra,4(sp)
   2e7a0:	df000017 	ldw	fp,0(sp)
   2e7a4:	dec00204 	addi	sp,sp,8
   2e7a8:	f800283a 	ret

0002e7ac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2e7ac:	defffa04 	addi	sp,sp,-24
   2e7b0:	dfc00515 	stw	ra,20(sp)
   2e7b4:	df000415 	stw	fp,16(sp)
   2e7b8:	df000404 	addi	fp,sp,16
   2e7bc:	e13ffd15 	stw	r4,-12(fp)
   2e7c0:	e17ffe15 	stw	r5,-8(fp)
   2e7c4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e7c8:	e0bffd17 	ldw	r2,-12(fp)
   2e7cc:	00c00044 	movi	r3,1
   2e7d0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2e7d4:	e0bffd17 	ldw	r2,-12(fp)
   2e7d8:	10800017 	ldw	r2,0(r2)
   2e7dc:	10800104 	addi	r2,r2,4
   2e7e0:	1007883a 	mov	r3,r2
   2e7e4:	e0bffd17 	ldw	r2,-12(fp)
   2e7e8:	10800817 	ldw	r2,32(r2)
   2e7ec:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2e7f0:	e0bffe17 	ldw	r2,-8(fp)
   2e7f4:	e0ffff17 	ldw	r3,-4(fp)
   2e7f8:	d8000015 	stw	zero,0(sp)
   2e7fc:	e1fffd17 	ldw	r7,-12(fp)
   2e800:	018000f4 	movhi	r6,3
   2e804:	31ba1b04 	addi	r6,r6,-6036
   2e808:	180b883a 	mov	r5,r3
   2e80c:	1009883a 	mov	r4,r2
   2e810:	00300000 	call	30000 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2e814:	e0bffd17 	ldw	r2,-12(fp)
   2e818:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2e81c:	e0bffd17 	ldw	r2,-12(fp)
   2e820:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e824:	d0e70917 	ldw	r3,-25564(gp)
   2e828:	e1fffd17 	ldw	r7,-12(fp)
   2e82c:	018000f4 	movhi	r6,3
   2e830:	31ba9e04 	addi	r6,r6,-5512
   2e834:	180b883a 	mov	r5,r3
   2e838:	1009883a 	mov	r4,r2
   2e83c:	002fa7c0 	call	2fa7c <alt_alarm_start>
   2e840:	1000040e 	bge	r2,zero,2e854 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2e844:	e0fffd17 	ldw	r3,-12(fp)
   2e848:	00a00034 	movhi	r2,32768
   2e84c:	10bfffc4 	addi	r2,r2,-1
   2e850:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2e854:	0001883a 	nop
   2e858:	e037883a 	mov	sp,fp
   2e85c:	dfc00117 	ldw	ra,4(sp)
   2e860:	df000017 	ldw	fp,0(sp)
   2e864:	dec00204 	addi	sp,sp,8
   2e868:	f800283a 	ret

0002e86c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2e86c:	defff804 	addi	sp,sp,-32
   2e870:	df000715 	stw	fp,28(sp)
   2e874:	df000704 	addi	fp,sp,28
   2e878:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2e87c:	e0bfff17 	ldw	r2,-4(fp)
   2e880:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2e884:	e0bffb17 	ldw	r2,-20(fp)
   2e888:	10800017 	ldw	r2,0(r2)
   2e88c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e890:	e0bffc17 	ldw	r2,-16(fp)
   2e894:	10800104 	addi	r2,r2,4
   2e898:	10800037 	ldwio	r2,0(r2)
   2e89c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2e8a0:	e0bffd17 	ldw	r2,-12(fp)
   2e8a4:	1080c00c 	andi	r2,r2,768
   2e8a8:	10006d26 	beq	r2,zero,2ea60 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2e8ac:	e0bffd17 	ldw	r2,-12(fp)
   2e8b0:	1080400c 	andi	r2,r2,256
   2e8b4:	10003526 	beq	r2,zero,2e98c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2e8b8:	00800074 	movhi	r2,1
   2e8bc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e8c0:	e0bffb17 	ldw	r2,-20(fp)
   2e8c4:	10800a17 	ldw	r2,40(r2)
   2e8c8:	10800044 	addi	r2,r2,1
   2e8cc:	1081ffcc 	andi	r2,r2,2047
   2e8d0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2e8d4:	e0bffb17 	ldw	r2,-20(fp)
   2e8d8:	10c00b17 	ldw	r3,44(r2)
   2e8dc:	e0bffe17 	ldw	r2,-8(fp)
   2e8e0:	18801526 	beq	r3,r2,2e938 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2e8e4:	e0bffc17 	ldw	r2,-16(fp)
   2e8e8:	10800037 	ldwio	r2,0(r2)
   2e8ec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2e8f0:	e0bff917 	ldw	r2,-28(fp)
   2e8f4:	10a0000c 	andi	r2,r2,32768
   2e8f8:	10001126 	beq	r2,zero,2e940 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2e8fc:	e0bffb17 	ldw	r2,-20(fp)
   2e900:	10800a17 	ldw	r2,40(r2)
   2e904:	e0fff917 	ldw	r3,-28(fp)
   2e908:	1809883a 	mov	r4,r3
   2e90c:	e0fffb17 	ldw	r3,-20(fp)
   2e910:	1885883a 	add	r2,r3,r2
   2e914:	10800e04 	addi	r2,r2,56
   2e918:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e91c:	e0bffb17 	ldw	r2,-20(fp)
   2e920:	10800a17 	ldw	r2,40(r2)
   2e924:	10800044 	addi	r2,r2,1
   2e928:	10c1ffcc 	andi	r3,r2,2047
   2e92c:	e0bffb17 	ldw	r2,-20(fp)
   2e930:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2e934:	003fe206 	br	2e8c0 <__alt_data_end+0xfffee8c0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2e938:	0001883a 	nop
   2e93c:	00000106 	br	2e944 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2e940:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2e944:	e0bff917 	ldw	r2,-28(fp)
   2e948:	10bfffec 	andhi	r2,r2,65535
   2e94c:	10000f26 	beq	r2,zero,2e98c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e950:	e0bffb17 	ldw	r2,-20(fp)
   2e954:	10c00817 	ldw	r3,32(r2)
   2e958:	00bfff84 	movi	r2,-2
   2e95c:	1886703a 	and	r3,r3,r2
   2e960:	e0bffb17 	ldw	r2,-20(fp)
   2e964:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2e968:	e0bffc17 	ldw	r2,-16(fp)
   2e96c:	10800104 	addi	r2,r2,4
   2e970:	1007883a 	mov	r3,r2
   2e974:	e0bffb17 	ldw	r2,-20(fp)
   2e978:	10800817 	ldw	r2,32(r2)
   2e97c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e980:	e0bffc17 	ldw	r2,-16(fp)
   2e984:	10800104 	addi	r2,r2,4
   2e988:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2e98c:	e0bffd17 	ldw	r2,-12(fp)
   2e990:	1080800c 	andi	r2,r2,512
   2e994:	103fbe26 	beq	r2,zero,2e890 <__alt_data_end+0xfffee890>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2e998:	e0bffd17 	ldw	r2,-12(fp)
   2e99c:	1004d43a 	srli	r2,r2,16
   2e9a0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e9a4:	00001406 	br	2e9f8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2e9a8:	e0bffc17 	ldw	r2,-16(fp)
   2e9ac:	e0fffb17 	ldw	r3,-20(fp)
   2e9b0:	18c00d17 	ldw	r3,52(r3)
   2e9b4:	e13ffb17 	ldw	r4,-20(fp)
   2e9b8:	20c7883a 	add	r3,r4,r3
   2e9bc:	18c20e04 	addi	r3,r3,2104
   2e9c0:	18c00003 	ldbu	r3,0(r3)
   2e9c4:	18c03fcc 	andi	r3,r3,255
   2e9c8:	18c0201c 	xori	r3,r3,128
   2e9cc:	18ffe004 	addi	r3,r3,-128
   2e9d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e9d4:	e0bffb17 	ldw	r2,-20(fp)
   2e9d8:	10800d17 	ldw	r2,52(r2)
   2e9dc:	10800044 	addi	r2,r2,1
   2e9e0:	10c1ffcc 	andi	r3,r2,2047
   2e9e4:	e0bffb17 	ldw	r2,-20(fp)
   2e9e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2e9ec:	e0bffa17 	ldw	r2,-24(fp)
   2e9f0:	10bfffc4 	addi	r2,r2,-1
   2e9f4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e9f8:	e0bffa17 	ldw	r2,-24(fp)
   2e9fc:	10000526 	beq	r2,zero,2ea14 <altera_avalon_jtag_uart_irq+0x1a8>
   2ea00:	e0bffb17 	ldw	r2,-20(fp)
   2ea04:	10c00d17 	ldw	r3,52(r2)
   2ea08:	e0bffb17 	ldw	r2,-20(fp)
   2ea0c:	10800c17 	ldw	r2,48(r2)
   2ea10:	18bfe51e 	bne	r3,r2,2e9a8 <__alt_data_end+0xfffee9a8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2ea14:	e0bffa17 	ldw	r2,-24(fp)
   2ea18:	103f9d26 	beq	r2,zero,2e890 <__alt_data_end+0xfffee890>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ea1c:	e0bffb17 	ldw	r2,-20(fp)
   2ea20:	10c00817 	ldw	r3,32(r2)
   2ea24:	00bfff44 	movi	r2,-3
   2ea28:	1886703a 	and	r3,r3,r2
   2ea2c:	e0bffb17 	ldw	r2,-20(fp)
   2ea30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ea34:	e0bffb17 	ldw	r2,-20(fp)
   2ea38:	10800017 	ldw	r2,0(r2)
   2ea3c:	10800104 	addi	r2,r2,4
   2ea40:	1007883a 	mov	r3,r2
   2ea44:	e0bffb17 	ldw	r2,-20(fp)
   2ea48:	10800817 	ldw	r2,32(r2)
   2ea4c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ea50:	e0bffc17 	ldw	r2,-16(fp)
   2ea54:	10800104 	addi	r2,r2,4
   2ea58:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2ea5c:	003f8c06 	br	2e890 <__alt_data_end+0xfffee890>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2ea60:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2ea64:	0001883a 	nop
   2ea68:	e037883a 	mov	sp,fp
   2ea6c:	df000017 	ldw	fp,0(sp)
   2ea70:	dec00104 	addi	sp,sp,4
   2ea74:	f800283a 	ret

0002ea78 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2ea78:	defff804 	addi	sp,sp,-32
   2ea7c:	df000715 	stw	fp,28(sp)
   2ea80:	df000704 	addi	fp,sp,28
   2ea84:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2ea88:	e0bffb17 	ldw	r2,-20(fp)
   2ea8c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2ea90:	e0bff917 	ldw	r2,-28(fp)
   2ea94:	10800017 	ldw	r2,0(r2)
   2ea98:	10800104 	addi	r2,r2,4
   2ea9c:	10800037 	ldwio	r2,0(r2)
   2eaa0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2eaa4:	e0bffa17 	ldw	r2,-24(fp)
   2eaa8:	1081000c 	andi	r2,r2,1024
   2eaac:	10000b26 	beq	r2,zero,2eadc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2eab0:	e0bff917 	ldw	r2,-28(fp)
   2eab4:	10800017 	ldw	r2,0(r2)
   2eab8:	10800104 	addi	r2,r2,4
   2eabc:	1007883a 	mov	r3,r2
   2eac0:	e0bff917 	ldw	r2,-28(fp)
   2eac4:	10800817 	ldw	r2,32(r2)
   2eac8:	10810014 	ori	r2,r2,1024
   2eacc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2ead0:	e0bff917 	ldw	r2,-28(fp)
   2ead4:	10000915 	stw	zero,36(r2)
   2ead8:	00000a06 	br	2eb04 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2eadc:	e0bff917 	ldw	r2,-28(fp)
   2eae0:	10c00917 	ldw	r3,36(r2)
   2eae4:	00a00034 	movhi	r2,32768
   2eae8:	10bfff04 	addi	r2,r2,-4
   2eaec:	10c00536 	bltu	r2,r3,2eb04 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2eaf0:	e0bff917 	ldw	r2,-28(fp)
   2eaf4:	10800917 	ldw	r2,36(r2)
   2eaf8:	10c00044 	addi	r3,r2,1
   2eafc:	e0bff917 	ldw	r2,-28(fp)
   2eb00:	10c00915 	stw	r3,36(r2)
   2eb04:	d0a70917 	ldw	r2,-25564(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2eb08:	e037883a 	mov	sp,fp
   2eb0c:	df000017 	ldw	fp,0(sp)
   2eb10:	dec00104 	addi	sp,sp,4
   2eb14:	f800283a 	ret

0002eb18 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2eb18:	defffd04 	addi	sp,sp,-12
   2eb1c:	df000215 	stw	fp,8(sp)
   2eb20:	df000204 	addi	fp,sp,8
   2eb24:	e13ffe15 	stw	r4,-8(fp)
   2eb28:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2eb2c:	00000506 	br	2eb44 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2eb30:	e0bfff17 	ldw	r2,-4(fp)
   2eb34:	1090000c 	andi	r2,r2,16384
   2eb38:	10000226 	beq	r2,zero,2eb44 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2eb3c:	00bffd44 	movi	r2,-11
   2eb40:	00000b06 	br	2eb70 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2eb44:	e0bffe17 	ldw	r2,-8(fp)
   2eb48:	10c00d17 	ldw	r3,52(r2)
   2eb4c:	e0bffe17 	ldw	r2,-8(fp)
   2eb50:	10800c17 	ldw	r2,48(r2)
   2eb54:	18800526 	beq	r3,r2,2eb6c <altera_avalon_jtag_uart_close+0x54>
   2eb58:	e0bffe17 	ldw	r2,-8(fp)
   2eb5c:	10c00917 	ldw	r3,36(r2)
   2eb60:	e0bffe17 	ldw	r2,-8(fp)
   2eb64:	10800117 	ldw	r2,4(r2)
   2eb68:	18bff136 	bltu	r3,r2,2eb30 <__alt_data_end+0xfffeeb30>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2eb6c:	0005883a 	mov	r2,zero
}
   2eb70:	e037883a 	mov	sp,fp
   2eb74:	df000017 	ldw	fp,0(sp)
   2eb78:	dec00104 	addi	sp,sp,4
   2eb7c:	f800283a 	ret

0002eb80 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2eb80:	defffa04 	addi	sp,sp,-24
   2eb84:	df000515 	stw	fp,20(sp)
   2eb88:	df000504 	addi	fp,sp,20
   2eb8c:	e13ffd15 	stw	r4,-12(fp)
   2eb90:	e17ffe15 	stw	r5,-8(fp)
   2eb94:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2eb98:	00bff9c4 	movi	r2,-25
   2eb9c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2eba0:	e0bffe17 	ldw	r2,-8(fp)
   2eba4:	10da8060 	cmpeqi	r3,r2,27137
   2eba8:	1800031e 	bne	r3,zero,2ebb8 <altera_avalon_jtag_uart_ioctl+0x38>
   2ebac:	109a80a0 	cmpeqi	r2,r2,27138
   2ebb0:	1000181e 	bne	r2,zero,2ec14 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2ebb4:	00002906 	br	2ec5c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2ebb8:	e0bffd17 	ldw	r2,-12(fp)
   2ebbc:	10c00117 	ldw	r3,4(r2)
   2ebc0:	00a00034 	movhi	r2,32768
   2ebc4:	10bfffc4 	addi	r2,r2,-1
   2ebc8:	18802126 	beq	r3,r2,2ec50 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2ebcc:	e0bfff17 	ldw	r2,-4(fp)
   2ebd0:	10800017 	ldw	r2,0(r2)
   2ebd4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2ebd8:	e0bffc17 	ldw	r2,-16(fp)
   2ebdc:	10800090 	cmplti	r2,r2,2
   2ebe0:	1000061e 	bne	r2,zero,2ebfc <altera_avalon_jtag_uart_ioctl+0x7c>
   2ebe4:	e0fffc17 	ldw	r3,-16(fp)
   2ebe8:	00a00034 	movhi	r2,32768
   2ebec:	10bfffc4 	addi	r2,r2,-1
   2ebf0:	18800226 	beq	r3,r2,2ebfc <altera_avalon_jtag_uart_ioctl+0x7c>
   2ebf4:	e0bffc17 	ldw	r2,-16(fp)
   2ebf8:	00000206 	br	2ec04 <altera_avalon_jtag_uart_ioctl+0x84>
   2ebfc:	00a00034 	movhi	r2,32768
   2ec00:	10bfff84 	addi	r2,r2,-2
   2ec04:	e0fffd17 	ldw	r3,-12(fp)
   2ec08:	18800115 	stw	r2,4(r3)
      rc = 0;
   2ec0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2ec10:	00000f06 	br	2ec50 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2ec14:	e0bffd17 	ldw	r2,-12(fp)
   2ec18:	10c00117 	ldw	r3,4(r2)
   2ec1c:	00a00034 	movhi	r2,32768
   2ec20:	10bfffc4 	addi	r2,r2,-1
   2ec24:	18800c26 	beq	r3,r2,2ec58 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2ec28:	e0bffd17 	ldw	r2,-12(fp)
   2ec2c:	10c00917 	ldw	r3,36(r2)
   2ec30:	e0bffd17 	ldw	r2,-12(fp)
   2ec34:	10800117 	ldw	r2,4(r2)
   2ec38:	1885803a 	cmpltu	r2,r3,r2
   2ec3c:	10c03fcc 	andi	r3,r2,255
   2ec40:	e0bfff17 	ldw	r2,-4(fp)
   2ec44:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2ec48:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2ec4c:	00000206 	br	2ec58 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2ec50:	0001883a 	nop
   2ec54:	00000106 	br	2ec5c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2ec58:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2ec5c:	e0bffb17 	ldw	r2,-20(fp)
}
   2ec60:	e037883a 	mov	sp,fp
   2ec64:	df000017 	ldw	fp,0(sp)
   2ec68:	dec00104 	addi	sp,sp,4
   2ec6c:	f800283a 	ret

0002ec70 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2ec70:	defff304 	addi	sp,sp,-52
   2ec74:	dfc00c15 	stw	ra,48(sp)
   2ec78:	df000b15 	stw	fp,44(sp)
   2ec7c:	df000b04 	addi	fp,sp,44
   2ec80:	e13ffc15 	stw	r4,-16(fp)
   2ec84:	e17ffd15 	stw	r5,-12(fp)
   2ec88:	e1bffe15 	stw	r6,-8(fp)
   2ec8c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2ec90:	e0bffd17 	ldw	r2,-12(fp)
   2ec94:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2ec98:	00004706 	br	2edb8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2ec9c:	e0bffc17 	ldw	r2,-16(fp)
   2eca0:	10800a17 	ldw	r2,40(r2)
   2eca4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2eca8:	e0bffc17 	ldw	r2,-16(fp)
   2ecac:	10800b17 	ldw	r2,44(r2)
   2ecb0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2ecb4:	e0fff717 	ldw	r3,-36(fp)
   2ecb8:	e0bff817 	ldw	r2,-32(fp)
   2ecbc:	18800536 	bltu	r3,r2,2ecd4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2ecc0:	e0fff717 	ldw	r3,-36(fp)
   2ecc4:	e0bff817 	ldw	r2,-32(fp)
   2ecc8:	1885c83a 	sub	r2,r3,r2
   2eccc:	e0bff615 	stw	r2,-40(fp)
   2ecd0:	00000406 	br	2ece4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2ecd4:	00c20004 	movi	r3,2048
   2ecd8:	e0bff817 	ldw	r2,-32(fp)
   2ecdc:	1885c83a 	sub	r2,r3,r2
   2ece0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2ece4:	e0bff617 	ldw	r2,-40(fp)
   2ece8:	10001e26 	beq	r2,zero,2ed64 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2ecec:	e0fffe17 	ldw	r3,-8(fp)
   2ecf0:	e0bff617 	ldw	r2,-40(fp)
   2ecf4:	1880022e 	bgeu	r3,r2,2ed00 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2ecf8:	e0bffe17 	ldw	r2,-8(fp)
   2ecfc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2ed00:	e0bffc17 	ldw	r2,-16(fp)
   2ed04:	10c00e04 	addi	r3,r2,56
   2ed08:	e0bff817 	ldw	r2,-32(fp)
   2ed0c:	1885883a 	add	r2,r3,r2
   2ed10:	e1bff617 	ldw	r6,-40(fp)
   2ed14:	100b883a 	mov	r5,r2
   2ed18:	e13ff517 	ldw	r4,-44(fp)
   2ed1c:	0021b800 	call	21b80 <memcpy>
      ptr   += n;
   2ed20:	e0fff517 	ldw	r3,-44(fp)
   2ed24:	e0bff617 	ldw	r2,-40(fp)
   2ed28:	1885883a 	add	r2,r3,r2
   2ed2c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2ed30:	e0fffe17 	ldw	r3,-8(fp)
   2ed34:	e0bff617 	ldw	r2,-40(fp)
   2ed38:	1885c83a 	sub	r2,r3,r2
   2ed3c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ed40:	e0fff817 	ldw	r3,-32(fp)
   2ed44:	e0bff617 	ldw	r2,-40(fp)
   2ed48:	1885883a 	add	r2,r3,r2
   2ed4c:	10c1ffcc 	andi	r3,r2,2047
   2ed50:	e0bffc17 	ldw	r2,-16(fp)
   2ed54:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2ed58:	e0bffe17 	ldw	r2,-8(fp)
   2ed5c:	00bfcf16 	blt	zero,r2,2ec9c <__alt_data_end+0xfffeec9c>
   2ed60:	00000106 	br	2ed68 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2ed64:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2ed68:	e0fff517 	ldw	r3,-44(fp)
   2ed6c:	e0bffd17 	ldw	r2,-12(fp)
   2ed70:	1880141e 	bne	r3,r2,2edc4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2ed74:	e0bfff17 	ldw	r2,-4(fp)
   2ed78:	1090000c 	andi	r2,r2,16384
   2ed7c:	1000131e 	bne	r2,zero,2edcc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2ed80:	0001883a 	nop
   2ed84:	e0bffc17 	ldw	r2,-16(fp)
   2ed88:	10c00a17 	ldw	r3,40(r2)
   2ed8c:	e0bff717 	ldw	r2,-36(fp)
   2ed90:	1880051e 	bne	r3,r2,2eda8 <altera_avalon_jtag_uart_read+0x138>
   2ed94:	e0bffc17 	ldw	r2,-16(fp)
   2ed98:	10c00917 	ldw	r3,36(r2)
   2ed9c:	e0bffc17 	ldw	r2,-16(fp)
   2eda0:	10800117 	ldw	r2,4(r2)
   2eda4:	18bff736 	bltu	r3,r2,2ed84 <__alt_data_end+0xfffeed84>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2eda8:	e0bffc17 	ldw	r2,-16(fp)
   2edac:	10c00a17 	ldw	r3,40(r2)
   2edb0:	e0bff717 	ldw	r2,-36(fp)
   2edb4:	18800726 	beq	r3,r2,2edd4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2edb8:	e0bffe17 	ldw	r2,-8(fp)
   2edbc:	00bfb716 	blt	zero,r2,2ec9c <__alt_data_end+0xfffeec9c>
   2edc0:	00000506 	br	2edd8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2edc4:	0001883a 	nop
   2edc8:	00000306 	br	2edd8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2edcc:	0001883a 	nop
   2edd0:	00000106 	br	2edd8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2edd4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2edd8:	e0fff517 	ldw	r3,-44(fp)
   2eddc:	e0bffd17 	ldw	r2,-12(fp)
   2ede0:	18801826 	beq	r3,r2,2ee44 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ede4:	0005303a 	rdctl	r2,status
   2ede8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2edec:	e0fffb17 	ldw	r3,-20(fp)
   2edf0:	00bfff84 	movi	r2,-2
   2edf4:	1884703a 	and	r2,r3,r2
   2edf8:	1001703a 	wrctl	status,r2
  
  return context;
   2edfc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2ee00:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ee04:	e0bffc17 	ldw	r2,-16(fp)
   2ee08:	10800817 	ldw	r2,32(r2)
   2ee0c:	10c00054 	ori	r3,r2,1
   2ee10:	e0bffc17 	ldw	r2,-16(fp)
   2ee14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ee18:	e0bffc17 	ldw	r2,-16(fp)
   2ee1c:	10800017 	ldw	r2,0(r2)
   2ee20:	10800104 	addi	r2,r2,4
   2ee24:	1007883a 	mov	r3,r2
   2ee28:	e0bffc17 	ldw	r2,-16(fp)
   2ee2c:	10800817 	ldw	r2,32(r2)
   2ee30:	18800035 	stwio	r2,0(r3)
   2ee34:	e0bffa17 	ldw	r2,-24(fp)
   2ee38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ee3c:	e0bff917 	ldw	r2,-28(fp)
   2ee40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2ee44:	e0fff517 	ldw	r3,-44(fp)
   2ee48:	e0bffd17 	ldw	r2,-12(fp)
   2ee4c:	18800426 	beq	r3,r2,2ee60 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2ee50:	e0fff517 	ldw	r3,-44(fp)
   2ee54:	e0bffd17 	ldw	r2,-12(fp)
   2ee58:	1885c83a 	sub	r2,r3,r2
   2ee5c:	00000606 	br	2ee78 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2ee60:	e0bfff17 	ldw	r2,-4(fp)
   2ee64:	1090000c 	andi	r2,r2,16384
   2ee68:	10000226 	beq	r2,zero,2ee74 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2ee6c:	00bffd44 	movi	r2,-11
   2ee70:	00000106 	br	2ee78 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2ee74:	00bffec4 	movi	r2,-5
}
   2ee78:	e037883a 	mov	sp,fp
   2ee7c:	dfc00117 	ldw	ra,4(sp)
   2ee80:	df000017 	ldw	fp,0(sp)
   2ee84:	dec00204 	addi	sp,sp,8
   2ee88:	f800283a 	ret

0002ee8c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2ee8c:	defff304 	addi	sp,sp,-52
   2ee90:	dfc00c15 	stw	ra,48(sp)
   2ee94:	df000b15 	stw	fp,44(sp)
   2ee98:	df000b04 	addi	fp,sp,44
   2ee9c:	e13ffc15 	stw	r4,-16(fp)
   2eea0:	e17ffd15 	stw	r5,-12(fp)
   2eea4:	e1bffe15 	stw	r6,-8(fp)
   2eea8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2eeac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2eeb0:	e0bffd17 	ldw	r2,-12(fp)
   2eeb4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2eeb8:	00003706 	br	2ef98 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2eebc:	e0bffc17 	ldw	r2,-16(fp)
   2eec0:	10800c17 	ldw	r2,48(r2)
   2eec4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2eec8:	e0bffc17 	ldw	r2,-16(fp)
   2eecc:	10800d17 	ldw	r2,52(r2)
   2eed0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2eed4:	e0fff917 	ldw	r3,-28(fp)
   2eed8:	e0bff517 	ldw	r2,-44(fp)
   2eedc:	1880062e 	bgeu	r3,r2,2eef8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2eee0:	e0fff517 	ldw	r3,-44(fp)
   2eee4:	e0bff917 	ldw	r2,-28(fp)
   2eee8:	1885c83a 	sub	r2,r3,r2
   2eeec:	10bfffc4 	addi	r2,r2,-1
   2eef0:	e0bff615 	stw	r2,-40(fp)
   2eef4:	00000b06 	br	2ef24 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2eef8:	e0bff517 	ldw	r2,-44(fp)
   2eefc:	10000526 	beq	r2,zero,2ef14 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2ef00:	00c20004 	movi	r3,2048
   2ef04:	e0bff917 	ldw	r2,-28(fp)
   2ef08:	1885c83a 	sub	r2,r3,r2
   2ef0c:	e0bff615 	stw	r2,-40(fp)
   2ef10:	00000406 	br	2ef24 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2ef14:	00c1ffc4 	movi	r3,2047
   2ef18:	e0bff917 	ldw	r2,-28(fp)
   2ef1c:	1885c83a 	sub	r2,r3,r2
   2ef20:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2ef24:	e0bff617 	ldw	r2,-40(fp)
   2ef28:	10001e26 	beq	r2,zero,2efa4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2ef2c:	e0fffe17 	ldw	r3,-8(fp)
   2ef30:	e0bff617 	ldw	r2,-40(fp)
   2ef34:	1880022e 	bgeu	r3,r2,2ef40 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2ef38:	e0bffe17 	ldw	r2,-8(fp)
   2ef3c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2ef40:	e0bffc17 	ldw	r2,-16(fp)
   2ef44:	10c20e04 	addi	r3,r2,2104
   2ef48:	e0bff917 	ldw	r2,-28(fp)
   2ef4c:	1885883a 	add	r2,r3,r2
   2ef50:	e1bff617 	ldw	r6,-40(fp)
   2ef54:	e17ffd17 	ldw	r5,-12(fp)
   2ef58:	1009883a 	mov	r4,r2
   2ef5c:	0021b800 	call	21b80 <memcpy>
      ptr   += n;
   2ef60:	e0fffd17 	ldw	r3,-12(fp)
   2ef64:	e0bff617 	ldw	r2,-40(fp)
   2ef68:	1885883a 	add	r2,r3,r2
   2ef6c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2ef70:	e0fffe17 	ldw	r3,-8(fp)
   2ef74:	e0bff617 	ldw	r2,-40(fp)
   2ef78:	1885c83a 	sub	r2,r3,r2
   2ef7c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ef80:	e0fff917 	ldw	r3,-28(fp)
   2ef84:	e0bff617 	ldw	r2,-40(fp)
   2ef88:	1885883a 	add	r2,r3,r2
   2ef8c:	10c1ffcc 	andi	r3,r2,2047
   2ef90:	e0bffc17 	ldw	r2,-16(fp)
   2ef94:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ef98:	e0bffe17 	ldw	r2,-8(fp)
   2ef9c:	00bfc716 	blt	zero,r2,2eebc <__alt_data_end+0xfffeeebc>
   2efa0:	00000106 	br	2efa8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2efa4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2efa8:	0005303a 	rdctl	r2,status
   2efac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2efb0:	e0fffb17 	ldw	r3,-20(fp)
   2efb4:	00bfff84 	movi	r2,-2
   2efb8:	1884703a 	and	r2,r3,r2
   2efbc:	1001703a 	wrctl	status,r2
  
  return context;
   2efc0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2efc4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2efc8:	e0bffc17 	ldw	r2,-16(fp)
   2efcc:	10800817 	ldw	r2,32(r2)
   2efd0:	10c00094 	ori	r3,r2,2
   2efd4:	e0bffc17 	ldw	r2,-16(fp)
   2efd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2efdc:	e0bffc17 	ldw	r2,-16(fp)
   2efe0:	10800017 	ldw	r2,0(r2)
   2efe4:	10800104 	addi	r2,r2,4
   2efe8:	1007883a 	mov	r3,r2
   2efec:	e0bffc17 	ldw	r2,-16(fp)
   2eff0:	10800817 	ldw	r2,32(r2)
   2eff4:	18800035 	stwio	r2,0(r3)
   2eff8:	e0bffa17 	ldw	r2,-24(fp)
   2effc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f000:	e0bff817 	ldw	r2,-32(fp)
   2f004:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2f008:	e0bffe17 	ldw	r2,-8(fp)
   2f00c:	0080100e 	bge	zero,r2,2f050 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2f010:	e0bfff17 	ldw	r2,-4(fp)
   2f014:	1090000c 	andi	r2,r2,16384
   2f018:	1000101e 	bne	r2,zero,2f05c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2f01c:	0001883a 	nop
   2f020:	e0bffc17 	ldw	r2,-16(fp)
   2f024:	10c00d17 	ldw	r3,52(r2)
   2f028:	e0bff517 	ldw	r2,-44(fp)
   2f02c:	1880051e 	bne	r3,r2,2f044 <altera_avalon_jtag_uart_write+0x1b8>
   2f030:	e0bffc17 	ldw	r2,-16(fp)
   2f034:	10c00917 	ldw	r3,36(r2)
   2f038:	e0bffc17 	ldw	r2,-16(fp)
   2f03c:	10800117 	ldw	r2,4(r2)
   2f040:	18bff736 	bltu	r3,r2,2f020 <__alt_data_end+0xfffef020>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2f044:	e0bffc17 	ldw	r2,-16(fp)
   2f048:	10800917 	ldw	r2,36(r2)
   2f04c:	1000051e 	bne	r2,zero,2f064 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2f050:	e0bffe17 	ldw	r2,-8(fp)
   2f054:	00bfd016 	blt	zero,r2,2ef98 <__alt_data_end+0xfffeef98>
   2f058:	00000306 	br	2f068 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2f05c:	0001883a 	nop
   2f060:	00000106 	br	2f068 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2f064:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2f068:	e0fffd17 	ldw	r3,-12(fp)
   2f06c:	e0bff717 	ldw	r2,-36(fp)
   2f070:	18800426 	beq	r3,r2,2f084 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2f074:	e0fffd17 	ldw	r3,-12(fp)
   2f078:	e0bff717 	ldw	r2,-36(fp)
   2f07c:	1885c83a 	sub	r2,r3,r2
   2f080:	00000606 	br	2f09c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2f084:	e0bfff17 	ldw	r2,-4(fp)
   2f088:	1090000c 	andi	r2,r2,16384
   2f08c:	10000226 	beq	r2,zero,2f098 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2f090:	00bffd44 	movi	r2,-11
   2f094:	00000106 	br	2f09c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2f098:	00bffec4 	movi	r2,-5
}
   2f09c:	e037883a 	mov	sp,fp
   2f0a0:	dfc00117 	ldw	ra,4(sp)
   2f0a4:	df000017 	ldw	fp,0(sp)
   2f0a8:	dec00204 	addi	sp,sp,8
   2f0ac:	f800283a 	ret

0002f0b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2f0b0:	defffa04 	addi	sp,sp,-24
   2f0b4:	dfc00515 	stw	ra,20(sp)
   2f0b8:	df000415 	stw	fp,16(sp)
   2f0bc:	df000404 	addi	fp,sp,16
   2f0c0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2f0c4:	0007883a 	mov	r3,zero
   2f0c8:	e0bfff17 	ldw	r2,-4(fp)
   2f0cc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2f0d0:	e0bfff17 	ldw	r2,-4(fp)
   2f0d4:	10800104 	addi	r2,r2,4
   2f0d8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f0dc:	0005303a 	rdctl	r2,status
   2f0e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f0e4:	e0fffd17 	ldw	r3,-12(fp)
   2f0e8:	00bfff84 	movi	r2,-2
   2f0ec:	1884703a 	and	r2,r3,r2
   2f0f0:	1001703a 	wrctl	status,r2
  
  return context;
   2f0f4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2f0f8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2f0fc:	003047c0 	call	3047c <alt_tick>
   2f100:	e0bffc17 	ldw	r2,-16(fp)
   2f104:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f108:	e0bffe17 	ldw	r2,-8(fp)
   2f10c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2f110:	0001883a 	nop
   2f114:	e037883a 	mov	sp,fp
   2f118:	dfc00117 	ldw	ra,4(sp)
   2f11c:	df000017 	ldw	fp,0(sp)
   2f120:	dec00204 	addi	sp,sp,8
   2f124:	f800283a 	ret

0002f128 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2f128:	defff804 	addi	sp,sp,-32
   2f12c:	dfc00715 	stw	ra,28(sp)
   2f130:	df000615 	stw	fp,24(sp)
   2f134:	df000604 	addi	fp,sp,24
   2f138:	e13ffc15 	stw	r4,-16(fp)
   2f13c:	e17ffd15 	stw	r5,-12(fp)
   2f140:	e1bffe15 	stw	r6,-8(fp)
   2f144:	e1ffff15 	stw	r7,-4(fp)
   2f148:	e0bfff17 	ldw	r2,-4(fp)
   2f14c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2f150:	d0a70917 	ldw	r2,-25564(gp)
   2f154:	1000021e 	bne	r2,zero,2f160 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2f158:	e0bffb17 	ldw	r2,-20(fp)
   2f15c:	d0a70915 	stw	r2,-25564(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2f160:	e0bffc17 	ldw	r2,-16(fp)
   2f164:	10800104 	addi	r2,r2,4
   2f168:	00c001c4 	movi	r3,7
   2f16c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2f170:	d8000015 	stw	zero,0(sp)
   2f174:	e1fffc17 	ldw	r7,-16(fp)
   2f178:	018000f4 	movhi	r6,3
   2f17c:	31bc2c04 	addi	r6,r6,-3920
   2f180:	e17ffe17 	ldw	r5,-8(fp)
   2f184:	e13ffd17 	ldw	r4,-12(fp)
   2f188:	00300000 	call	30000 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2f18c:	0001883a 	nop
   2f190:	e037883a 	mov	sp,fp
   2f194:	dfc00117 	ldw	ra,4(sp)
   2f198:	df000017 	ldw	fp,0(sp)
   2f19c:	dec00204 	addi	sp,sp,8
   2f1a0:	f800283a 	ret

0002f1a4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2f1a4:	defffa04 	addi	sp,sp,-24
   2f1a8:	dfc00515 	stw	ra,20(sp)
   2f1ac:	df000415 	stw	fp,16(sp)
   2f1b0:	df000404 	addi	fp,sp,16
   2f1b4:	e13ffd15 	stw	r4,-12(fp)
   2f1b8:	e17ffe15 	stw	r5,-8(fp)
   2f1bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2f1c0:	e0bffd17 	ldw	r2,-12(fp)
   2f1c4:	10800017 	ldw	r2,0(r2)
   2f1c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2f1cc:	e0bffc17 	ldw	r2,-16(fp)
   2f1d0:	10c00a04 	addi	r3,r2,40
   2f1d4:	e0bffd17 	ldw	r2,-12(fp)
   2f1d8:	10800217 	ldw	r2,8(r2)
   2f1dc:	100f883a 	mov	r7,r2
   2f1e0:	e1bfff17 	ldw	r6,-4(fp)
   2f1e4:	e17ffe17 	ldw	r5,-8(fp)
   2f1e8:	1809883a 	mov	r4,r3
   2f1ec:	002f6b80 	call	2f6b8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   2f1f0:	e037883a 	mov	sp,fp
   2f1f4:	dfc00117 	ldw	ra,4(sp)
   2f1f8:	df000017 	ldw	fp,0(sp)
   2f1fc:	dec00204 	addi	sp,sp,8
   2f200:	f800283a 	ret

0002f204 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2f204:	defffa04 	addi	sp,sp,-24
   2f208:	dfc00515 	stw	ra,20(sp)
   2f20c:	df000415 	stw	fp,16(sp)
   2f210:	df000404 	addi	fp,sp,16
   2f214:	e13ffd15 	stw	r4,-12(fp)
   2f218:	e17ffe15 	stw	r5,-8(fp)
   2f21c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2f220:	e0bffd17 	ldw	r2,-12(fp)
   2f224:	10800017 	ldw	r2,0(r2)
   2f228:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2f22c:	e0bffc17 	ldw	r2,-16(fp)
   2f230:	10c00a04 	addi	r3,r2,40
   2f234:	e0bffd17 	ldw	r2,-12(fp)
   2f238:	10800217 	ldw	r2,8(r2)
   2f23c:	100f883a 	mov	r7,r2
   2f240:	e1bfff17 	ldw	r6,-4(fp)
   2f244:	e17ffe17 	ldw	r5,-8(fp)
   2f248:	1809883a 	mov	r4,r3
   2f24c:	002f8d00 	call	2f8d0 <altera_avalon_uart_write>
      fd->fd_flags);
}
   2f250:	e037883a 	mov	sp,fp
   2f254:	dfc00117 	ldw	ra,4(sp)
   2f258:	df000017 	ldw	fp,0(sp)
   2f25c:	dec00204 	addi	sp,sp,8
   2f260:	f800283a 	ret

0002f264 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2f264:	defffc04 	addi	sp,sp,-16
   2f268:	dfc00315 	stw	ra,12(sp)
   2f26c:	df000215 	stw	fp,8(sp)
   2f270:	df000204 	addi	fp,sp,8
   2f274:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2f278:	e0bfff17 	ldw	r2,-4(fp)
   2f27c:	10800017 	ldw	r2,0(r2)
   2f280:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2f284:	e0bffe17 	ldw	r2,-8(fp)
   2f288:	10c00a04 	addi	r3,r2,40
   2f28c:	e0bfff17 	ldw	r2,-4(fp)
   2f290:	10800217 	ldw	r2,8(r2)
   2f294:	100b883a 	mov	r5,r2
   2f298:	1809883a 	mov	r4,r3
   2f29c:	002f6280 	call	2f628 <altera_avalon_uart_close>
}
   2f2a0:	e037883a 	mov	sp,fp
   2f2a4:	dfc00117 	ldw	ra,4(sp)
   2f2a8:	df000017 	ldw	fp,0(sp)
   2f2ac:	dec00204 	addi	sp,sp,8
   2f2b0:	f800283a 	ret

0002f2b4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2f2b4:	defff804 	addi	sp,sp,-32
   2f2b8:	dfc00715 	stw	ra,28(sp)
   2f2bc:	df000615 	stw	fp,24(sp)
   2f2c0:	df000604 	addi	fp,sp,24
   2f2c4:	e13ffd15 	stw	r4,-12(fp)
   2f2c8:	e17ffe15 	stw	r5,-8(fp)
   2f2cc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   2f2d0:	e0bffd17 	ldw	r2,-12(fp)
   2f2d4:	10800017 	ldw	r2,0(r2)
   2f2d8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2f2dc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2f2e0:	1000041e 	bne	r2,zero,2f2f4 <altera_avalon_uart_init+0x40>
   2f2e4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2f2e8:	1000021e 	bne	r2,zero,2f2f4 <altera_avalon_uart_init+0x40>
   2f2ec:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2f2f0:	10000226 	beq	r2,zero,2f2fc <altera_avalon_uart_init+0x48>
   2f2f4:	00800044 	movi	r2,1
   2f2f8:	00000106 	br	2f300 <altera_avalon_uart_init+0x4c>
   2f2fc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2f300:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2f304:	e0bffc17 	ldw	r2,-16(fp)
   2f308:	10000f1e 	bne	r2,zero,2f348 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   2f30c:	e0bffd17 	ldw	r2,-12(fp)
   2f310:	00c32004 	movi	r3,3200
   2f314:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   2f318:	e0bffb17 	ldw	r2,-20(fp)
   2f31c:	10800304 	addi	r2,r2,12
   2f320:	e0fffd17 	ldw	r3,-12(fp)
   2f324:	18c00117 	ldw	r3,4(r3)
   2f328:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   2f32c:	d8000015 	stw	zero,0(sp)
   2f330:	e1fffd17 	ldw	r7,-12(fp)
   2f334:	018000f4 	movhi	r6,3
   2f338:	31bcd804 	addi	r6,r6,-3232
   2f33c:	e17fff17 	ldw	r5,-4(fp)
   2f340:	e13ffe17 	ldw	r4,-8(fp)
   2f344:	00300000 	call	30000 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   2f348:	0001883a 	nop
   2f34c:	e037883a 	mov	sp,fp
   2f350:	dfc00117 	ldw	ra,4(sp)
   2f354:	df000017 	ldw	fp,0(sp)
   2f358:	dec00204 	addi	sp,sp,8
   2f35c:	f800283a 	ret

0002f360 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2f360:	defffa04 	addi	sp,sp,-24
   2f364:	dfc00515 	stw	ra,20(sp)
   2f368:	df000415 	stw	fp,16(sp)
   2f36c:	df000404 	addi	fp,sp,16
   2f370:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2f374:	e0bfff17 	ldw	r2,-4(fp)
   2f378:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   2f37c:	e0bffc17 	ldw	r2,-16(fp)
   2f380:	10800017 	ldw	r2,0(r2)
   2f384:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2f388:	e0bffd17 	ldw	r2,-12(fp)
   2f38c:	10800204 	addi	r2,r2,8
   2f390:	10800037 	ldwio	r2,0(r2)
   2f394:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   2f398:	e0bffd17 	ldw	r2,-12(fp)
   2f39c:	10800204 	addi	r2,r2,8
   2f3a0:	0007883a 	mov	r3,zero
   2f3a4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   2f3a8:	e0bffd17 	ldw	r2,-12(fp)
   2f3ac:	10800204 	addi	r2,r2,8
   2f3b0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2f3b4:	e0bffe17 	ldw	r2,-8(fp)
   2f3b8:	1080200c 	andi	r2,r2,128
   2f3bc:	10000326 	beq	r2,zero,2f3cc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2f3c0:	e17ffe17 	ldw	r5,-8(fp)
   2f3c4:	e13ffc17 	ldw	r4,-16(fp)
   2f3c8:	002f3fc0 	call	2f3fc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2f3cc:	e0bffe17 	ldw	r2,-8(fp)
   2f3d0:	1081100c 	andi	r2,r2,1088
   2f3d4:	10000326 	beq	r2,zero,2f3e4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   2f3d8:	e17ffe17 	ldw	r5,-8(fp)
   2f3dc:	e13ffc17 	ldw	r4,-16(fp)
   2f3e0:	002f4e00 	call	2f4e0 <altera_avalon_uart_txirq>
  }
  

}
   2f3e4:	0001883a 	nop
   2f3e8:	e037883a 	mov	sp,fp
   2f3ec:	dfc00117 	ldw	ra,4(sp)
   2f3f0:	df000017 	ldw	fp,0(sp)
   2f3f4:	dec00204 	addi	sp,sp,8
   2f3f8:	f800283a 	ret

0002f3fc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2f3fc:	defffc04 	addi	sp,sp,-16
   2f400:	df000315 	stw	fp,12(sp)
   2f404:	df000304 	addi	fp,sp,12
   2f408:	e13ffe15 	stw	r4,-8(fp)
   2f40c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2f410:	e0bfff17 	ldw	r2,-4(fp)
   2f414:	108000cc 	andi	r2,r2,3
   2f418:	10002c1e 	bne	r2,zero,2f4cc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2f41c:	e0bffe17 	ldw	r2,-8(fp)
   2f420:	10800317 	ldw	r2,12(r2)
   2f424:	e0bffe17 	ldw	r2,-8(fp)
   2f428:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f42c:	e0bffe17 	ldw	r2,-8(fp)
   2f430:	10800317 	ldw	r2,12(r2)
   2f434:	10800044 	addi	r2,r2,1
   2f438:	10800fcc 	andi	r2,r2,63
   2f43c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2f440:	e0bffe17 	ldw	r2,-8(fp)
   2f444:	10800317 	ldw	r2,12(r2)
   2f448:	e0fffe17 	ldw	r3,-8(fp)
   2f44c:	18c00017 	ldw	r3,0(r3)
   2f450:	18c00037 	ldwio	r3,0(r3)
   2f454:	1809883a 	mov	r4,r3
   2f458:	e0fffe17 	ldw	r3,-8(fp)
   2f45c:	1885883a 	add	r2,r3,r2
   2f460:	10800704 	addi	r2,r2,28
   2f464:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   2f468:	e0bffe17 	ldw	r2,-8(fp)
   2f46c:	e0fffd17 	ldw	r3,-12(fp)
   2f470:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f474:	e0bffe17 	ldw	r2,-8(fp)
   2f478:	10800317 	ldw	r2,12(r2)
   2f47c:	10800044 	addi	r2,r2,1
   2f480:	10800fcc 	andi	r2,r2,63
   2f484:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2f488:	e0bffe17 	ldw	r2,-8(fp)
   2f48c:	10c00217 	ldw	r3,8(r2)
   2f490:	e0bffd17 	ldw	r2,-12(fp)
   2f494:	18800e1e 	bne	r3,r2,2f4d0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f498:	e0bffe17 	ldw	r2,-8(fp)
   2f49c:	10c00117 	ldw	r3,4(r2)
   2f4a0:	00bfdfc4 	movi	r2,-129
   2f4a4:	1886703a 	and	r3,r3,r2
   2f4a8:	e0bffe17 	ldw	r2,-8(fp)
   2f4ac:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2f4b0:	e0bffe17 	ldw	r2,-8(fp)
   2f4b4:	10800017 	ldw	r2,0(r2)
   2f4b8:	10800304 	addi	r2,r2,12
   2f4bc:	e0fffe17 	ldw	r3,-8(fp)
   2f4c0:	18c00117 	ldw	r3,4(r3)
   2f4c4:	10c00035 	stwio	r3,0(r2)
   2f4c8:	00000106 	br	2f4d0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   2f4cc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   2f4d0:	e037883a 	mov	sp,fp
   2f4d4:	df000017 	ldw	fp,0(sp)
   2f4d8:	dec00104 	addi	sp,sp,4
   2f4dc:	f800283a 	ret

0002f4e0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2f4e0:	defffb04 	addi	sp,sp,-20
   2f4e4:	df000415 	stw	fp,16(sp)
   2f4e8:	df000404 	addi	fp,sp,16
   2f4ec:	e13ffc15 	stw	r4,-16(fp)
   2f4f0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2f4f4:	e0bffc17 	ldw	r2,-16(fp)
   2f4f8:	10c00417 	ldw	r3,16(r2)
   2f4fc:	e0bffc17 	ldw	r2,-16(fp)
   2f500:	10800517 	ldw	r2,20(r2)
   2f504:	18803226 	beq	r3,r2,2f5d0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2f508:	e0bffc17 	ldw	r2,-16(fp)
   2f50c:	10800617 	ldw	r2,24(r2)
   2f510:	1080008c 	andi	r2,r2,2
   2f514:	10000326 	beq	r2,zero,2f524 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2f518:	e0bffd17 	ldw	r2,-12(fp)
   2f51c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2f520:	10001d26 	beq	r2,zero,2f598 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2f524:	e0bffc17 	ldw	r2,-16(fp)
   2f528:	10800417 	ldw	r2,16(r2)
   2f52c:	e0bffc17 	ldw	r2,-16(fp)
   2f530:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2f534:	e0bffc17 	ldw	r2,-16(fp)
   2f538:	10800017 	ldw	r2,0(r2)
   2f53c:	10800104 	addi	r2,r2,4
   2f540:	e0fffc17 	ldw	r3,-16(fp)
   2f544:	18c00417 	ldw	r3,16(r3)
   2f548:	e13ffc17 	ldw	r4,-16(fp)
   2f54c:	20c7883a 	add	r3,r4,r3
   2f550:	18c01704 	addi	r3,r3,92
   2f554:	18c00003 	ldbu	r3,0(r3)
   2f558:	18c03fcc 	andi	r3,r3,255
   2f55c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2f560:	e0bffc17 	ldw	r2,-16(fp)
   2f564:	10800417 	ldw	r2,16(r2)
   2f568:	10800044 	addi	r2,r2,1
   2f56c:	e0fffc17 	ldw	r3,-16(fp)
   2f570:	18800415 	stw	r2,16(r3)
   2f574:	10c00fcc 	andi	r3,r2,63
   2f578:	e0bffc17 	ldw	r2,-16(fp)
   2f57c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2f580:	e0bffc17 	ldw	r2,-16(fp)
   2f584:	10800117 	ldw	r2,4(r2)
   2f588:	10c01014 	ori	r3,r2,64
   2f58c:	e0bffc17 	ldw	r2,-16(fp)
   2f590:	10c00115 	stw	r3,4(r2)
   2f594:	00000e06 	br	2f5d0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   2f598:	e0bffc17 	ldw	r2,-16(fp)
   2f59c:	10800017 	ldw	r2,0(r2)
   2f5a0:	10800204 	addi	r2,r2,8
   2f5a4:	10800037 	ldwio	r2,0(r2)
   2f5a8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2f5ac:	e0bffd17 	ldw	r2,-12(fp)
   2f5b0:	1082000c 	andi	r2,r2,2048
   2f5b4:	1000061e 	bne	r2,zero,2f5d0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2f5b8:	e0bffc17 	ldw	r2,-16(fp)
   2f5bc:	10c00117 	ldw	r3,4(r2)
   2f5c0:	00bfefc4 	movi	r2,-65
   2f5c4:	1886703a 	and	r3,r3,r2
   2f5c8:	e0bffc17 	ldw	r2,-16(fp)
   2f5cc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   2f5d0:	e0bffc17 	ldw	r2,-16(fp)
   2f5d4:	10c00417 	ldw	r3,16(r2)
   2f5d8:	e0bffc17 	ldw	r2,-16(fp)
   2f5dc:	10800517 	ldw	r2,20(r2)
   2f5e0:	1880061e 	bne	r3,r2,2f5fc <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2f5e4:	e0bffc17 	ldw	r2,-16(fp)
   2f5e8:	10c00117 	ldw	r3,4(r2)
   2f5ec:	00beefc4 	movi	r2,-1089
   2f5f0:	1886703a 	and	r3,r3,r2
   2f5f4:	e0bffc17 	ldw	r2,-16(fp)
   2f5f8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f5fc:	e0bffc17 	ldw	r2,-16(fp)
   2f600:	10800017 	ldw	r2,0(r2)
   2f604:	10800304 	addi	r2,r2,12
   2f608:	e0fffc17 	ldw	r3,-16(fp)
   2f60c:	18c00117 	ldw	r3,4(r3)
   2f610:	10c00035 	stwio	r3,0(r2)
}
   2f614:	0001883a 	nop
   2f618:	e037883a 	mov	sp,fp
   2f61c:	df000017 	ldw	fp,0(sp)
   2f620:	dec00104 	addi	sp,sp,4
   2f624:	f800283a 	ret

0002f628 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   2f628:	defffd04 	addi	sp,sp,-12
   2f62c:	df000215 	stw	fp,8(sp)
   2f630:	df000204 	addi	fp,sp,8
   2f634:	e13ffe15 	stw	r4,-8(fp)
   2f638:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2f63c:	00000506 	br	2f654 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2f640:	e0bfff17 	ldw	r2,-4(fp)
   2f644:	1090000c 	andi	r2,r2,16384
   2f648:	10000226 	beq	r2,zero,2f654 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2f64c:	00bffd44 	movi	r2,-11
   2f650:	00000606 	br	2f66c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2f654:	e0bffe17 	ldw	r2,-8(fp)
   2f658:	10c00417 	ldw	r3,16(r2)
   2f65c:	e0bffe17 	ldw	r2,-8(fp)
   2f660:	10800517 	ldw	r2,20(r2)
   2f664:	18bff61e 	bne	r3,r2,2f640 <__alt_data_end+0xfffef640>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2f668:	0005883a 	mov	r2,zero
}
   2f66c:	e037883a 	mov	sp,fp
   2f670:	df000017 	ldw	fp,0(sp)
   2f674:	dec00104 	addi	sp,sp,4
   2f678:	f800283a 	ret

0002f67c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f67c:	defffe04 	addi	sp,sp,-8
   2f680:	dfc00115 	stw	ra,4(sp)
   2f684:	df000015 	stw	fp,0(sp)
   2f688:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f68c:	d0a00c17 	ldw	r2,-32720(gp)
   2f690:	10000326 	beq	r2,zero,2f6a0 <alt_get_errno+0x24>
   2f694:	d0a00c17 	ldw	r2,-32720(gp)
   2f698:	103ee83a 	callr	r2
   2f69c:	00000106 	br	2f6a4 <alt_get_errno+0x28>
   2f6a0:	d0a6fe04 	addi	r2,gp,-25608
}
   2f6a4:	e037883a 	mov	sp,fp
   2f6a8:	dfc00117 	ldw	ra,4(sp)
   2f6ac:	df000017 	ldw	fp,0(sp)
   2f6b0:	dec00204 	addi	sp,sp,8
   2f6b4:	f800283a 	ret

0002f6b8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   2f6b8:	defff204 	addi	sp,sp,-56
   2f6bc:	dfc00d15 	stw	ra,52(sp)
   2f6c0:	df000c15 	stw	fp,48(sp)
   2f6c4:	df000c04 	addi	fp,sp,48
   2f6c8:	e13ffc15 	stw	r4,-16(fp)
   2f6cc:	e17ffd15 	stw	r5,-12(fp)
   2f6d0:	e1bffe15 	stw	r6,-8(fp)
   2f6d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   2f6d8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   2f6dc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   2f6e0:	e0bfff17 	ldw	r2,-4(fp)
   2f6e4:	1090000c 	andi	r2,r2,16384
   2f6e8:	1005003a 	cmpeq	r2,r2,zero
   2f6ec:	10803fcc 	andi	r2,r2,255
   2f6f0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2f6f4:	00001306 	br	2f744 <altera_avalon_uart_read+0x8c>
    {
      count++;
   2f6f8:	e0bff517 	ldw	r2,-44(fp)
   2f6fc:	10800044 	addi	r2,r2,1
   2f700:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   2f704:	e0bffd17 	ldw	r2,-12(fp)
   2f708:	10c00044 	addi	r3,r2,1
   2f70c:	e0fffd15 	stw	r3,-12(fp)
   2f710:	e0fffc17 	ldw	r3,-16(fp)
   2f714:	18c00217 	ldw	r3,8(r3)
   2f718:	e13ffc17 	ldw	r4,-16(fp)
   2f71c:	20c7883a 	add	r3,r4,r3
   2f720:	18c00704 	addi	r3,r3,28
   2f724:	18c00003 	ldbu	r3,0(r3)
   2f728:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   2f72c:	e0bffc17 	ldw	r2,-16(fp)
   2f730:	10800217 	ldw	r2,8(r2)
   2f734:	10800044 	addi	r2,r2,1
   2f738:	10c00fcc 	andi	r3,r2,63
   2f73c:	e0bffc17 	ldw	r2,-16(fp)
   2f740:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2f744:	e0fff517 	ldw	r3,-44(fp)
   2f748:	e0bffe17 	ldw	r2,-8(fp)
   2f74c:	1880050e 	bge	r3,r2,2f764 <altera_avalon_uart_read+0xac>
   2f750:	e0bffc17 	ldw	r2,-16(fp)
   2f754:	10c00217 	ldw	r3,8(r2)
   2f758:	e0bffc17 	ldw	r2,-16(fp)
   2f75c:	10800317 	ldw	r2,12(r2)
   2f760:	18bfe51e 	bne	r3,r2,2f6f8 <__alt_data_end+0xfffef6f8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   2f764:	e0bff517 	ldw	r2,-44(fp)
   2f768:	1000251e 	bne	r2,zero,2f800 <altera_avalon_uart_read+0x148>
   2f76c:	e0bffc17 	ldw	r2,-16(fp)
   2f770:	10c00217 	ldw	r3,8(r2)
   2f774:	e0bffc17 	ldw	r2,-16(fp)
   2f778:	10800317 	ldw	r2,12(r2)
   2f77c:	1880201e 	bne	r3,r2,2f800 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   2f780:	e0bff617 	ldw	r2,-40(fp)
   2f784:	1000071e 	bne	r2,zero,2f7a4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   2f788:	002f67c0 	call	2f67c <alt_get_errno>
   2f78c:	1007883a 	mov	r3,r2
   2f790:	008002c4 	movi	r2,11
   2f794:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   2f798:	00800044 	movi	r2,1
   2f79c:	e0bff405 	stb	r2,-48(fp)
        break;
   2f7a0:	00001b06 	br	2f810 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f7a4:	0005303a 	rdctl	r2,status
   2f7a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f7ac:	e0fff917 	ldw	r3,-28(fp)
   2f7b0:	00bfff84 	movi	r2,-2
   2f7b4:	1884703a 	and	r2,r3,r2
   2f7b8:	1001703a 	wrctl	status,r2
  
  return context;
   2f7bc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   2f7c0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f7c4:	e0bffc17 	ldw	r2,-16(fp)
   2f7c8:	10800117 	ldw	r2,4(r2)
   2f7cc:	10c02014 	ori	r3,r2,128
   2f7d0:	e0bffc17 	ldw	r2,-16(fp)
   2f7d4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f7d8:	e0bffc17 	ldw	r2,-16(fp)
   2f7dc:	10800017 	ldw	r2,0(r2)
   2f7e0:	10800304 	addi	r2,r2,12
   2f7e4:	e0fffc17 	ldw	r3,-16(fp)
   2f7e8:	18c00117 	ldw	r3,4(r3)
   2f7ec:	10c00035 	stwio	r3,0(r2)
   2f7f0:	e0bff817 	ldw	r2,-32(fp)
   2f7f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f7f8:	e0bffa17 	ldw	r2,-24(fp)
   2f7fc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   2f800:	e0bff517 	ldw	r2,-44(fp)
   2f804:	1000021e 	bne	r2,zero,2f810 <altera_avalon_uart_read+0x158>
   2f808:	e0bffe17 	ldw	r2,-8(fp)
   2f80c:	103fcd1e 	bne	r2,zero,2f744 <__alt_data_end+0xfffef744>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f810:	0005303a 	rdctl	r2,status
   2f814:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f818:	e0fffb17 	ldw	r3,-20(fp)
   2f81c:	00bfff84 	movi	r2,-2
   2f820:	1884703a 	and	r2,r3,r2
   2f824:	1001703a 	wrctl	status,r2
  
  return context;
   2f828:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   2f82c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f830:	e0bffc17 	ldw	r2,-16(fp)
   2f834:	10800117 	ldw	r2,4(r2)
   2f838:	10c02014 	ori	r3,r2,128
   2f83c:	e0bffc17 	ldw	r2,-16(fp)
   2f840:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f844:	e0bffc17 	ldw	r2,-16(fp)
   2f848:	10800017 	ldw	r2,0(r2)
   2f84c:	10800304 	addi	r2,r2,12
   2f850:	e0fffc17 	ldw	r3,-16(fp)
   2f854:	18c00117 	ldw	r3,4(r3)
   2f858:	10c00035 	stwio	r3,0(r2)
   2f85c:	e0bff817 	ldw	r2,-32(fp)
   2f860:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f864:	e0bff717 	ldw	r2,-36(fp)
   2f868:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   2f86c:	e0bff403 	ldbu	r2,-48(fp)
   2f870:	10000226 	beq	r2,zero,2f87c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   2f874:	00bffd44 	movi	r2,-11
   2f878:	00000106 	br	2f880 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   2f87c:	e0bff517 	ldw	r2,-44(fp)
  }
}
   2f880:	e037883a 	mov	sp,fp
   2f884:	dfc00117 	ldw	ra,4(sp)
   2f888:	df000017 	ldw	fp,0(sp)
   2f88c:	dec00204 	addi	sp,sp,8
   2f890:	f800283a 	ret

0002f894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f894:	defffe04 	addi	sp,sp,-8
   2f898:	dfc00115 	stw	ra,4(sp)
   2f89c:	df000015 	stw	fp,0(sp)
   2f8a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f8a4:	d0a00c17 	ldw	r2,-32720(gp)
   2f8a8:	10000326 	beq	r2,zero,2f8b8 <alt_get_errno+0x24>
   2f8ac:	d0a00c17 	ldw	r2,-32720(gp)
   2f8b0:	103ee83a 	callr	r2
   2f8b4:	00000106 	br	2f8bc <alt_get_errno+0x28>
   2f8b8:	d0a6fe04 	addi	r2,gp,-25608
}
   2f8bc:	e037883a 	mov	sp,fp
   2f8c0:	dfc00117 	ldw	ra,4(sp)
   2f8c4:	df000017 	ldw	fp,0(sp)
   2f8c8:	dec00204 	addi	sp,sp,8
   2f8cc:	f800283a 	ret

0002f8d0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   2f8d0:	defff204 	addi	sp,sp,-56
   2f8d4:	dfc00d15 	stw	ra,52(sp)
   2f8d8:	df000c15 	stw	fp,48(sp)
   2f8dc:	df000c04 	addi	fp,sp,48
   2f8e0:	e13ffc15 	stw	r4,-16(fp)
   2f8e4:	e17ffd15 	stw	r5,-12(fp)
   2f8e8:	e1bffe15 	stw	r6,-8(fp)
   2f8ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   2f8f0:	e0bffe17 	ldw	r2,-8(fp)
   2f8f4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   2f8f8:	e0bfff17 	ldw	r2,-4(fp)
   2f8fc:	1090000c 	andi	r2,r2,16384
   2f900:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2f904:	00003c06 	br	2f9f8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f908:	e0bffc17 	ldw	r2,-16(fp)
   2f90c:	10800517 	ldw	r2,20(r2)
   2f910:	10800044 	addi	r2,r2,1
   2f914:	10800fcc 	andi	r2,r2,63
   2f918:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   2f91c:	e0bffc17 	ldw	r2,-16(fp)
   2f920:	10c00417 	ldw	r3,16(r2)
   2f924:	e0bff717 	ldw	r2,-36(fp)
   2f928:	1880221e 	bne	r3,r2,2f9b4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   2f92c:	e0bff517 	ldw	r2,-44(fp)
   2f930:	10000526 	beq	r2,zero,2f948 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   2f934:	002f8940 	call	2f894 <alt_get_errno>
   2f938:	1007883a 	mov	r3,r2
   2f93c:	008002c4 	movi	r2,11
   2f940:	18800015 	stw	r2,0(r3)
        break;
   2f944:	00002e06 	br	2fa00 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f948:	0005303a 	rdctl	r2,status
   2f94c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f950:	e0fff917 	ldw	r3,-28(fp)
   2f954:	00bfff84 	movi	r2,-2
   2f958:	1884703a 	and	r2,r3,r2
   2f95c:	1001703a 	wrctl	status,r2
  
  return context;
   2f960:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   2f964:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2f968:	e0bffc17 	ldw	r2,-16(fp)
   2f96c:	10800117 	ldw	r2,4(r2)
   2f970:	10c11014 	ori	r3,r2,1088
   2f974:	e0bffc17 	ldw	r2,-16(fp)
   2f978:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f97c:	e0bffc17 	ldw	r2,-16(fp)
   2f980:	10800017 	ldw	r2,0(r2)
   2f984:	10800304 	addi	r2,r2,12
   2f988:	e0fffc17 	ldw	r3,-16(fp)
   2f98c:	18c00117 	ldw	r3,4(r3)
   2f990:	10c00035 	stwio	r3,0(r2)
   2f994:	e0bff817 	ldw	r2,-32(fp)
   2f998:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f99c:	e0bff617 	ldw	r2,-40(fp)
   2f9a0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   2f9a4:	e0bffc17 	ldw	r2,-16(fp)
   2f9a8:	10c00417 	ldw	r3,16(r2)
   2f9ac:	e0bff717 	ldw	r2,-36(fp)
   2f9b0:	18bffc26 	beq	r3,r2,2f9a4 <__alt_data_end+0xfffef9a4>
      }
    }

    count--;
   2f9b4:	e0bff417 	ldw	r2,-48(fp)
   2f9b8:	10bfffc4 	addi	r2,r2,-1
   2f9bc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   2f9c0:	e0bffc17 	ldw	r2,-16(fp)
   2f9c4:	10c00517 	ldw	r3,20(r2)
   2f9c8:	e0bffd17 	ldw	r2,-12(fp)
   2f9cc:	11000044 	addi	r4,r2,1
   2f9d0:	e13ffd15 	stw	r4,-12(fp)
   2f9d4:	10800003 	ldbu	r2,0(r2)
   2f9d8:	1009883a 	mov	r4,r2
   2f9dc:	e0bffc17 	ldw	r2,-16(fp)
   2f9e0:	10c5883a 	add	r2,r2,r3
   2f9e4:	10801704 	addi	r2,r2,92
   2f9e8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   2f9ec:	e0bffc17 	ldw	r2,-16(fp)
   2f9f0:	e0fff717 	ldw	r3,-36(fp)
   2f9f4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2f9f8:	e0bff417 	ldw	r2,-48(fp)
   2f9fc:	103fc21e 	bne	r2,zero,2f908 <__alt_data_end+0xfffef908>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fa00:	0005303a 	rdctl	r2,status
   2fa04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fa08:	e0fffb17 	ldw	r3,-20(fp)
   2fa0c:	00bfff84 	movi	r2,-2
   2fa10:	1884703a 	and	r2,r3,r2
   2fa14:	1001703a 	wrctl	status,r2
  
  return context;
   2fa18:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   2fa1c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2fa20:	e0bffc17 	ldw	r2,-16(fp)
   2fa24:	10800117 	ldw	r2,4(r2)
   2fa28:	10c11014 	ori	r3,r2,1088
   2fa2c:	e0bffc17 	ldw	r2,-16(fp)
   2fa30:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2fa34:	e0bffc17 	ldw	r2,-16(fp)
   2fa38:	10800017 	ldw	r2,0(r2)
   2fa3c:	10800304 	addi	r2,r2,12
   2fa40:	e0fffc17 	ldw	r3,-16(fp)
   2fa44:	18c00117 	ldw	r3,4(r3)
   2fa48:	10c00035 	stwio	r3,0(r2)
   2fa4c:	e0bff817 	ldw	r2,-32(fp)
   2fa50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fa54:	e0bffa17 	ldw	r2,-24(fp)
   2fa58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   2fa5c:	e0fffe17 	ldw	r3,-8(fp)
   2fa60:	e0bff417 	ldw	r2,-48(fp)
   2fa64:	1885c83a 	sub	r2,r3,r2
}
   2fa68:	e037883a 	mov	sp,fp
   2fa6c:	dfc00117 	ldw	ra,4(sp)
   2fa70:	df000017 	ldw	fp,0(sp)
   2fa74:	dec00204 	addi	sp,sp,8
   2fa78:	f800283a 	ret

0002fa7c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2fa7c:	defff504 	addi	sp,sp,-44
   2fa80:	df000a15 	stw	fp,40(sp)
   2fa84:	df000a04 	addi	fp,sp,40
   2fa88:	e13ffc15 	stw	r4,-16(fp)
   2fa8c:	e17ffd15 	stw	r5,-12(fp)
   2fa90:	e1bffe15 	stw	r6,-8(fp)
   2fa94:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2fa98:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2fa9c:	d0a70917 	ldw	r2,-25564(gp)
  
  if (alt_ticks_per_second ())
   2faa0:	10003c26 	beq	r2,zero,2fb94 <alt_alarm_start+0x118>
  {
    if (alarm)
   2faa4:	e0bffc17 	ldw	r2,-16(fp)
   2faa8:	10003826 	beq	r2,zero,2fb8c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2faac:	e0bffc17 	ldw	r2,-16(fp)
   2fab0:	e0fffe17 	ldw	r3,-8(fp)
   2fab4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2fab8:	e0bffc17 	ldw	r2,-16(fp)
   2fabc:	e0ffff17 	ldw	r3,-4(fp)
   2fac0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fac4:	0005303a 	rdctl	r2,status
   2fac8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2facc:	e0fff917 	ldw	r3,-28(fp)
   2fad0:	00bfff84 	movi	r2,-2
   2fad4:	1884703a 	and	r2,r3,r2
   2fad8:	1001703a 	wrctl	status,r2
  
  return context;
   2fadc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2fae0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2fae4:	d0a70a17 	ldw	r2,-25560(gp)
      
      current_nticks = alt_nticks();
   2fae8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2faec:	e0fffd17 	ldw	r3,-12(fp)
   2faf0:	e0bff617 	ldw	r2,-40(fp)
   2faf4:	1885883a 	add	r2,r3,r2
   2faf8:	10c00044 	addi	r3,r2,1
   2fafc:	e0bffc17 	ldw	r2,-16(fp)
   2fb00:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2fb04:	e0bffc17 	ldw	r2,-16(fp)
   2fb08:	10c00217 	ldw	r3,8(r2)
   2fb0c:	e0bff617 	ldw	r2,-40(fp)
   2fb10:	1880042e 	bgeu	r3,r2,2fb24 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2fb14:	e0bffc17 	ldw	r2,-16(fp)
   2fb18:	00c00044 	movi	r3,1
   2fb1c:	10c00405 	stb	r3,16(r2)
   2fb20:	00000206 	br	2fb2c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2fb24:	e0bffc17 	ldw	r2,-16(fp)
   2fb28:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2fb2c:	e0bffc17 	ldw	r2,-16(fp)
   2fb30:	d0e00f04 	addi	r3,gp,-32708
   2fb34:	e0fffa15 	stw	r3,-24(fp)
   2fb38:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2fb3c:	e0bffb17 	ldw	r2,-20(fp)
   2fb40:	e0fffa17 	ldw	r3,-24(fp)
   2fb44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2fb48:	e0bffa17 	ldw	r2,-24(fp)
   2fb4c:	10c00017 	ldw	r3,0(r2)
   2fb50:	e0bffb17 	ldw	r2,-20(fp)
   2fb54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2fb58:	e0bffa17 	ldw	r2,-24(fp)
   2fb5c:	10800017 	ldw	r2,0(r2)
   2fb60:	e0fffb17 	ldw	r3,-20(fp)
   2fb64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2fb68:	e0bffa17 	ldw	r2,-24(fp)
   2fb6c:	e0fffb17 	ldw	r3,-20(fp)
   2fb70:	10c00015 	stw	r3,0(r2)
   2fb74:	e0bff817 	ldw	r2,-32(fp)
   2fb78:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fb7c:	e0bff717 	ldw	r2,-36(fp)
   2fb80:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2fb84:	0005883a 	mov	r2,zero
   2fb88:	00000306 	br	2fb98 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2fb8c:	00bffa84 	movi	r2,-22
   2fb90:	00000106 	br	2fb98 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2fb94:	00bfde84 	movi	r2,-134
  }
}
   2fb98:	e037883a 	mov	sp,fp
   2fb9c:	df000017 	ldw	fp,0(sp)
   2fba0:	dec00104 	addi	sp,sp,4
   2fba4:	f800283a 	ret

0002fba8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2fba8:	defffe04 	addi	sp,sp,-8
   2fbac:	df000115 	stw	fp,4(sp)
   2fbb0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2fbb4:	e03fff15 	stw	zero,-4(fp)
   2fbb8:	00000506 	br	2fbd0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   2fbbc:	e0bfff17 	ldw	r2,-4(fp)
   2fbc0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2fbc4:	e0bfff17 	ldw	r2,-4(fp)
   2fbc8:	10800804 	addi	r2,r2,32
   2fbcc:	e0bfff15 	stw	r2,-4(fp)
   2fbd0:	e0bfff17 	ldw	r2,-4(fp)
   2fbd4:	10820030 	cmpltui	r2,r2,2048
   2fbd8:	103ff81e 	bne	r2,zero,2fbbc <__alt_data_end+0xfffefbbc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2fbdc:	0001883a 	nop
   2fbe0:	e037883a 	mov	sp,fp
   2fbe4:	df000017 	ldw	fp,0(sp)
   2fbe8:	dec00104 	addi	sp,sp,4
   2fbec:	f800283a 	ret

0002fbf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fbf0:	defffe04 	addi	sp,sp,-8
   2fbf4:	dfc00115 	stw	ra,4(sp)
   2fbf8:	df000015 	stw	fp,0(sp)
   2fbfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fc00:	d0a00c17 	ldw	r2,-32720(gp)
   2fc04:	10000326 	beq	r2,zero,2fc14 <alt_get_errno+0x24>
   2fc08:	d0a00c17 	ldw	r2,-32720(gp)
   2fc0c:	103ee83a 	callr	r2
   2fc10:	00000106 	br	2fc18 <alt_get_errno+0x28>
   2fc14:	d0a6fe04 	addi	r2,gp,-25608
}
   2fc18:	e037883a 	mov	sp,fp
   2fc1c:	dfc00117 	ldw	ra,4(sp)
   2fc20:	df000017 	ldw	fp,0(sp)
   2fc24:	dec00204 	addi	sp,sp,8
   2fc28:	f800283a 	ret

0002fc2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2fc2c:	defffa04 	addi	sp,sp,-24
   2fc30:	dfc00515 	stw	ra,20(sp)
   2fc34:	df000415 	stw	fp,16(sp)
   2fc38:	df000404 	addi	fp,sp,16
   2fc3c:	e13ffe15 	stw	r4,-8(fp)
   2fc40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2fc44:	e0bffe17 	ldw	r2,-8(fp)
   2fc48:	10000326 	beq	r2,zero,2fc58 <alt_dev_llist_insert+0x2c>
   2fc4c:	e0bffe17 	ldw	r2,-8(fp)
   2fc50:	10800217 	ldw	r2,8(r2)
   2fc54:	1000061e 	bne	r2,zero,2fc70 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2fc58:	002fbf00 	call	2fbf0 <alt_get_errno>
   2fc5c:	1007883a 	mov	r3,r2
   2fc60:	00800584 	movi	r2,22
   2fc64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2fc68:	00bffa84 	movi	r2,-22
   2fc6c:	00001306 	br	2fcbc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2fc70:	e0bffe17 	ldw	r2,-8(fp)
   2fc74:	e0ffff17 	ldw	r3,-4(fp)
   2fc78:	e0fffc15 	stw	r3,-16(fp)
   2fc7c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2fc80:	e0bffd17 	ldw	r2,-12(fp)
   2fc84:	e0fffc17 	ldw	r3,-16(fp)
   2fc88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2fc8c:	e0bffc17 	ldw	r2,-16(fp)
   2fc90:	10c00017 	ldw	r3,0(r2)
   2fc94:	e0bffd17 	ldw	r2,-12(fp)
   2fc98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2fc9c:	e0bffc17 	ldw	r2,-16(fp)
   2fca0:	10800017 	ldw	r2,0(r2)
   2fca4:	e0fffd17 	ldw	r3,-12(fp)
   2fca8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2fcac:	e0bffc17 	ldw	r2,-16(fp)
   2fcb0:	e0fffd17 	ldw	r3,-12(fp)
   2fcb4:	10c00015 	stw	r3,0(r2)

  return 0;  
   2fcb8:	0005883a 	mov	r2,zero
}
   2fcbc:	e037883a 	mov	sp,fp
   2fcc0:	dfc00117 	ldw	ra,4(sp)
   2fcc4:	df000017 	ldw	fp,0(sp)
   2fcc8:	dec00204 	addi	sp,sp,8
   2fccc:	f800283a 	ret

0002fcd0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2fcd0:	defffd04 	addi	sp,sp,-12
   2fcd4:	dfc00215 	stw	ra,8(sp)
   2fcd8:	df000115 	stw	fp,4(sp)
   2fcdc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2fce0:	008000f4 	movhi	r2,3
   2fce4:	10829904 	addi	r2,r2,2660
   2fce8:	e0bfff15 	stw	r2,-4(fp)
   2fcec:	00000606 	br	2fd08 <_do_ctors+0x38>
        (*ctor) (); 
   2fcf0:	e0bfff17 	ldw	r2,-4(fp)
   2fcf4:	10800017 	ldw	r2,0(r2)
   2fcf8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2fcfc:	e0bfff17 	ldw	r2,-4(fp)
   2fd00:	10bfff04 	addi	r2,r2,-4
   2fd04:	e0bfff15 	stw	r2,-4(fp)
   2fd08:	e0ffff17 	ldw	r3,-4(fp)
   2fd0c:	008000f4 	movhi	r2,3
   2fd10:	10829a04 	addi	r2,r2,2664
   2fd14:	18bff62e 	bgeu	r3,r2,2fcf0 <__alt_data_end+0xfffefcf0>
        (*ctor) (); 
}
   2fd18:	0001883a 	nop
   2fd1c:	e037883a 	mov	sp,fp
   2fd20:	dfc00117 	ldw	ra,4(sp)
   2fd24:	df000017 	ldw	fp,0(sp)
   2fd28:	dec00204 	addi	sp,sp,8
   2fd2c:	f800283a 	ret

0002fd30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2fd30:	defffd04 	addi	sp,sp,-12
   2fd34:	dfc00215 	stw	ra,8(sp)
   2fd38:	df000115 	stw	fp,4(sp)
   2fd3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2fd40:	008000f4 	movhi	r2,3
   2fd44:	10829904 	addi	r2,r2,2660
   2fd48:	e0bfff15 	stw	r2,-4(fp)
   2fd4c:	00000606 	br	2fd68 <_do_dtors+0x38>
        (*dtor) (); 
   2fd50:	e0bfff17 	ldw	r2,-4(fp)
   2fd54:	10800017 	ldw	r2,0(r2)
   2fd58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2fd5c:	e0bfff17 	ldw	r2,-4(fp)
   2fd60:	10bfff04 	addi	r2,r2,-4
   2fd64:	e0bfff15 	stw	r2,-4(fp)
   2fd68:	e0ffff17 	ldw	r3,-4(fp)
   2fd6c:	008000f4 	movhi	r2,3
   2fd70:	10829a04 	addi	r2,r2,2664
   2fd74:	18bff62e 	bgeu	r3,r2,2fd50 <__alt_data_end+0xfffefd50>
        (*dtor) (); 
}
   2fd78:	0001883a 	nop
   2fd7c:	e037883a 	mov	sp,fp
   2fd80:	dfc00117 	ldw	ra,4(sp)
   2fd84:	df000017 	ldw	fp,0(sp)
   2fd88:	dec00204 	addi	sp,sp,8
   2fd8c:	f800283a 	ret

0002fd90 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2fd90:	defffa04 	addi	sp,sp,-24
   2fd94:	dfc00515 	stw	ra,20(sp)
   2fd98:	df000415 	stw	fp,16(sp)
   2fd9c:	df000404 	addi	fp,sp,16
   2fda0:	e13ffe15 	stw	r4,-8(fp)
   2fda4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2fda8:	e0bfff17 	ldw	r2,-4(fp)
   2fdac:	10800017 	ldw	r2,0(r2)
   2fdb0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2fdb4:	e13ffe17 	ldw	r4,-8(fp)
   2fdb8:	00223100 	call	22310 <strlen>
   2fdbc:	10800044 	addi	r2,r2,1
   2fdc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2fdc4:	00000d06 	br	2fdfc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2fdc8:	e0bffc17 	ldw	r2,-16(fp)
   2fdcc:	10800217 	ldw	r2,8(r2)
   2fdd0:	e0fffd17 	ldw	r3,-12(fp)
   2fdd4:	180d883a 	mov	r6,r3
   2fdd8:	e17ffe17 	ldw	r5,-8(fp)
   2fddc:	1009883a 	mov	r4,r2
   2fde0:	00307200 	call	30720 <memcmp>
   2fde4:	1000021e 	bne	r2,zero,2fdf0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2fde8:	e0bffc17 	ldw	r2,-16(fp)
   2fdec:	00000706 	br	2fe0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2fdf0:	e0bffc17 	ldw	r2,-16(fp)
   2fdf4:	10800017 	ldw	r2,0(r2)
   2fdf8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2fdfc:	e0fffc17 	ldw	r3,-16(fp)
   2fe00:	e0bfff17 	ldw	r2,-4(fp)
   2fe04:	18bff01e 	bne	r3,r2,2fdc8 <__alt_data_end+0xfffefdc8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2fe08:	0005883a 	mov	r2,zero
}
   2fe0c:	e037883a 	mov	sp,fp
   2fe10:	dfc00117 	ldw	ra,4(sp)
   2fe14:	df000017 	ldw	fp,0(sp)
   2fe18:	dec00204 	addi	sp,sp,8
   2fe1c:	f800283a 	ret

0002fe20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2fe20:	defffb04 	addi	sp,sp,-20
   2fe24:	dfc00415 	stw	ra,16(sp)
   2fe28:	df000315 	stw	fp,12(sp)
   2fe2c:	df000304 	addi	fp,sp,12
   2fe30:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2fe34:	d0a00717 	ldw	r2,-32740(gp)
   2fe38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2fe3c:	00003106 	br	2ff04 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2fe40:	e0bffd17 	ldw	r2,-12(fp)
   2fe44:	10800217 	ldw	r2,8(r2)
   2fe48:	1009883a 	mov	r4,r2
   2fe4c:	00223100 	call	22310 <strlen>
   2fe50:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2fe54:	e0bffd17 	ldw	r2,-12(fp)
   2fe58:	10c00217 	ldw	r3,8(r2)
   2fe5c:	e0bffe17 	ldw	r2,-8(fp)
   2fe60:	10bfffc4 	addi	r2,r2,-1
   2fe64:	1885883a 	add	r2,r3,r2
   2fe68:	10800003 	ldbu	r2,0(r2)
   2fe6c:	10803fcc 	andi	r2,r2,255
   2fe70:	1080201c 	xori	r2,r2,128
   2fe74:	10bfe004 	addi	r2,r2,-128
   2fe78:	10800bd8 	cmpnei	r2,r2,47
   2fe7c:	1000031e 	bne	r2,zero,2fe8c <alt_find_file+0x6c>
    {
      len -= 1;
   2fe80:	e0bffe17 	ldw	r2,-8(fp)
   2fe84:	10bfffc4 	addi	r2,r2,-1
   2fe88:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2fe8c:	e0bffe17 	ldw	r2,-8(fp)
   2fe90:	e0ffff17 	ldw	r3,-4(fp)
   2fe94:	1885883a 	add	r2,r3,r2
   2fe98:	10800003 	ldbu	r2,0(r2)
   2fe9c:	10803fcc 	andi	r2,r2,255
   2fea0:	1080201c 	xori	r2,r2,128
   2fea4:	10bfe004 	addi	r2,r2,-128
   2fea8:	10800be0 	cmpeqi	r2,r2,47
   2feac:	1000081e 	bne	r2,zero,2fed0 <alt_find_file+0xb0>
   2feb0:	e0bffe17 	ldw	r2,-8(fp)
   2feb4:	e0ffff17 	ldw	r3,-4(fp)
   2feb8:	1885883a 	add	r2,r3,r2
   2febc:	10800003 	ldbu	r2,0(r2)
   2fec0:	10803fcc 	andi	r2,r2,255
   2fec4:	1080201c 	xori	r2,r2,128
   2fec8:	10bfe004 	addi	r2,r2,-128
   2fecc:	10000a1e 	bne	r2,zero,2fef8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2fed0:	e0bffd17 	ldw	r2,-12(fp)
   2fed4:	10800217 	ldw	r2,8(r2)
   2fed8:	e0fffe17 	ldw	r3,-8(fp)
   2fedc:	180d883a 	mov	r6,r3
   2fee0:	e17fff17 	ldw	r5,-4(fp)
   2fee4:	1009883a 	mov	r4,r2
   2fee8:	00307200 	call	30720 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2feec:	1000021e 	bne	r2,zero,2fef8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2fef0:	e0bffd17 	ldw	r2,-12(fp)
   2fef4:	00000706 	br	2ff14 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2fef8:	e0bffd17 	ldw	r2,-12(fp)
   2fefc:	10800017 	ldw	r2,0(r2)
   2ff00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2ff04:	e0fffd17 	ldw	r3,-12(fp)
   2ff08:	d0a00704 	addi	r2,gp,-32740
   2ff0c:	18bfcc1e 	bne	r3,r2,2fe40 <__alt_data_end+0xfffefe40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2ff10:	0005883a 	mov	r2,zero
}
   2ff14:	e037883a 	mov	sp,fp
   2ff18:	dfc00117 	ldw	ra,4(sp)
   2ff1c:	df000017 	ldw	fp,0(sp)
   2ff20:	dec00204 	addi	sp,sp,8
   2ff24:	f800283a 	ret

0002ff28 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2ff28:	defffc04 	addi	sp,sp,-16
   2ff2c:	df000315 	stw	fp,12(sp)
   2ff30:	df000304 	addi	fp,sp,12
   2ff34:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2ff38:	00bffa04 	movi	r2,-24
   2ff3c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2ff40:	e03ffd15 	stw	zero,-12(fp)
   2ff44:	00001906 	br	2ffac <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   2ff48:	008000f4 	movhi	r2,3
   2ff4c:	10864a04 	addi	r2,r2,6440
   2ff50:	e0fffd17 	ldw	r3,-12(fp)
   2ff54:	18c00324 	muli	r3,r3,12
   2ff58:	10c5883a 	add	r2,r2,r3
   2ff5c:	10800017 	ldw	r2,0(r2)
   2ff60:	10000f1e 	bne	r2,zero,2ffa0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   2ff64:	008000f4 	movhi	r2,3
   2ff68:	10864a04 	addi	r2,r2,6440
   2ff6c:	e0fffd17 	ldw	r3,-12(fp)
   2ff70:	18c00324 	muli	r3,r3,12
   2ff74:	10c5883a 	add	r2,r2,r3
   2ff78:	e0ffff17 	ldw	r3,-4(fp)
   2ff7c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2ff80:	d0e00b17 	ldw	r3,-32724(gp)
   2ff84:	e0bffd17 	ldw	r2,-12(fp)
   2ff88:	1880020e 	bge	r3,r2,2ff94 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   2ff8c:	e0bffd17 	ldw	r2,-12(fp)
   2ff90:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   2ff94:	e0bffd17 	ldw	r2,-12(fp)
   2ff98:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2ff9c:	00000606 	br	2ffb8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2ffa0:	e0bffd17 	ldw	r2,-12(fp)
   2ffa4:	10800044 	addi	r2,r2,1
   2ffa8:	e0bffd15 	stw	r2,-12(fp)
   2ffac:	e0bffd17 	ldw	r2,-12(fp)
   2ffb0:	10800810 	cmplti	r2,r2,32
   2ffb4:	103fe41e 	bne	r2,zero,2ff48 <__alt_data_end+0xfffeff48>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2ffb8:	e0bffe17 	ldw	r2,-8(fp)
}
   2ffbc:	e037883a 	mov	sp,fp
   2ffc0:	df000017 	ldw	fp,0(sp)
   2ffc4:	dec00104 	addi	sp,sp,4
   2ffc8:	f800283a 	ret

0002ffcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2ffcc:	defffe04 	addi	sp,sp,-8
   2ffd0:	dfc00115 	stw	ra,4(sp)
   2ffd4:	df000015 	stw	fp,0(sp)
   2ffd8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2ffdc:	01440004 	movi	r5,4096
   2ffe0:	0009883a 	mov	r4,zero
   2ffe4:	00305a80 	call	305a8 <alt_icache_flush>
#endif
}
   2ffe8:	0001883a 	nop
   2ffec:	e037883a 	mov	sp,fp
   2fff0:	dfc00117 	ldw	ra,4(sp)
   2fff4:	df000017 	ldw	fp,0(sp)
   2fff8:	dec00204 	addi	sp,sp,8
   2fffc:	f800283a 	ret

00030000 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   30000:	defff904 	addi	sp,sp,-28
   30004:	dfc00615 	stw	ra,24(sp)
   30008:	df000515 	stw	fp,20(sp)
   3000c:	df000504 	addi	fp,sp,20
   30010:	e13ffc15 	stw	r4,-16(fp)
   30014:	e17ffd15 	stw	r5,-12(fp)
   30018:	e1bffe15 	stw	r6,-8(fp)
   3001c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   30020:	e0800217 	ldw	r2,8(fp)
   30024:	d8800015 	stw	r2,0(sp)
   30028:	e1ffff17 	ldw	r7,-4(fp)
   3002c:	e1bffe17 	ldw	r6,-8(fp)
   30030:	e17ffd17 	ldw	r5,-12(fp)
   30034:	e13ffc17 	ldw	r4,-16(fp)
   30038:	00301b00 	call	301b0 <alt_iic_isr_register>
}  
   3003c:	e037883a 	mov	sp,fp
   30040:	dfc00117 	ldw	ra,4(sp)
   30044:	df000017 	ldw	fp,0(sp)
   30048:	dec00204 	addi	sp,sp,8
   3004c:	f800283a 	ret

00030050 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   30050:	defff904 	addi	sp,sp,-28
   30054:	df000615 	stw	fp,24(sp)
   30058:	df000604 	addi	fp,sp,24
   3005c:	e13ffe15 	stw	r4,-8(fp)
   30060:	e17fff15 	stw	r5,-4(fp)
   30064:	e0bfff17 	ldw	r2,-4(fp)
   30068:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3006c:	0005303a 	rdctl	r2,status
   30070:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30074:	e0fffb17 	ldw	r3,-20(fp)
   30078:	00bfff84 	movi	r2,-2
   3007c:	1884703a 	and	r2,r3,r2
   30080:	1001703a 	wrctl	status,r2
  
  return context;
   30084:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   30088:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   3008c:	00c00044 	movi	r3,1
   30090:	e0bffa17 	ldw	r2,-24(fp)
   30094:	1884983a 	sll	r2,r3,r2
   30098:	1007883a 	mov	r3,r2
   3009c:	d0a70817 	ldw	r2,-25568(gp)
   300a0:	1884b03a 	or	r2,r3,r2
   300a4:	d0a70815 	stw	r2,-25568(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   300a8:	d0a70817 	ldw	r2,-25568(gp)
   300ac:	100170fa 	wrctl	ienable,r2
   300b0:	e0bffc17 	ldw	r2,-16(fp)
   300b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   300b8:	e0bffd17 	ldw	r2,-12(fp)
   300bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   300c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   300c4:	0001883a 	nop
}
   300c8:	e037883a 	mov	sp,fp
   300cc:	df000017 	ldw	fp,0(sp)
   300d0:	dec00104 	addi	sp,sp,4
   300d4:	f800283a 	ret

000300d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   300d8:	defff904 	addi	sp,sp,-28
   300dc:	df000615 	stw	fp,24(sp)
   300e0:	df000604 	addi	fp,sp,24
   300e4:	e13ffe15 	stw	r4,-8(fp)
   300e8:	e17fff15 	stw	r5,-4(fp)
   300ec:	e0bfff17 	ldw	r2,-4(fp)
   300f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   300f4:	0005303a 	rdctl	r2,status
   300f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   300fc:	e0fffb17 	ldw	r3,-20(fp)
   30100:	00bfff84 	movi	r2,-2
   30104:	1884703a 	and	r2,r3,r2
   30108:	1001703a 	wrctl	status,r2
  
  return context;
   3010c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   30110:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   30114:	00c00044 	movi	r3,1
   30118:	e0bffa17 	ldw	r2,-24(fp)
   3011c:	1884983a 	sll	r2,r3,r2
   30120:	0084303a 	nor	r2,zero,r2
   30124:	1007883a 	mov	r3,r2
   30128:	d0a70817 	ldw	r2,-25568(gp)
   3012c:	1884703a 	and	r2,r3,r2
   30130:	d0a70815 	stw	r2,-25568(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   30134:	d0a70817 	ldw	r2,-25568(gp)
   30138:	100170fa 	wrctl	ienable,r2
   3013c:	e0bffc17 	ldw	r2,-16(fp)
   30140:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30144:	e0bffd17 	ldw	r2,-12(fp)
   30148:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3014c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   30150:	0001883a 	nop
}
   30154:	e037883a 	mov	sp,fp
   30158:	df000017 	ldw	fp,0(sp)
   3015c:	dec00104 	addi	sp,sp,4
   30160:	f800283a 	ret

00030164 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   30164:	defffc04 	addi	sp,sp,-16
   30168:	df000315 	stw	fp,12(sp)
   3016c:	df000304 	addi	fp,sp,12
   30170:	e13ffe15 	stw	r4,-8(fp)
   30174:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   30178:	000530fa 	rdctl	r2,ienable
   3017c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   30180:	00c00044 	movi	r3,1
   30184:	e0bfff17 	ldw	r2,-4(fp)
   30188:	1884983a 	sll	r2,r3,r2
   3018c:	1007883a 	mov	r3,r2
   30190:	e0bffd17 	ldw	r2,-12(fp)
   30194:	1884703a 	and	r2,r3,r2
   30198:	1004c03a 	cmpne	r2,r2,zero
   3019c:	10803fcc 	andi	r2,r2,255
}
   301a0:	e037883a 	mov	sp,fp
   301a4:	df000017 	ldw	fp,0(sp)
   301a8:	dec00104 	addi	sp,sp,4
   301ac:	f800283a 	ret

000301b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   301b0:	defff504 	addi	sp,sp,-44
   301b4:	dfc00a15 	stw	ra,40(sp)
   301b8:	df000915 	stw	fp,36(sp)
   301bc:	df000904 	addi	fp,sp,36
   301c0:	e13ffc15 	stw	r4,-16(fp)
   301c4:	e17ffd15 	stw	r5,-12(fp)
   301c8:	e1bffe15 	stw	r6,-8(fp)
   301cc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   301d0:	00bffa84 	movi	r2,-22
   301d4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   301d8:	e0bffd17 	ldw	r2,-12(fp)
   301dc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   301e0:	e0bff817 	ldw	r2,-32(fp)
   301e4:	10800808 	cmpgei	r2,r2,32
   301e8:	1000271e 	bne	r2,zero,30288 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   301ec:	0005303a 	rdctl	r2,status
   301f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   301f4:	e0fffb17 	ldw	r3,-20(fp)
   301f8:	00bfff84 	movi	r2,-2
   301fc:	1884703a 	and	r2,r3,r2
   30200:	1001703a 	wrctl	status,r2
  
  return context;
   30204:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   30208:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   3020c:	008000f4 	movhi	r2,3
   30210:	10920904 	addi	r2,r2,18468
   30214:	e0fff817 	ldw	r3,-32(fp)
   30218:	180690fa 	slli	r3,r3,3
   3021c:	10c5883a 	add	r2,r2,r3
   30220:	e0fffe17 	ldw	r3,-8(fp)
   30224:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   30228:	008000f4 	movhi	r2,3
   3022c:	10920904 	addi	r2,r2,18468
   30230:	e0fff817 	ldw	r3,-32(fp)
   30234:	180690fa 	slli	r3,r3,3
   30238:	10c5883a 	add	r2,r2,r3
   3023c:	10800104 	addi	r2,r2,4
   30240:	e0ffff17 	ldw	r3,-4(fp)
   30244:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   30248:	e0bffe17 	ldw	r2,-8(fp)
   3024c:	10000526 	beq	r2,zero,30264 <alt_iic_isr_register+0xb4>
   30250:	e0bff817 	ldw	r2,-32(fp)
   30254:	100b883a 	mov	r5,r2
   30258:	e13ffc17 	ldw	r4,-16(fp)
   3025c:	00300500 	call	30050 <alt_ic_irq_enable>
   30260:	00000406 	br	30274 <alt_iic_isr_register+0xc4>
   30264:	e0bff817 	ldw	r2,-32(fp)
   30268:	100b883a 	mov	r5,r2
   3026c:	e13ffc17 	ldw	r4,-16(fp)
   30270:	00300d80 	call	300d8 <alt_ic_irq_disable>
   30274:	e0bff715 	stw	r2,-36(fp)
   30278:	e0bffa17 	ldw	r2,-24(fp)
   3027c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30280:	e0bff917 	ldw	r2,-28(fp)
   30284:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   30288:	e0bff717 	ldw	r2,-36(fp)
}
   3028c:	e037883a 	mov	sp,fp
   30290:	dfc00117 	ldw	ra,4(sp)
   30294:	df000017 	ldw	fp,0(sp)
   30298:	dec00204 	addi	sp,sp,8
   3029c:	f800283a 	ret

000302a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   302a0:	defff904 	addi	sp,sp,-28
   302a4:	dfc00615 	stw	ra,24(sp)
   302a8:	df000515 	stw	fp,20(sp)
   302ac:	df000504 	addi	fp,sp,20
   302b0:	e13ffc15 	stw	r4,-16(fp)
   302b4:	e17ffd15 	stw	r5,-12(fp)
   302b8:	e1bffe15 	stw	r6,-8(fp)
   302bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   302c0:	e1bfff17 	ldw	r6,-4(fp)
   302c4:	e17ffe17 	ldw	r5,-8(fp)
   302c8:	e13ffd17 	ldw	r4,-12(fp)
   302cc:	002e0840 	call	2e084 <open>
   302d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   302d4:	e0bffb17 	ldw	r2,-20(fp)
   302d8:	10001c16 	blt	r2,zero,3034c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   302dc:	008000f4 	movhi	r2,3
   302e0:	10864a04 	addi	r2,r2,6440
   302e4:	e0fffb17 	ldw	r3,-20(fp)
   302e8:	18c00324 	muli	r3,r3,12
   302ec:	10c5883a 	add	r2,r2,r3
   302f0:	10c00017 	ldw	r3,0(r2)
   302f4:	e0bffc17 	ldw	r2,-16(fp)
   302f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   302fc:	008000f4 	movhi	r2,3
   30300:	10864a04 	addi	r2,r2,6440
   30304:	e0fffb17 	ldw	r3,-20(fp)
   30308:	18c00324 	muli	r3,r3,12
   3030c:	10c5883a 	add	r2,r2,r3
   30310:	10800104 	addi	r2,r2,4
   30314:	10c00017 	ldw	r3,0(r2)
   30318:	e0bffc17 	ldw	r2,-16(fp)
   3031c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   30320:	008000f4 	movhi	r2,3
   30324:	10864a04 	addi	r2,r2,6440
   30328:	e0fffb17 	ldw	r3,-20(fp)
   3032c:	18c00324 	muli	r3,r3,12
   30330:	10c5883a 	add	r2,r2,r3
   30334:	10800204 	addi	r2,r2,8
   30338:	10c00017 	ldw	r3,0(r2)
   3033c:	e0bffc17 	ldw	r2,-16(fp)
   30340:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   30344:	e13ffb17 	ldw	r4,-20(fp)
   30348:	002e3100 	call	2e310 <alt_release_fd>
  }
} 
   3034c:	0001883a 	nop
   30350:	e037883a 	mov	sp,fp
   30354:	dfc00117 	ldw	ra,4(sp)
   30358:	df000017 	ldw	fp,0(sp)
   3035c:	dec00204 	addi	sp,sp,8
   30360:	f800283a 	ret

00030364 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   30364:	defffb04 	addi	sp,sp,-20
   30368:	dfc00415 	stw	ra,16(sp)
   3036c:	df000315 	stw	fp,12(sp)
   30370:	df000304 	addi	fp,sp,12
   30374:	e13ffd15 	stw	r4,-12(fp)
   30378:	e17ffe15 	stw	r5,-8(fp)
   3037c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   30380:	01c07fc4 	movi	r7,511
   30384:	01800044 	movi	r6,1
   30388:	e17ffd17 	ldw	r5,-12(fp)
   3038c:	010000f4 	movhi	r4,3
   30390:	21064d04 	addi	r4,r4,6452
   30394:	00302a00 	call	302a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   30398:	01c07fc4 	movi	r7,511
   3039c:	000d883a 	mov	r6,zero
   303a0:	e17ffe17 	ldw	r5,-8(fp)
   303a4:	010000f4 	movhi	r4,3
   303a8:	21064a04 	addi	r4,r4,6440
   303ac:	00302a00 	call	302a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   303b0:	01c07fc4 	movi	r7,511
   303b4:	01800044 	movi	r6,1
   303b8:	e17fff17 	ldw	r5,-4(fp)
   303bc:	010000f4 	movhi	r4,3
   303c0:	21065004 	addi	r4,r4,6464
   303c4:	00302a00 	call	302a0 <alt_open_fd>
}  
   303c8:	0001883a 	nop
   303cc:	e037883a 	mov	sp,fp
   303d0:	dfc00117 	ldw	ra,4(sp)
   303d4:	df000017 	ldw	fp,0(sp)
   303d8:	dec00204 	addi	sp,sp,8
   303dc:	f800283a 	ret

000303e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   303e0:	defffa04 	addi	sp,sp,-24
   303e4:	df000515 	stw	fp,20(sp)
   303e8:	df000504 	addi	fp,sp,20
   303ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   303f0:	0005303a 	rdctl	r2,status
   303f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   303f8:	e0fffc17 	ldw	r3,-16(fp)
   303fc:	00bfff84 	movi	r2,-2
   30400:	1884703a 	and	r2,r3,r2
   30404:	1001703a 	wrctl	status,r2
  
  return context;
   30408:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3040c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   30410:	e0bfff17 	ldw	r2,-4(fp)
   30414:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   30418:	e0bffd17 	ldw	r2,-12(fp)
   3041c:	10800017 	ldw	r2,0(r2)
   30420:	e0fffd17 	ldw	r3,-12(fp)
   30424:	18c00117 	ldw	r3,4(r3)
   30428:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   3042c:	e0bffd17 	ldw	r2,-12(fp)
   30430:	10800117 	ldw	r2,4(r2)
   30434:	e0fffd17 	ldw	r3,-12(fp)
   30438:	18c00017 	ldw	r3,0(r3)
   3043c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   30440:	e0bffd17 	ldw	r2,-12(fp)
   30444:	e0fffd17 	ldw	r3,-12(fp)
   30448:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   3044c:	e0bffd17 	ldw	r2,-12(fp)
   30450:	e0fffd17 	ldw	r3,-12(fp)
   30454:	10c00015 	stw	r3,0(r2)
   30458:	e0bffb17 	ldw	r2,-20(fp)
   3045c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30460:	e0bffe17 	ldw	r2,-8(fp)
   30464:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   30468:	0001883a 	nop
   3046c:	e037883a 	mov	sp,fp
   30470:	df000017 	ldw	fp,0(sp)
   30474:	dec00104 	addi	sp,sp,4
   30478:	f800283a 	ret

0003047c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3047c:	defffb04 	addi	sp,sp,-20
   30480:	dfc00415 	stw	ra,16(sp)
   30484:	df000315 	stw	fp,12(sp)
   30488:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3048c:	d0a00f17 	ldw	r2,-32708(gp)
   30490:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   30494:	d0a70a17 	ldw	r2,-25560(gp)
   30498:	10800044 	addi	r2,r2,1
   3049c:	d0a70a15 	stw	r2,-25560(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   304a0:	00002e06 	br	3055c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   304a4:	e0bffd17 	ldw	r2,-12(fp)
   304a8:	10800017 	ldw	r2,0(r2)
   304ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   304b0:	e0bffd17 	ldw	r2,-12(fp)
   304b4:	10800403 	ldbu	r2,16(r2)
   304b8:	10803fcc 	andi	r2,r2,255
   304bc:	10000426 	beq	r2,zero,304d0 <alt_tick+0x54>
   304c0:	d0a70a17 	ldw	r2,-25560(gp)
   304c4:	1000021e 	bne	r2,zero,304d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   304c8:	e0bffd17 	ldw	r2,-12(fp)
   304cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   304d0:	e0bffd17 	ldw	r2,-12(fp)
   304d4:	10800217 	ldw	r2,8(r2)
   304d8:	d0e70a17 	ldw	r3,-25560(gp)
   304dc:	18801d36 	bltu	r3,r2,30554 <alt_tick+0xd8>
   304e0:	e0bffd17 	ldw	r2,-12(fp)
   304e4:	10800403 	ldbu	r2,16(r2)
   304e8:	10803fcc 	andi	r2,r2,255
   304ec:	1000191e 	bne	r2,zero,30554 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   304f0:	e0bffd17 	ldw	r2,-12(fp)
   304f4:	10800317 	ldw	r2,12(r2)
   304f8:	e0fffd17 	ldw	r3,-12(fp)
   304fc:	18c00517 	ldw	r3,20(r3)
   30500:	1809883a 	mov	r4,r3
   30504:	103ee83a 	callr	r2
   30508:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   3050c:	e0bfff17 	ldw	r2,-4(fp)
   30510:	1000031e 	bne	r2,zero,30520 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   30514:	e13ffd17 	ldw	r4,-12(fp)
   30518:	00303e00 	call	303e0 <alt_alarm_stop>
   3051c:	00000d06 	br	30554 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   30520:	e0bffd17 	ldw	r2,-12(fp)
   30524:	10c00217 	ldw	r3,8(r2)
   30528:	e0bfff17 	ldw	r2,-4(fp)
   3052c:	1887883a 	add	r3,r3,r2
   30530:	e0bffd17 	ldw	r2,-12(fp)
   30534:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   30538:	e0bffd17 	ldw	r2,-12(fp)
   3053c:	10c00217 	ldw	r3,8(r2)
   30540:	d0a70a17 	ldw	r2,-25560(gp)
   30544:	1880032e 	bgeu	r3,r2,30554 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   30548:	e0bffd17 	ldw	r2,-12(fp)
   3054c:	00c00044 	movi	r3,1
   30550:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   30554:	e0bffe17 	ldw	r2,-8(fp)
   30558:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3055c:	e0fffd17 	ldw	r3,-12(fp)
   30560:	d0a00f04 	addi	r2,gp,-32708
   30564:	18bfcf1e 	bne	r3,r2,304a4 <__alt_data_end+0xffff04a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   30568:	0001883a 	nop
}
   3056c:	0001883a 	nop
   30570:	e037883a 	mov	sp,fp
   30574:	dfc00117 	ldw	ra,4(sp)
   30578:	df000017 	ldw	fp,0(sp)
   3057c:	dec00204 	addi	sp,sp,8
   30580:	f800283a 	ret

00030584 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   30584:	deffff04 	addi	sp,sp,-4
   30588:	df000015 	stw	fp,0(sp)
   3058c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   30590:	000170fa 	wrctl	ienable,zero
}
   30594:	0001883a 	nop
   30598:	e037883a 	mov	sp,fp
   3059c:	df000017 	ldw	fp,0(sp)
   305a0:	dec00104 	addi	sp,sp,4
   305a4:	f800283a 	ret

000305a8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   305a8:	defffb04 	addi	sp,sp,-20
   305ac:	df000415 	stw	fp,16(sp)
   305b0:	df000404 	addi	fp,sp,16
   305b4:	e13ffe15 	stw	r4,-8(fp)
   305b8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   305bc:	e0bfff17 	ldw	r2,-4(fp)
   305c0:	10840070 	cmpltui	r2,r2,4097
   305c4:	1000021e 	bne	r2,zero,305d0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   305c8:	00840004 	movi	r2,4096
   305cc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   305d0:	e0fffe17 	ldw	r3,-8(fp)
   305d4:	e0bfff17 	ldw	r2,-4(fp)
   305d8:	1885883a 	add	r2,r3,r2
   305dc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   305e0:	e0bffe17 	ldw	r2,-8(fp)
   305e4:	e0bffc15 	stw	r2,-16(fp)
   305e8:	00000506 	br	30600 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   305ec:	e0bffc17 	ldw	r2,-16(fp)
   305f0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   305f4:	e0bffc17 	ldw	r2,-16(fp)
   305f8:	10800804 	addi	r2,r2,32
   305fc:	e0bffc15 	stw	r2,-16(fp)
   30600:	e0fffc17 	ldw	r3,-16(fp)
   30604:	e0bffd17 	ldw	r2,-12(fp)
   30608:	18bff836 	bltu	r3,r2,305ec <__alt_data_end+0xffff05ec>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   3060c:	e0bffe17 	ldw	r2,-8(fp)
   30610:	108007cc 	andi	r2,r2,31
   30614:	10000226 	beq	r2,zero,30620 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   30618:	e0bffc17 	ldw	r2,-16(fp)
   3061c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   30620:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   30624:	0001883a 	nop
   30628:	e037883a 	mov	sp,fp
   3062c:	df000017 	ldw	fp,0(sp)
   30630:	dec00104 	addi	sp,sp,4
   30634:	f800283a 	ret

00030638 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   30638:	defffe04 	addi	sp,sp,-8
   3063c:	df000115 	stw	fp,4(sp)
   30640:	df000104 	addi	fp,sp,4
   30644:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   30648:	e0bfff17 	ldw	r2,-4(fp)
   3064c:	10bffe84 	addi	r2,r2,-6
   30650:	10c00428 	cmpgeui	r3,r2,16
   30654:	18001a1e 	bne	r3,zero,306c0 <alt_exception_cause_generated_bad_addr+0x88>
   30658:	100690ba 	slli	r3,r2,2
   3065c:	008000f4 	movhi	r2,3
   30660:	10819c04 	addi	r2,r2,1648
   30664:	1885883a 	add	r2,r3,r2
   30668:	10800017 	ldw	r2,0(r2)
   3066c:	1000683a 	jmp	r2
   30670:	000306b0 	cmpltui	zero,zero,3098
   30674:	000306b0 	cmpltui	zero,zero,3098
   30678:	000306c0 	call	306c <__alt_mem_onchip_memory2_0-0x1cf94>
   3067c:	000306c0 	call	306c <__alt_mem_onchip_memory2_0-0x1cf94>
   30680:	000306c0 	call	306c <__alt_mem_onchip_memory2_0-0x1cf94>
   30684:	000306b0 	cmpltui	zero,zero,3098
   30688:	000306b8 	rdprs	zero,zero,3098
   3068c:	000306c0 	call	306c <__alt_mem_onchip_memory2_0-0x1cf94>
   30690:	000306b0 	cmpltui	zero,zero,3098
   30694:	000306b0 	cmpltui	zero,zero,3098
   30698:	000306c0 	call	306c <__alt_mem_onchip_memory2_0-0x1cf94>
   3069c:	000306b0 	cmpltui	zero,zero,3098
   306a0:	000306b8 	rdprs	zero,zero,3098
   306a4:	000306c0 	call	306c <__alt_mem_onchip_memory2_0-0x1cf94>
   306a8:	000306c0 	call	306c <__alt_mem_onchip_memory2_0-0x1cf94>
   306ac:	000306b0 	cmpltui	zero,zero,3098
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   306b0:	00800044 	movi	r2,1
   306b4:	00000306 	br	306c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   306b8:	0005883a 	mov	r2,zero
   306bc:	00000106 	br	306c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   306c0:	0005883a 	mov	r2,zero
  }
}
   306c4:	e037883a 	mov	sp,fp
   306c8:	df000017 	ldw	fp,0(sp)
   306cc:	dec00104 	addi	sp,sp,4
   306d0:	f800283a 	ret

000306d4 <atexit>:
   306d4:	200b883a 	mov	r5,r4
   306d8:	000f883a 	mov	r7,zero
   306dc:	000d883a 	mov	r6,zero
   306e0:	0009883a 	mov	r4,zero
   306e4:	003079c1 	jmpi	3079c <__register_exitproc>

000306e8 <exit>:
   306e8:	defffe04 	addi	sp,sp,-8
   306ec:	000b883a 	mov	r5,zero
   306f0:	dc000015 	stw	r16,0(sp)
   306f4:	dfc00115 	stw	ra,4(sp)
   306f8:	2021883a 	mov	r16,r4
   306fc:	00308b40 	call	308b4 <__call_exitprocs>
   30700:	008000f4 	movhi	r2,3
   30704:	108af404 	addi	r2,r2,11216
   30708:	11000017 	ldw	r4,0(r2)
   3070c:	20800f17 	ldw	r2,60(r4)
   30710:	10000126 	beq	r2,zero,30718 <exit+0x30>
   30714:	103ee83a 	callr	r2
   30718:	8009883a 	mov	r4,r16
   3071c:	0030a340 	call	30a34 <_exit>

00030720 <memcmp>:
   30720:	01c000c4 	movi	r7,3
   30724:	3980192e 	bgeu	r7,r6,3078c <memcmp+0x6c>
   30728:	2144b03a 	or	r2,r4,r5
   3072c:	11c4703a 	and	r2,r2,r7
   30730:	10000f26 	beq	r2,zero,30770 <memcmp+0x50>
   30734:	20800003 	ldbu	r2,0(r4)
   30738:	28c00003 	ldbu	r3,0(r5)
   3073c:	10c0151e 	bne	r2,r3,30794 <memcmp+0x74>
   30740:	31bfff84 	addi	r6,r6,-2
   30744:	01ffffc4 	movi	r7,-1
   30748:	00000406 	br	3075c <memcmp+0x3c>
   3074c:	20800003 	ldbu	r2,0(r4)
   30750:	28c00003 	ldbu	r3,0(r5)
   30754:	31bfffc4 	addi	r6,r6,-1
   30758:	10c00e1e 	bne	r2,r3,30794 <memcmp+0x74>
   3075c:	21000044 	addi	r4,r4,1
   30760:	29400044 	addi	r5,r5,1
   30764:	31fff91e 	bne	r6,r7,3074c <__alt_data_end+0xffff074c>
   30768:	0005883a 	mov	r2,zero
   3076c:	f800283a 	ret
   30770:	20c00017 	ldw	r3,0(r4)
   30774:	28800017 	ldw	r2,0(r5)
   30778:	18bfee1e 	bne	r3,r2,30734 <__alt_data_end+0xffff0734>
   3077c:	31bfff04 	addi	r6,r6,-4
   30780:	21000104 	addi	r4,r4,4
   30784:	29400104 	addi	r5,r5,4
   30788:	39bff936 	bltu	r7,r6,30770 <__alt_data_end+0xffff0770>
   3078c:	303fe91e 	bne	r6,zero,30734 <__alt_data_end+0xffff0734>
   30790:	003ff506 	br	30768 <__alt_data_end+0xffff0768>
   30794:	10c5c83a 	sub	r2,r2,r3
   30798:	f800283a 	ret

0003079c <__register_exitproc>:
   3079c:	defffa04 	addi	sp,sp,-24
   307a0:	dc000315 	stw	r16,12(sp)
   307a4:	040000f4 	movhi	r16,3
   307a8:	840af404 	addi	r16,r16,11216
   307ac:	80c00017 	ldw	r3,0(r16)
   307b0:	dc400415 	stw	r17,16(sp)
   307b4:	dfc00515 	stw	ra,20(sp)
   307b8:	18805217 	ldw	r2,328(r3)
   307bc:	2023883a 	mov	r17,r4
   307c0:	10003726 	beq	r2,zero,308a0 <__register_exitproc+0x104>
   307c4:	10c00117 	ldw	r3,4(r2)
   307c8:	010007c4 	movi	r4,31
   307cc:	20c00e16 	blt	r4,r3,30808 <__register_exitproc+0x6c>
   307d0:	1a000044 	addi	r8,r3,1
   307d4:	8800221e 	bne	r17,zero,30860 <__register_exitproc+0xc4>
   307d8:	18c00084 	addi	r3,r3,2
   307dc:	18c7883a 	add	r3,r3,r3
   307e0:	18c7883a 	add	r3,r3,r3
   307e4:	12000115 	stw	r8,4(r2)
   307e8:	10c7883a 	add	r3,r2,r3
   307ec:	19400015 	stw	r5,0(r3)
   307f0:	0005883a 	mov	r2,zero
   307f4:	dfc00517 	ldw	ra,20(sp)
   307f8:	dc400417 	ldw	r17,16(sp)
   307fc:	dc000317 	ldw	r16,12(sp)
   30800:	dec00604 	addi	sp,sp,24
   30804:	f800283a 	ret
   30808:	00800034 	movhi	r2,0
   3080c:	10800004 	addi	r2,r2,0
   30810:	10002626 	beq	r2,zero,308ac <__register_exitproc+0x110>
   30814:	01006404 	movi	r4,400
   30818:	d9400015 	stw	r5,0(sp)
   3081c:	d9800115 	stw	r6,4(sp)
   30820:	d9c00215 	stw	r7,8(sp)
   30824:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   30828:	d9400017 	ldw	r5,0(sp)
   3082c:	d9800117 	ldw	r6,4(sp)
   30830:	d9c00217 	ldw	r7,8(sp)
   30834:	10001d26 	beq	r2,zero,308ac <__register_exitproc+0x110>
   30838:	81000017 	ldw	r4,0(r16)
   3083c:	10000115 	stw	zero,4(r2)
   30840:	02000044 	movi	r8,1
   30844:	22405217 	ldw	r9,328(r4)
   30848:	0007883a 	mov	r3,zero
   3084c:	12400015 	stw	r9,0(r2)
   30850:	20805215 	stw	r2,328(r4)
   30854:	10006215 	stw	zero,392(r2)
   30858:	10006315 	stw	zero,396(r2)
   3085c:	883fde26 	beq	r17,zero,307d8 <__alt_data_end+0xffff07d8>
   30860:	18c9883a 	add	r4,r3,r3
   30864:	2109883a 	add	r4,r4,r4
   30868:	1109883a 	add	r4,r2,r4
   3086c:	21802215 	stw	r6,136(r4)
   30870:	01800044 	movi	r6,1
   30874:	12406217 	ldw	r9,392(r2)
   30878:	30cc983a 	sll	r6,r6,r3
   3087c:	4992b03a 	or	r9,r9,r6
   30880:	12406215 	stw	r9,392(r2)
   30884:	21c04215 	stw	r7,264(r4)
   30888:	01000084 	movi	r4,2
   3088c:	893fd21e 	bne	r17,r4,307d8 <__alt_data_end+0xffff07d8>
   30890:	11006317 	ldw	r4,396(r2)
   30894:	218cb03a 	or	r6,r4,r6
   30898:	11806315 	stw	r6,396(r2)
   3089c:	003fce06 	br	307d8 <__alt_data_end+0xffff07d8>
   308a0:	18805304 	addi	r2,r3,332
   308a4:	18805215 	stw	r2,328(r3)
   308a8:	003fc606 	br	307c4 <__alt_data_end+0xffff07c4>
   308ac:	00bfffc4 	movi	r2,-1
   308b0:	003fd006 	br	307f4 <__alt_data_end+0xffff07f4>

000308b4 <__call_exitprocs>:
   308b4:	defff504 	addi	sp,sp,-44
   308b8:	df000915 	stw	fp,36(sp)
   308bc:	dd400615 	stw	r21,24(sp)
   308c0:	dc800315 	stw	r18,12(sp)
   308c4:	dfc00a15 	stw	ra,40(sp)
   308c8:	ddc00815 	stw	r23,32(sp)
   308cc:	dd800715 	stw	r22,28(sp)
   308d0:	dd000515 	stw	r20,20(sp)
   308d4:	dcc00415 	stw	r19,16(sp)
   308d8:	dc400215 	stw	r17,8(sp)
   308dc:	dc000115 	stw	r16,4(sp)
   308e0:	d9000015 	stw	r4,0(sp)
   308e4:	2839883a 	mov	fp,r5
   308e8:	04800044 	movi	r18,1
   308ec:	057fffc4 	movi	r21,-1
   308f0:	008000f4 	movhi	r2,3
   308f4:	108af404 	addi	r2,r2,11216
   308f8:	12000017 	ldw	r8,0(r2)
   308fc:	45005217 	ldw	r20,328(r8)
   30900:	44c05204 	addi	r19,r8,328
   30904:	a0001c26 	beq	r20,zero,30978 <__call_exitprocs+0xc4>
   30908:	a0800117 	ldw	r2,4(r20)
   3090c:	15ffffc4 	addi	r23,r2,-1
   30910:	b8000d16 	blt	r23,zero,30948 <__call_exitprocs+0x94>
   30914:	14000044 	addi	r16,r2,1
   30918:	8421883a 	add	r16,r16,r16
   3091c:	8421883a 	add	r16,r16,r16
   30920:	84402004 	addi	r17,r16,128
   30924:	a463883a 	add	r17,r20,r17
   30928:	a421883a 	add	r16,r20,r16
   3092c:	e0001e26 	beq	fp,zero,309a8 <__call_exitprocs+0xf4>
   30930:	80804017 	ldw	r2,256(r16)
   30934:	e0801c26 	beq	fp,r2,309a8 <__call_exitprocs+0xf4>
   30938:	bdffffc4 	addi	r23,r23,-1
   3093c:	843fff04 	addi	r16,r16,-4
   30940:	8c7fff04 	addi	r17,r17,-4
   30944:	bd7ff91e 	bne	r23,r21,3092c <__alt_data_end+0xffff092c>
   30948:	00800034 	movhi	r2,0
   3094c:	10800004 	addi	r2,r2,0
   30950:	10000926 	beq	r2,zero,30978 <__call_exitprocs+0xc4>
   30954:	a0800117 	ldw	r2,4(r20)
   30958:	1000301e 	bne	r2,zero,30a1c <__call_exitprocs+0x168>
   3095c:	a0800017 	ldw	r2,0(r20)
   30960:	10003226 	beq	r2,zero,30a2c <__call_exitprocs+0x178>
   30964:	a009883a 	mov	r4,r20
   30968:	98800015 	stw	r2,0(r19)
   3096c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   30970:	9d000017 	ldw	r20,0(r19)
   30974:	a03fe41e 	bne	r20,zero,30908 <__alt_data_end+0xffff0908>
   30978:	dfc00a17 	ldw	ra,40(sp)
   3097c:	df000917 	ldw	fp,36(sp)
   30980:	ddc00817 	ldw	r23,32(sp)
   30984:	dd800717 	ldw	r22,28(sp)
   30988:	dd400617 	ldw	r21,24(sp)
   3098c:	dd000517 	ldw	r20,20(sp)
   30990:	dcc00417 	ldw	r19,16(sp)
   30994:	dc800317 	ldw	r18,12(sp)
   30998:	dc400217 	ldw	r17,8(sp)
   3099c:	dc000117 	ldw	r16,4(sp)
   309a0:	dec00b04 	addi	sp,sp,44
   309a4:	f800283a 	ret
   309a8:	a0800117 	ldw	r2,4(r20)
   309ac:	80c00017 	ldw	r3,0(r16)
   309b0:	10bfffc4 	addi	r2,r2,-1
   309b4:	15c01426 	beq	r2,r23,30a08 <__call_exitprocs+0x154>
   309b8:	80000015 	stw	zero,0(r16)
   309bc:	183fde26 	beq	r3,zero,30938 <__alt_data_end+0xffff0938>
   309c0:	95c8983a 	sll	r4,r18,r23
   309c4:	a0806217 	ldw	r2,392(r20)
   309c8:	a5800117 	ldw	r22,4(r20)
   309cc:	2084703a 	and	r2,r4,r2
   309d0:	10000b26 	beq	r2,zero,30a00 <__call_exitprocs+0x14c>
   309d4:	a0806317 	ldw	r2,396(r20)
   309d8:	2088703a 	and	r4,r4,r2
   309dc:	20000c1e 	bne	r4,zero,30a10 <__call_exitprocs+0x15c>
   309e0:	89400017 	ldw	r5,0(r17)
   309e4:	d9000017 	ldw	r4,0(sp)
   309e8:	183ee83a 	callr	r3
   309ec:	a0800117 	ldw	r2,4(r20)
   309f0:	15bfbf1e 	bne	r2,r22,308f0 <__alt_data_end+0xffff08f0>
   309f4:	98800017 	ldw	r2,0(r19)
   309f8:	153fcf26 	beq	r2,r20,30938 <__alt_data_end+0xffff0938>
   309fc:	003fbc06 	br	308f0 <__alt_data_end+0xffff08f0>
   30a00:	183ee83a 	callr	r3
   30a04:	003ff906 	br	309ec <__alt_data_end+0xffff09ec>
   30a08:	a5c00115 	stw	r23,4(r20)
   30a0c:	003feb06 	br	309bc <__alt_data_end+0xffff09bc>
   30a10:	89000017 	ldw	r4,0(r17)
   30a14:	183ee83a 	callr	r3
   30a18:	003ff406 	br	309ec <__alt_data_end+0xffff09ec>
   30a1c:	a0800017 	ldw	r2,0(r20)
   30a20:	a027883a 	mov	r19,r20
   30a24:	1029883a 	mov	r20,r2
   30a28:	003fb606 	br	30904 <__alt_data_end+0xffff0904>
   30a2c:	0005883a 	mov	r2,zero
   30a30:	003ffb06 	br	30a20 <__alt_data_end+0xffff0a20>

00030a34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   30a34:	defffd04 	addi	sp,sp,-12
   30a38:	df000215 	stw	fp,8(sp)
   30a3c:	df000204 	addi	fp,sp,8
   30a40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   30a44:	0001883a 	nop
   30a48:	e0bfff17 	ldw	r2,-4(fp)
   30a4c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   30a50:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   30a54:	10000226 	beq	r2,zero,30a60 <_exit+0x2c>
    ALT_SIM_FAIL();
   30a58:	002af070 	cmpltui	zero,zero,43969
   30a5c:	00000106 	br	30a64 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   30a60:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   30a64:	003fff06 	br	30a64 <__alt_data_end+0xffff0a64>
