

#include <stdio.h>
#include "I2C_core.h"
#include "terasic_includes.h"
#include "mipi_camera_config.h"
#include "mipi_bridge_config.h"
#include "altera_avalon_uart.h"
#include "altera_avalon_uart_regs.h"

#include "auto_focus.h"

#include <fcntl.h>
#include <unistd.h>
#include <string.h>

//EEE_IMGPROC defines
#define EEE_IMGPROC_MSG_START ('R'<<16 | 'B'<<8 | 'B')

//offsets
#define EEE_IMGPROC_STATUS 0
#define EEE_IMGPROC_MSG 1
#define EEE_IMGPROC_ID 2
#define EEE_IMGPROC_BBCOL 3

#define EXPOSURE_INIT 0x000500
#define EXPOSURE_STEP 0x100
#define GAIN_INIT 0x000
#define GAIN_STEP 0x040
#define DEFAULT_LEVEL 3
#define FOCUS_INIT 0x200

#define RED_GAIN_INIT 0x400
#define GREEN_Gain_INIT 0x450
#define BLUE_GAIN_INIT 0x400
#define RGB_STEP 0x50

#define MIPI_REG_PHYClkCtl		0x0056
#define MIPI_REG_PHYData0Ctl	0x0058
#define MIPI_REG_PHYData1Ctl	0x005A
#define MIPI_REG_PHYData2Ctl	0x005C
#define MIPI_REG_PHYData3Ctl	0x005E
#define MIPI_REG_PHYTimDly		0x0060
#define MIPI_REG_PHYSta			0x0062
#define MIPI_REG_CSIStatus		0x0064
#define MIPI_REG_CSIErrEn		0x0066
#define MIPI_REG_MDLSynErr		0x0068
#define MIPI_REG_FrmErrCnt		0x0080
#define MIPI_REG_MDLErrCnt		0x0090




// 60cm height!! red zoom 2£ºh4f zoom 3: ha0
//              blue zoom 2: h4b zoom 3: h9a
//		     yellow: zoom 2: h3e zoom 3: h7f


// we choose zoom 2 for now

#define width_30 73728 // pixel*1024
#define height_30_r 80896
#define height_30_b 76800
#define height_30_y 63488

void mipi_clear_error(void){
	MipiBridgeRegWrite(MIPI_REG_CSIStatus,0x01FF); // clear error
	MipiBridgeRegWrite(MIPI_REG_MDLSynErr,0x0000); // clear error
	MipiBridgeRegWrite(MIPI_REG_FrmErrCnt,0x0000); // clear error
	MipiBridgeRegWrite(MIPI_REG_MDLErrCnt, 0x0000); // clear error

  	MipiBridgeRegWrite(0x0082,0x00);
  	MipiBridgeRegWrite(0x0084,0x00);
  	MipiBridgeRegWrite(0x0086,0x00);
  	MipiBridgeRegWrite(0x0088,0x00);
  	MipiBridgeRegWrite(0x008A,0x00);
  	MipiBridgeRegWrite(0x008C,0x00);
  	MipiBridgeRegWrite(0x008E,0x00);
  	MipiBridgeRegWrite(0x0090,0x00);
}

void mipi_show_error_info(void){

	alt_u16 PHY_status, SCI_status, MDLSynErr, FrmErrCnt, MDLErrCnt;

	PHY_status = MipiBridgeRegRead(MIPI_REG_PHYSta);
	SCI_status = MipiBridgeRegRead(MIPI_REG_CSIStatus);
	MDLSynErr = MipiBridgeRegRead(MIPI_REG_MDLSynErr);
	FrmErrCnt = MipiBridgeRegRead(MIPI_REG_FrmErrCnt);
	MDLErrCnt = MipiBridgeRegRead(MIPI_REG_MDLErrCnt);
	//printf("PHY_status=%xh, CSI_status=%xh, MDLSynErr=%xh, FrmErrCnt=%xh, MDLErrCnt=%xh\r\n", PHY_status, SCI_status, MDLSynErr,FrmErrCnt, MDLErrCnt);
}

void mipi_show_error_info_more(void){
    //printf("FrmErrCnt = %d\n",MipiBridgeRegRead(0x0080));
    //printf("CRCErrCnt = %d\n",MipiBridgeRegRead(0x0082));
    //printf("CorErrCnt = %d\n",MipiBridgeRegRead(0x0084));
    //printf("HdrErrCnt = %d\n",MipiBridgeRegRead(0x0086));
    //printf("EIDErrCnt = %d\n",MipiBridgeRegRead(0x0088));
    //printf("CtlErrCnt = %d\n",MipiBridgeRegRead(0x008A));
    //printf("SoTErrCnt = %d\n",MipiBridgeRegRead(0x008C));
    //printf("SynErrCnt = %d\n",MipiBridgeRegRead(0x008E));
    //printf("MDLErrCnt = %d\n",MipiBridgeRegRead(0x0090));
    //printf("FIFOSTATUS = %d\n",MipiBridgeRegRead(0x00F8));
    //printf("DataType = 0x%04x\n",MipiBridgeRegRead(0x006A));
    //printf("CSIPktLen = %d\n",MipiBridgeRegRead(0x006E));
}



bool MIPI_Init(void){
	bool bSuccess;


	bSuccess = oc_i2c_init_ex(I2C_OPENCORES_MIPI_BASE, 50*1000*1000,400*1000); //I2C: 400K
	if (!bSuccess)
		//printf("failed to init MIPI- Bridge i2c\r\n");

    usleep(50*1000);
    MipiBridgeInit();

    usleep(500*1000);

//	bSuccess = oc_i2c_init_ex(I2C_OPENCORES_CAMERA_BASE, 50*1000*1000,400*1000); //I2C: 400K
//	if (!bSuccess)
//		//printf("failed to init MIPI- Camera i2c\r\n");

    MipiCameraInit();
    MIPI_BIN_LEVEL(DEFAULT_LEVEL);
//    OV8865_FOCUS_Move_to(340);

//    oc_i2c_uninit(I2C_OPENCORES_CAMERA_BASE);  // Release I2C bus , due to two I2C master shared!


 	usleep(1000);


//    oc_i2c_uninit(I2C_OPENCORES_MIPI_BASE);

	return bSuccess;
}

/*
void beacons_dist(int words[8]) {
	int w_x;
	int dist;
	char *color[] = {"Red", "Blue", "Yellow"};
	int w_y, idx;
	idx = 0;
	for (int i = 1; i < 7; i+=2){
		w_x = ((words[i + 1] >> 16) - (words[i] >> 16)) & 0xFFFF;
		w_y = ((words[i + 1] & 0xFFFF) - (words[i] & 0xFFFF)) & 0xFFFF;
		//printf("w_x %d, w_y %d\n", w_x, w_y);

		if( w_x > 100 || w_x < 10 || w_y > 100 || w_y < 10){
					//printf("Too small or too big for %s, ERROR!;\n", color[idx]);
		}
		else if (w_x/w_y > 3 || w_y/w_x > 3){
					//f//printf("Not like a square for %s, ratio ERROR!;\n", color[idx]);
		}
		else {
			dist = ((width_30/w_x) * 300) >> 10;
			//printf("distance to beacon %s = %d\n", color[idx], dist);
		}

		idx += 1;

		//dist_r = ((width_30/w_r_x) * 300) >> 10;
		//dist_b = ((width_30/w_b_x) * 300) >> 10;
		//dist_y = ((width_30/w_y_x) * 300) >> 10;


	}
}
*/

int beacon_dist(int* buf, int num) {
	int w, h, dist;

	w = ((buf[1] >> 16) - (buf[0] >> 16)) & 0xFFFF;
	h = ((buf[1] & 0xFFFF) - (buf[0] & 0xFFFF)) & 0xFFFF;

	if( w > 200 || w < 10 || h > 200 || h < 10){  // need to tweak these values
		dist = -1;
	}
	else if (w/h > 3 || h/w > 3){
		dist = -1;
	} else {
		if (num == 1){
			//dist = ((width_30/w) * 300) >> 10;
			dist = ((height_30_r/h) * 600) >> 10;
		}
		else if (num == 2){
			//dist = ((width_30/w) * 300) >> 10;
			dist = ((height_30_b/h) * 600) >> 10;
		}
		else if (num == 3){
			//dist = ((width_30/w) * 300) >> 10;
			dist = ((height_30_y/h) * 600) >> 10;
		}

	}

	return dist;    // just for testing purposes!!!
}



/*
int* beacon_dist(int* buf) {
	int w, h;
	int* dist = (int*)malloc(3 * sizeof(int));
	int minAboveZero = -1;

	for (int i = 0; i < 6; i+=2){

		w = ((buf[i+1] >> 16) - (buf[i] >> 16)) & 0xFFFF;
		h = ((buf[i+1] & 0xFFFF) - (buf[i] & 0xFFFF)) & 0xFFFF;

		if( w > 200 || w < 10 || h > 200 || h < 10){  // need to tweak these values
			dist[i/2] = -1;
		}
		else if (w/h > 3 || h/w > 3){
			dist[i/2] = -2;
		} else {
			//dist = ((width_30/w) * 300) >> 10;
			dist[i/2] = ((height_30/h) * 300) >> 10;
		}
	}

	for (int i = 0; i < 3; i++) {
	    if (dist[i] > 0 && (minAboveZero == -1 || dist[i] < minAboveZero)) {
	      minAboveZero = dist[i];
	    }
	  }

	for (int i = 0; i < 3; i++) {
		if (dist[i] != minAboveZero) {
		  dist[i] = -1;
		}
	  }

	return dist;    // just for testing purposes!!!
}

*/

int findbb(int* buf){
	int minAboveZero = -1;
	int min_i = -1;
	for (int i = 0; i < 3; i++) {
		if (buf[i] > 0 && (minAboveZero == -1 || buf[i] < minAboveZero)) {
		  minAboveZero = buf[i];
		  min_i= i;
		}
	  }

	int tmp = (minAboveZero & 0x00FFFFFF) + (min_i << 24);
	//printf("%08x", tmp);

	return tmp;
}

int byte2int(unsigned char* buf, int size) {
  int val=0;

  for (int i=(size-1); i>=0; i--) {
    val += buf[i] << (8*i);
  }

  return val;
}


int main()
{

	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);

  //printf("DE10-LITE D8M VGA Demo\n");
  //printf("Imperial College EEE2 Project version\n");
  IOWR(MIPI_PWDN_N_BASE, 0x00, 0x00);
  IOWR(MIPI_RESET_N_BASE, 0x00, 0x00);

  usleep(2000);
  IOWR(MIPI_PWDN_N_BASE, 0x00, 0xFF);
  usleep(2000);
  IOWR(MIPI_RESET_N_BASE, 0x00, 0xFF);

  //printf("Image Processor ID: %x\n",IORD(0x42000,EEE_IMGPROC_ID));
  ////printf("Image Processor ID: %x\n",IORD(EEE_IMGPROC_0_BASE,EEE_IMGPROC_ID)); //Don't know why this doesn't work - definition is in system.h in BSP


  usleep(2000);


  // MIPI Init
   if (!MIPI_Init()){
	  //printf("MIPI_Init Init failed!\r\n");
  }else{
	  //printf("MIPI_Init Init successfully!\r\n");
  }

//   while(1){
 	    mipi_clear_error();
	 	usleep(50*1000);
 	    mipi_clear_error();
	 	usleep(1000*1000);
	    mipi_show_error_info();
//	    mipi_show_error_info_more();
	    //printf("\n");
//   }


#if 0  // focus sweep
	    //printf("\nFocus sweep\n");
 	 	alt_u16 ii= 350;
 	    alt_u8  dir = 0;
 	 	while(1){
 	 		if(ii< 50) dir = 1;
 	 		else if (ii> 1000) dir =0;

 	 		if(dir) ii += 20;
 	 		else    ii -= 20;

 	    	//printf("%d\n",ii);
 	     OV8865_FOCUS_Move_to(ii);
 	     usleep(50*1000);
 	    }
#endif






    //////////////////////////////////////////////////////////
 	 	alt_u32 exposureTime = EXPOSURE_INIT;
 	 	alt_u16 gain = GAIN_INIT;


        OV8865SetExposure(exposureTime);
        OV8865SetGain(gain);
        //Focus_Init();

        alt_u16 bin_level = DEFAULT_LEVEL;
        alt_u8  manual_focus_step = 10;
        alt_u16  current_focus = FOCUS_INIT;
        int boundingBoxColour = 0;

        alt_u16 RedGain = RED_GAIN_INIT;
        alt_u16 GreenGain = GREEN_Gain_INIT;
        alt_u16 BlueGain = BLUE_GAIN_INIT;


        FILE* ser = fopen("/dev/uart_0", "rb+");
        if(ser){
        	//printf("Opened UART\n");
        } else {
        	//printf("Failed to open UART\n");
        	while (1);
        }
        int uart_0_fileno = fileno(ser);
        fcntl(uart_0_fileno, F_SETFL, O_NONBLOCK);

  int state = 0;
  int buf[2];
  int buf_dist[3];
  //usleep(5000000);

  while(1){

       // touch KEY0 to trigger Auto focus
	   if((IORD(KEY_BASE,0)&0x03) == 0x02){

    	   //current_focus = Focus_Window(320,240)
		   current_focus = FOCUS_INIT;
       }
	   // touch KEY1 to ZOOM
	         if((IORD(KEY_BASE,0)&0x03) == 0x01){
	      	   if(bin_level == 3 )bin_level = 1;
	      	   else bin_level ++;
	      	   //printf("set bin level to %d\n",bin_level);
	      	   MIPI_BIN_LEVEL(bin_level);
	      	 	usleep(500000);

	         }


	#if 0
       if((IORD(KEY_BASE,0)&0x0F) == 0x0E){

    	   current_focus = Focus_Window(320,240);
       }

       // touch KEY1 to trigger Manual focus  - step
       if((IORD(KEY_BASE,0)&0x0F) == 0x0D){

    	   if(current_focus > manual_focus_step) current_focus -= manual_focus_step;
    	   else current_focus = 0;
    	   OV8865_FOCUS_Move_to(current_focus);

       }

       // touch KEY2 to trigger Manual focus  + step
       if((IORD(KEY_BASE,0)&0x0F) == 0x0B){
    	   current_focus += manual_focus_step;
    	   if(current_focus >1023) current_focus = 1023;
    	   OV8865_FOCUS_Move_to(current_focus);
       }

       // touch KEY3 to ZOOM
       if((IORD(KEY_BASE,0)&0x0F) == 0x07){
    	   if(bin_level == 3 )bin_level = 1;
    	   else bin_level ++;
    	   //printf("set bin level to %d\n",bin_level);
    	   MIPI_BIN_LEVEL(bin_level);
    	 	usleep(500000);

       }
	#endif


       //Read messages from the image processor and print them on the terminal
       while ((IORD(0x42000,EEE_IMGPROC_STATUS)>>8) & 0xff) { 	//Find out if there are words to read
           int word_in, word_out;

		   word_in = IORD(0x42000,EEE_IMGPROC_MSG); //Get next word from message buffer
    	   if (word_in == EEE_IMGPROC_MSG_START) {  //Newline on message identifier
           	   state = 0;
    	   }

           int en = 0;
           switch (state) {
			   case 0:
				   word_out = word_in;
				   en=1;
				   break;
			   case 1: case 3: case 5:
				   buf[0] = word_in;
				   break;
			   case 2: case 4:
				   buf[1] = word_in;
				   buf_dist[state/2-1] = beacon_dist(buf, state/2);
				   en=0;
				   break;
			   case 6:
				   buf[1] = word_in;
				   buf_dist[state/2-1] = beacon_dist(buf, state/2);
				   word_out = findbb(buf_dist);
				   en=1;
				   break;
			   case 7:
				   word_out = word_in;
				   en=1;
				   break;
			   default:
				   break;
		   }

		   if (en) {
			   if (fwrite(&word_out, 4, 1, ser) != 1) {
				   //printf("Error writing to UART");
			   } else {
				   char space = (state == 7) ? '\n' : ' ';
				   printf("%08x",word_out);
				   printf("%c",space);
			   }
		   }


			  //next state
			  if ((state > -1) & (state < 7)) {
			   state++;
			  } else if (state ==  7) {
				  state = -1;
			  }
		  }


       // read messages for zoom in and out-------------------
       unsigned char buf[4];

	   if (fread(buf, 1, 4, ser) >= 4) {
		   int zoom_level = byte2int(buf, 4);
		   MIPI_BIN_LEVEL(zoom_level);
		   printf("set bin level to %d\n", zoom_level);
		   //usleep(500000);
	   }







       //Update the bounding box colour
       boundingBoxColour = ((boundingBoxColour + 1) & 0xff);
       IOWR(0x42000, EEE_IMGPROC_BBCOL, (boundingBoxColour << 8) | (0xff - boundingBoxColour));

       //Process input commands
       int in = getchar();
       switch (in) {
       	   case 'e': {
       		   exposureTime += EXPOSURE_STEP;
       		   OV8865SetExposure(exposureTime);
       		   //printf("\nExposure = %x ", exposureTime);
       	   	   break;}
       	   case 'd': {
       		   exposureTime -= EXPOSURE_STEP;
       		   OV8865SetExposure(exposureTime);
       		   //printf("\nExposure = %x ", exposureTime);
       	   	   break;}
       	   case 't': {
       		   gain += GAIN_STEP;
       		   OV8865SetGain(gain);
       		   //printf("\nGain = %x ", gain);
       	   	   break;}
       	   case 'g': {
       		   gain -= GAIN_STEP;
       		   OV8865SetGain(gain);
       		   //printf("\nGain = %x ", gain);
       	   	   break;}
       	   case 'r': {
        	   current_focus += manual_focus_step;
        	   if(current_focus >1023) current_focus = 1023;
        	   OV8865_FOCUS_Move_to(current_focus);
        	   //printf("\nFocus = %x ",current_focus);
       	   	   break;}
       	   case 'f': {
        	   if(current_focus > manual_focus_step) current_focus -= manual_focus_step;
        	   OV8865_FOCUS_Move_to(current_focus);
        	   //printf("\nFocus = %x ",current_focus);
       	   	   break;}

			case 'i':{
				RedGain += RGB_STEP;
				OV8865RedGain(RedGain);
				//f//printf(stderr, "\n red Gain is now set to  = %x", RedGain);
				break;}
			case 'j':{
				RedGain -= RGB_STEP;
				OV8865RedGain(RedGain);
				//f//printf(stderr, "\n red Gain is now set to  = %x", RedGain);
				break;}
			case 'k':{
				GreenGain += RGB_STEP;
				OV8865GreenGain(GreenGain);
				//f//printf(stderr, "\n green Gain is now set to = %x", GreenGain);
				break;}
			case 'o':{
				GreenGain -= RGB_STEP;
				OV8865GreenGain(GreenGain);
				//f//printf(stderr, "\n green Gain is now set to = %x", GreenGain);
				break;}
			case 'p':{
				BlueGain += RGB_STEP;
				OV8865BlueGain(BlueGain);
				//f//printf(stderr, "\n blue Gain is now set to = %x", BlueGain);
				break;}
			case 'q':{
				BlueGain -= RGB_STEP;
				OV8865BlueGain(BlueGain);
				//f//printf(stderr, "\n blue Gain is now set to = %x", BlueGain);
				break;}
			   }


	   //Main loop delay
	   usleep(10000);

   };
  return 0;
}
